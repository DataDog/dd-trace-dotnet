// <copyright file="Program.cs" company="Datadog">
// Unless explicitly stated otherwise all files in this repository are licensed under the Apache 2 License.
// This product includes software developed at Datadog (https://www.datadoghq.com/). Copyright 2022 Datadog, Inc.
// </copyright>

using System;
using System.Threading;

namespace Datadog.Profiler.IntegrationTests
{
    internal class Program
    {
        // This application is used to replay events from a .bevents file generated by the dd-prof-etw-client tool
        // when a profiled application tries to connect via named pipe (its endpoint is passed as the -e argument).
        //  1. start this application with the .bevents file to replay as the -f argument
        //  2. start the profiled application using the same named pipe endpoint
        //  3. the profiled application sends a register command to the endpoint
        //  4. the events will be replayed and sent to the profiled application
        //  5. the application stops after the profiled application sends unregister command to the endpoint
        // NOTE: the .bevents file must be 32 or 64 compatible with the running profiled application
        public static void Main(string[] args)
        {
            ParseCommandLine(args, out string eventsFilename, out string endpoint);
            if (eventsFilename == null)
            {
                Console.WriteLine("Missing required argument: -f <.bevents file name>");
                return;
            }

            Console.WriteLine($"Processing events in {eventsFilename}");

            if (endpoint == null)
            {
                Console.WriteLine("Missing required argument: -e <namedpipe endpoint such as DD_ETW_TEST_AGENT (no \\\\.\\pipe\\ prefix!)>");
                return;
            }

            ManualResetEventSlim mre = new ManualResetEventSlim(false);

            Console.WriteLine($"Waiting for profiler registration from {endpoint}");
            AgentEtwProxy agentEtwProxy = new AgentEtwProxy(null, endpoint, eventsFilename);
            agentEtwProxy.ProfilerRegistered += (sender, e) =>
            {
                Console.WriteLine($"Profiler registered with PID {e.Value}");
            };

            agentEtwProxy.EventsSent += (sender, e) =>
            {
                Console.WriteLine($"Events sent: {e.Value}");
            };

            agentEtwProxy.ProfilerUnregistered += (sender, e) =>
            {
                Console.WriteLine($"Profiler unregistered with PID {e.Value}");
                mre.Set();
            };

            mre.Wait();
        }

        private static void ParseCommandLine(string[] args, out string eventsFilename, out string endpoint)
        {
            eventsFilename = null;
            endpoint = null;

            for (int i = 0; i < args.Length; i++)
            {
                string arg = args[i];
                if ("-f".Equals(arg, StringComparison.OrdinalIgnoreCase))
                {
                    // a filename is expected
                    i++;
                    if (i < args.Length)
                    {
                        eventsFilename = args[i];
                    }
                }
                else
                if ("-e".Equals(arg, StringComparison.OrdinalIgnoreCase))
                {
                    // a namedpipe endpoint is expected such as "\\\\.\\pipe\\DD_ETW_TEST_AGENT"
                    i++;
                    if (i < args.Length)
                    {
                        endpoint = args[i];
                    }
                }
            }
        }
    }
}
