These tools are used in different scenario related to the support of ETW events for .NET Framework applications"
- dd-prof-etw-collector: application used to simulate the named pipe endpoint of the Datadog Agent the profiler connect to receive ETW events (support register/unregister commands)
- dd-prof-etw-client: application used to implement and debug C++ classes used by the profiler to connect to the Agent and receive ETW events. It was used by the Agent to easily test the protocol (i.e. replacing a profiled application). It requires another .NET application that implements scenarios corresponding to interesting events. These events can also be recorded in .bevents files that are used in integration tests to replay the scenarios without the Agent.
- dd-prof-etw-agent: application used to implement and debug C# AgentEtwProxy class used to emulate the named pipe protocol for integration tests 
- dd-prof-etw-replay: application used to implement and debug C# classes used to deserialize events stored in .bevents files


How to add an integration test for .NET Framework
----------------------------------------------------------------------
NOTE: scenario application must be run in both 32 bit and 64 bit 
1. write the C# code corresponding to the scenario (i.e. generating GCs, lock contention or allocations)
2. run in x64 the corresponding app that displays its PID and wait for user input before starting the scenario that will generate events
3. run dd-prof-etw-client with -pid <PID> -r <path to the .bevents filename>
4. trigger the scenario in the C# application
5. copy the generated .bevents file to the integration test folder
6. change its properties in the integration test project: Build Action = Content and Copy to Output Directory = always
7. do the same steps 2 to 6 but in x86
8. add the following code in the integration test byt changing the filenames
   using var agent = MockDatadogAgent.CreateHttpAgent(_output);
   if (IntPtr.Size == 4)
   {
      // 32-bit
      agent.StartEtwProxy("DD_ETW_TEST_AGENT", "Contention\\lockContention-32.bevents");
   }
   else
   {
      // 64-bit
      agent.StartEtwProxy("DD_ETW_TEST_AGENT", "Contention\\lockContention-64.bevents");
   }
   int eventsCount = 0;
   agent.EventsSent += (sender, e) => eventsCount = e.Value;
   runner.Run(agent);

9. ensure that events are received 
   Assert.True(eventsCount > 0);

10. look at the generated .pprof for expected samples


How to debug an integration test .bevents file scenario
----------------------------------------------------------------------
If it is needed to debug the profiler event parsing code based on a .bevents scenario file, follow these steps:
1. run dd-prof-etw-agent with -f <path to the .bevents file> -e DD_ETW_TEST_AGENT
2. debug Samples.Computer01 project with the needed env var set including 
   "DD_INTERNAL_PROFILING_ETW_ENABLED": "1",
   "DD_INTERNAL_ETW_LOGGING_ENABLED": "1",
   "DD_INTERNAL_ETW_ENDPOINT": "\\\\.\\pipe\\DD_ETW_TEST_AGENT",
3. set breakpoints in EtwEventsManager.cpp in OnEvent() and ClrEventsParser.cpp if needed

NOTE: if the protocol itself seems broken, it is also possible to debug dd-prof-etw-agent in step 1 and set breakpoints in AgentEtwProxy.cs
