<Project xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
  <Target Name="AddInternalsVisibleTo" BeforeTargets="BeforeCompile">

    <PropertyGroup>
      <Datadog-Trace-PublicKey>002400000480000094000000060200000024000052534131000400000100010025b855c8bc41b1d47e777fc247392999ca6f553cdb030fac8e3bd010171ded9982540d988553935f44f7dd58cb4b17fbb92653d5c2dc5112696886665b317c6f92795bf64beab2405c501c8a30cb1b31b1541ed66e27d9823169ec2815b00ceeeecc8d5a1bf43db67d2961a3e9bea1397f043ec07491709649252f5565b756c5</Datadog-Trace-PublicKey>
    </PropertyGroup>

    <!-- Add default suffix if there is no InternalsVisibleTo or InternalsVisibleToSuffix defined -->
    <ItemGroup Condition="@(InternalsVisibleToSuffix->Count()) == 0 AND @(InternalsVisibleTo->Count()) == 0">
      <InternalsVisibleToSuffix Include=".Tests" />
      <InternalsVisibleToSuffix Include=".IntegrationTests" />
    </ItemGroup>

    <!-- Handle InternalsVisibleTo -->
    <ItemGroup Condition="'@(InternalsVisibleTo->Count())' &gt; 0">
      <AssemblyAttribute Include="System.Runtime.CompilerServices.InternalsVisibleTo">
        <_Parameter1>%(InternalsVisibleTo.Identity), PublicKey=$(Datadog-Trace-PublicKey)</_Parameter1>
      </AssemblyAttribute>
    </ItemGroup>

    <!-- Handle InternalsVisibleToSuffix -->
    <ItemGroup Condition="@(InternalsVisibleToSuffix->Count()) &gt; 0">
      <AssemblyAttribute Include="System.Runtime.CompilerServices.InternalsVisibleTo">
        <_Parameter1>$(AssemblyName)%(InternalsVisibleToSuffix.Identity), PublicKey=$(Datadog-Trace-PublicKey)</_Parameter1>
      </AssemblyAttribute>
    </ItemGroup>
  </Target>

    <Target Name="PrepareDeployDirectory" AfterTargets="Build">

        <PropertyGroup>
          <TopLevelDeployDirectoryBase Condition="'$(DeployToMonitoringHome)' == 'True'">$(EnlistmentRoot)\shared\bin\monitoring-home</TopLevelDeployDirectoryBase>
          <TopLevelDeployDirectoryBase Condition="'$(DeployToMonitoringHome)' != 'True'">$(BuildOutputRoot)\DDProf-Deploy</TopLevelDeployDirectoryBase>

          <!-- In Linux case, we test against $(Platform), while on Windows case, we test against $(PlatformShortName). The reason is that for Windows, for   -->
          <!-- 64bit, $(PlatformShortName) == to x64. But on Linux, $(PlatformShortName) == x86_64.                        -->
          <DDPlatform Condition=" '$(PlatformShortName)' != '' AND $([MSBuild]::IsOSPlatform('Windows'))">win-$(PlatformShortName)</DDPlatform>
          <DDPlatform Condition=" '$(PlatformShortName)' == '' AND $([MSBuild]::IsOSPlatform('Windows'))">win-unknown</DDPlatform>
          <DDPlatform Condition=" '$(Platform)' != '' AND $([MSBuild]::IsOSPlatform('Linux')) ">linux-$(Platform)</DDPlatform>
          <DDPlatform Condition=" '$(Platform)' == '' AND $([MSBuild]::IsOSPlatform('Linux')) ">linux-unknown</DDPlatform>
          
          <DeployDirectoryBase >$(TopLevelDeployDirectoryBase)\$(DDPlatform)</DeployDirectoryBase>
        </PropertyGroup>

        <PropertyGroup>
            <NativeWindowsDeployFilesSrcDir>$(BaseOutputPath)\$(ConfigBasedRelativeOutputPath)\profiler\src\ProfilerEngine\Datadog.Profiler.Native.Windows</NativeWindowsDeployFilesSrcDir>
            <NativeLinuxDeployFilesSrcDir>$(BaseOutputPath)\$(ConfigBasedRelativeOutputPath)\profiler\src\ProfilerEngine\Datadog.Profiler.Native.Linux</NativeLinuxDeployFilesSrcDir>

        </PropertyGroup>

        <ItemGroup>
            <NativeDeployFiles Include="$(NativeWindowsDeployFilesSrcDir)\*.dll" />
            <NativeDeployFiles Include="$(NativeWindowsDeployFilesSrcDir)\*.pdb" />
            <NativeDeployFiles Include="$(NativeLinuxDeployFilesSrcDir)\*.so" />

            <AdditionalDeployFiles Include="$(MSBuildThisFileDirectory)\DeployResources\DDProf-SetEnv.bat"/>
            <AdditionalDeployFiles Include="$(MSBuildThisFileDirectory)\DeployResources\DDProf-SetEnv.sh"/>

            <AllDeployFiles Include="@(NativeDeployFiles)" />
            <AllDeployFiles Include="@(AdditionalDeployFiles)" />

        </ItemGroup>

        <!-- Debug messages. Uncomment as needed. -->
        <!--
        <Message Text="[PrepareDeployDirectory] NativeWindowsDeployFilesSrcDir: '$(NativeWindowsDeployFilesSrcDir)'" Importance="high" />
        <Message Text="[PrepareDeployDirectory] NativeLinuxDeployFilesSrcDir: '$(NativeLinuxDeployFilesSrcDir)'" Importance="high" />

        <Message Text="[PrepareDeployDirectory] NativeDeployFiles:       '%(NativeDeployFiles.Identity)'" Importance="high" />

        <Message Text="[PrepareDeployDirectory] AllDeployFiles:             '%(AllDeployFiles.Identity)'" Importance="high" />
        -->

        <Copy SourceFiles="@(AllDeployFiles)"
              DestinationFiles="@(AllDeployFiles->'$(DeployDirectoryBase)\%(RecursiveDir)%(Filename)%(Extension)')"
              Retries="5"
              RetryDelayMilliseconds="500"
              OverwriteReadOnlyFiles="true"
              SkipUnchangedFiles="true"
              UseHardlinksIfPossible="false"
              CopiedFiles="@(CopiedDeployFiles)">
                <Output TaskParameter="CopiedFiles" ItemName="FilesInDeployDirectory" />
        </Copy>

        <Message Text="[PrepareDeployDirectory] Project: '$(MSBuildProjectFile)' (Configuration='$(Configuration)', TargetFramework='$(TargetFramework)', Platform='$(Platform)'). FilesInDeployDirectory: @(FilesInDeployDirectory->Count())." Importance="high" />

    </Target>
</Project>
