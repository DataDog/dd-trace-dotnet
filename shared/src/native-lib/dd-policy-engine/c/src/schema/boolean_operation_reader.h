#ifndef BOOLEAN_OPERATION_READER_H
#define BOOLEAN_OPERATION_READER_H

/* Generated by flatcc 0.6.1 FlatBuffers schema compiler for C by dvide.com */

#ifndef FLATBUFFERS_COMMON_READER_H
#include "flatbuffers_common_reader.h"
#endif
#include "flatcc/flatcc_flatbuffers.h"
#ifndef __alignas_is_defined
#include <stdalign.h>
#endif
#include "flatcc/flatcc_prologue.h"
#ifndef flatbuffers_identifier
#define flatbuffers_identifier 0
#endif
#ifndef flatbuffers_extension
#define flatbuffers_extension "bin"
#endif



/**  These are the supported boolean operators when evaluating multiple conditions */
typedef int8_t dd_wls_BoolOperation_enum_t;
__flatbuffers_define_integer_type(dd_wls_BoolOperation, dd_wls_BoolOperation_enum_t, 8)
#define dd_wls_BoolOperation_BOOL_AND ((dd_wls_BoolOperation_enum_t)INT8_C(0))
#define dd_wls_BoolOperation_BOOL_NOT ((dd_wls_BoolOperation_enum_t)INT8_C(1))
#define dd_wls_BoolOperation_BOOL_OR ((dd_wls_BoolOperation_enum_t)INT8_C(2))
#define dd_wls_BoolOperation_BOOL_COUNT ((dd_wls_BoolOperation_enum_t)INT8_C(3))

static inline const char *dd_wls_BoolOperation_name(dd_wls_BoolOperation_enum_t value)
{
    switch (value) {
    case dd_wls_BoolOperation_BOOL_AND: return "BOOL_AND";
    case dd_wls_BoolOperation_BOOL_NOT: return "BOOL_NOT";
    case dd_wls_BoolOperation_BOOL_OR: return "BOOL_OR";
    case dd_wls_BoolOperation_BOOL_COUNT: return "BOOL_COUNT";
    default: return "";
    }
}

static inline int dd_wls_BoolOperation_is_known_value(dd_wls_BoolOperation_enum_t value)
{
    switch (value) {
    case dd_wls_BoolOperation_BOOL_AND: return 1;
    case dd_wls_BoolOperation_BOOL_NOT: return 1;
    case dd_wls_BoolOperation_BOOL_OR: return 1;
    case dd_wls_BoolOperation_BOOL_COUNT: return 1;
    default: return 0;
    }
}




#include "flatcc/flatcc_epilogue.h"
#endif /* BOOLEAN_OPERATION_READER_H */
