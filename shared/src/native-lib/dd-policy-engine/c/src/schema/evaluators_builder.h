#ifndef EVALUATORS_BUILDER_H
#define EVALUATORS_BUILDER_H

/* Generated by flatcc 0.6.1 FlatBuffers schema compiler for C by dvide.com */

#ifndef EVALUATORS_READER_H
#include "evaluators_reader.h"
#endif
#ifndef FLATBUFFERS_COMMON_BUILDER_H
#include "flatbuffers_common_builder.h"
#endif
#ifndef EVALUATOR_IDS_BUILDER_H
#include "evaluator_ids_builder.h"
#endif
#include "flatcc/flatcc_prologue.h"
#ifndef flatbuffers_identifier
#define flatbuffers_identifier 0
#endif
#ifndef flatbuffers_extension
#define flatbuffers_extension "bin"
#endif

#define __dd_wls_CmpTypeNUM_formal_args , dd_wls_CmpTypeNUM_enum_t v0
#define __dd_wls_CmpTypeNUM_call_args , v0
__flatbuffers_build_scalar(flatbuffers_, dd_wls_CmpTypeNUM, dd_wls_CmpTypeNUM_enum_t)
#define __dd_wls_CmpTypeSTR_formal_args , dd_wls_CmpTypeSTR_enum_t v0
#define __dd_wls_CmpTypeSTR_call_args , v0
__flatbuffers_build_scalar(flatbuffers_, dd_wls_CmpTypeSTR, dd_wls_CmpTypeSTR_enum_t)

typedef flatbuffers_union_ref_t dd_wls_EvaluatorType_union_ref_t;
typedef flatbuffers_union_vec_ref_t dd_wls_EvaluatorType_union_vec_ref_t;
static dd_wls_EvaluatorType_union_ref_t dd_wls_EvaluatorType_clone(flatbuffers_builder_t *B, dd_wls_EvaluatorType_union_t t);

static const flatbuffers_voffset_t __dd_wls_StrEvaluator_required[] = { 0 };
typedef flatbuffers_ref_t dd_wls_StrEvaluator_ref_t;
static dd_wls_StrEvaluator_ref_t dd_wls_StrEvaluator_clone(flatbuffers_builder_t *B, dd_wls_StrEvaluator_table_t t);
__flatbuffers_build_table(flatbuffers_, dd_wls_StrEvaluator, 3)

static const flatbuffers_voffset_t __dd_wls_UNumEvaluator_required[] = { 0 };
typedef flatbuffers_ref_t dd_wls_UNumEvaluator_ref_t;
static dd_wls_UNumEvaluator_ref_t dd_wls_UNumEvaluator_clone(flatbuffers_builder_t *B, dd_wls_UNumEvaluator_table_t t);
__flatbuffers_build_table(flatbuffers_, dd_wls_UNumEvaluator, 3)

static const flatbuffers_voffset_t __dd_wls_NumEvaluator_required[] = { 0 };
typedef flatbuffers_ref_t dd_wls_NumEvaluator_ref_t;
static dd_wls_NumEvaluator_ref_t dd_wls_NumEvaluator_clone(flatbuffers_builder_t *B, dd_wls_NumEvaluator_table_t t);
__flatbuffers_build_table(flatbuffers_, dd_wls_NumEvaluator, 3)

#define __dd_wls_StrEvaluator_formal_args , dd_wls_StringEvaluators_enum_t v0, dd_wls_CmpTypeSTR_enum_t v1, flatbuffers_string_ref_t v2
#define __dd_wls_StrEvaluator_call_args , v0, v1, v2
static inline dd_wls_StrEvaluator_ref_t dd_wls_StrEvaluator_create(flatbuffers_builder_t *B __dd_wls_StrEvaluator_formal_args);
__flatbuffers_build_table_prolog(flatbuffers_, dd_wls_StrEvaluator, dd_wls_StrEvaluator_file_identifier, dd_wls_StrEvaluator_type_identifier)

#define __dd_wls_UNumEvaluator_formal_args , dd_wls_NumericEvaluators_enum_t v0, dd_wls_CmpTypeNUM_enum_t v1, uint64_t v2
#define __dd_wls_UNumEvaluator_call_args , v0, v1, v2
static inline dd_wls_UNumEvaluator_ref_t dd_wls_UNumEvaluator_create(flatbuffers_builder_t *B __dd_wls_UNumEvaluator_formal_args);
__flatbuffers_build_table_prolog(flatbuffers_, dd_wls_UNumEvaluator, dd_wls_UNumEvaluator_file_identifier, dd_wls_UNumEvaluator_type_identifier)

#define __dd_wls_NumEvaluator_formal_args , dd_wls_NumericEvaluators_enum_t v0, dd_wls_CmpTypeNUM_enum_t v1, int64_t v2
#define __dd_wls_NumEvaluator_call_args , v0, v1, v2
static inline dd_wls_NumEvaluator_ref_t dd_wls_NumEvaluator_create(flatbuffers_builder_t *B __dd_wls_NumEvaluator_formal_args);
__flatbuffers_build_table_prolog(flatbuffers_, dd_wls_NumEvaluator, dd_wls_NumEvaluator_file_identifier, dd_wls_NumEvaluator_type_identifier)

static inline dd_wls_EvaluatorType_union_ref_t dd_wls_EvaluatorType_as_NONE(void)
{ dd_wls_EvaluatorType_union_ref_t uref; uref.type = dd_wls_EvaluatorType_NONE; uref.value = 0; return uref; }
static inline dd_wls_EvaluatorType_union_ref_t dd_wls_EvaluatorType_as_StrEvaluator(dd_wls_StrEvaluator_ref_t ref)
{ dd_wls_EvaluatorType_union_ref_t uref; uref.type = dd_wls_EvaluatorType_StrEvaluator; uref.value = ref; return uref; }
static inline dd_wls_EvaluatorType_union_ref_t dd_wls_EvaluatorType_as_NumEvaluator(dd_wls_NumEvaluator_ref_t ref)
{ dd_wls_EvaluatorType_union_ref_t uref; uref.type = dd_wls_EvaluatorType_NumEvaluator; uref.value = ref; return uref; }
static inline dd_wls_EvaluatorType_union_ref_t dd_wls_EvaluatorType_as_UNumEvaluator(dd_wls_UNumEvaluator_ref_t ref)
{ dd_wls_EvaluatorType_union_ref_t uref; uref.type = dd_wls_EvaluatorType_UNumEvaluator; uref.value = ref; return uref; }
__flatbuffers_build_union_vector(flatbuffers_, dd_wls_EvaluatorType)

static dd_wls_EvaluatorType_union_ref_t dd_wls_EvaluatorType_clone(flatbuffers_builder_t *B, dd_wls_EvaluatorType_union_t u)
{
    switch (u.type) {
    case 1: return dd_wls_EvaluatorType_as_StrEvaluator(dd_wls_StrEvaluator_clone(B, (dd_wls_StrEvaluator_table_t)u.value));
    case 2: return dd_wls_EvaluatorType_as_NumEvaluator(dd_wls_NumEvaluator_clone(B, (dd_wls_NumEvaluator_table_t)u.value));
    case 3: return dd_wls_EvaluatorType_as_UNumEvaluator(dd_wls_UNumEvaluator_clone(B, (dd_wls_UNumEvaluator_table_t)u.value));
    default: return dd_wls_EvaluatorType_as_NONE();
    }
}

__flatbuffers_build_scalar_field(0, flatbuffers_, dd_wls_StrEvaluator_id, dd_wls_StringEvaluators, dd_wls_StringEvaluators_enum_t, 1, 1, INT8_C(0), dd_wls_StrEvaluator)
__flatbuffers_build_scalar_field(1, flatbuffers_, dd_wls_StrEvaluator_cmp, dd_wls_CmpTypeSTR, dd_wls_CmpTypeSTR_enum_t, 1, 1, INT8_C(0), dd_wls_StrEvaluator)
__flatbuffers_build_string_field(2, flatbuffers_, dd_wls_StrEvaluator_value, dd_wls_StrEvaluator)

static inline dd_wls_StrEvaluator_ref_t dd_wls_StrEvaluator_create(flatbuffers_builder_t *B __dd_wls_StrEvaluator_formal_args)
{
    if (dd_wls_StrEvaluator_start(B)
        || dd_wls_StrEvaluator_value_add(B, v2)
        || dd_wls_StrEvaluator_id_add(B, v0)
        || dd_wls_StrEvaluator_cmp_add(B, v1)) {
        return 0;
    }
    return dd_wls_StrEvaluator_end(B);
}

static dd_wls_StrEvaluator_ref_t dd_wls_StrEvaluator_clone(flatbuffers_builder_t *B, dd_wls_StrEvaluator_table_t t)
{
    __flatbuffers_memoize_begin(B, t);
    if (dd_wls_StrEvaluator_start(B)
        || dd_wls_StrEvaluator_value_pick(B, t)
        || dd_wls_StrEvaluator_id_pick(B, t)
        || dd_wls_StrEvaluator_cmp_pick(B, t)) {
        return 0;
    }
    __flatbuffers_memoize_end(B, t, dd_wls_StrEvaluator_end(B));
}

__flatbuffers_build_scalar_field(0, flatbuffers_, dd_wls_UNumEvaluator_id, dd_wls_NumericEvaluators, dd_wls_NumericEvaluators_enum_t, 1, 1, INT8_C(0), dd_wls_UNumEvaluator)
__flatbuffers_build_scalar_field(1, flatbuffers_, dd_wls_UNumEvaluator_cmp, dd_wls_CmpTypeNUM, dd_wls_CmpTypeNUM_enum_t, 1, 1, INT8_C(0), dd_wls_UNumEvaluator)
__flatbuffers_build_scalar_field(2, flatbuffers_, dd_wls_UNumEvaluator_value, flatbuffers_uint64, uint64_t, 8, 8, UINT64_C(0), dd_wls_UNumEvaluator)

static inline dd_wls_UNumEvaluator_ref_t dd_wls_UNumEvaluator_create(flatbuffers_builder_t *B __dd_wls_UNumEvaluator_formal_args)
{
    if (dd_wls_UNumEvaluator_start(B)
        || dd_wls_UNumEvaluator_value_add(B, v2)
        || dd_wls_UNumEvaluator_id_add(B, v0)
        || dd_wls_UNumEvaluator_cmp_add(B, v1)) {
        return 0;
    }
    return dd_wls_UNumEvaluator_end(B);
}

static dd_wls_UNumEvaluator_ref_t dd_wls_UNumEvaluator_clone(flatbuffers_builder_t *B, dd_wls_UNumEvaluator_table_t t)
{
    __flatbuffers_memoize_begin(B, t);
    if (dd_wls_UNumEvaluator_start(B)
        || dd_wls_UNumEvaluator_value_pick(B, t)
        || dd_wls_UNumEvaluator_id_pick(B, t)
        || dd_wls_UNumEvaluator_cmp_pick(B, t)) {
        return 0;
    }
    __flatbuffers_memoize_end(B, t, dd_wls_UNumEvaluator_end(B));
}

__flatbuffers_build_scalar_field(0, flatbuffers_, dd_wls_NumEvaluator_id, dd_wls_NumericEvaluators, dd_wls_NumericEvaluators_enum_t, 1, 1, INT8_C(0), dd_wls_NumEvaluator)
__flatbuffers_build_scalar_field(1, flatbuffers_, dd_wls_NumEvaluator_cmp, dd_wls_CmpTypeNUM, dd_wls_CmpTypeNUM_enum_t, 1, 1, INT8_C(0), dd_wls_NumEvaluator)
__flatbuffers_build_scalar_field(2, flatbuffers_, dd_wls_NumEvaluator_value, flatbuffers_int64, int64_t, 8, 8, INT64_C(0), dd_wls_NumEvaluator)

static inline dd_wls_NumEvaluator_ref_t dd_wls_NumEvaluator_create(flatbuffers_builder_t *B __dd_wls_NumEvaluator_formal_args)
{
    if (dd_wls_NumEvaluator_start(B)
        || dd_wls_NumEvaluator_value_add(B, v2)
        || dd_wls_NumEvaluator_id_add(B, v0)
        || dd_wls_NumEvaluator_cmp_add(B, v1)) {
        return 0;
    }
    return dd_wls_NumEvaluator_end(B);
}

static dd_wls_NumEvaluator_ref_t dd_wls_NumEvaluator_clone(flatbuffers_builder_t *B, dd_wls_NumEvaluator_table_t t)
{
    __flatbuffers_memoize_begin(B, t);
    if (dd_wls_NumEvaluator_start(B)
        || dd_wls_NumEvaluator_value_pick(B, t)
        || dd_wls_NumEvaluator_id_pick(B, t)
        || dd_wls_NumEvaluator_cmp_pick(B, t)) {
        return 0;
    }
    __flatbuffers_memoize_end(B, t, dd_wls_NumEvaluator_end(B));
}

#include "flatcc/flatcc_epilogue.h"
#endif /* EVALUATORS_BUILDER_H */
