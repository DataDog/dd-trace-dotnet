#ifndef POLICY_BUILDER_H
#define POLICY_BUILDER_H

/* Generated by flatcc 0.6.1 FlatBuffers schema compiler for C by dvide.com */

#ifndef POLICY_READER_H
#include "policy_reader.h"
#endif
#ifndef FLATBUFFERS_COMMON_BUILDER_H
#include "flatbuffers_common_builder.h"
#endif
#ifndef NODES_BUILDER_H
#include "nodes_builder.h"
#endif
#ifndef ACTIONS_BUILDER_H
#include "actions_builder.h"
#endif
#include "flatcc/flatcc_prologue.h"
#ifndef flatbuffers_identifier
#define flatbuffers_identifier 0
#endif
#ifndef flatbuffers_extension
#define flatbuffers_extension "bin"
#endif

static const flatbuffers_voffset_t __dd_wls_Policy_required[] = { 0 };
typedef flatbuffers_ref_t dd_wls_Policy_ref_t;
static dd_wls_Policy_ref_t dd_wls_Policy_clone(flatbuffers_builder_t *B, dd_wls_Policy_table_t t);
__flatbuffers_build_table(flatbuffers_, dd_wls_Policy, 3)

static const flatbuffers_voffset_t __dd_wls_Policies_required[] = { 0 };
typedef flatbuffers_ref_t dd_wls_Policies_ref_t;
static dd_wls_Policies_ref_t dd_wls_Policies_clone(flatbuffers_builder_t *B, dd_wls_Policies_table_t t);
__flatbuffers_build_table(flatbuffers_, dd_wls_Policies, 1)

#define __dd_wls_Policy_formal_args , flatbuffers_string_ref_t v0, dd_wls_NodeTypeWrapper_ref_t v1, dd_wls_Action_vec_ref_t v2
#define __dd_wls_Policy_call_args , v0, v1, v2
static inline dd_wls_Policy_ref_t dd_wls_Policy_create(flatbuffers_builder_t *B __dd_wls_Policy_formal_args);
__flatbuffers_build_table_prolog(flatbuffers_, dd_wls_Policy, dd_wls_Policy_file_identifier, dd_wls_Policy_type_identifier)

#define __dd_wls_Policies_formal_args , dd_wls_Policy_vec_ref_t v0
#define __dd_wls_Policies_call_args , v0
static inline dd_wls_Policies_ref_t dd_wls_Policies_create(flatbuffers_builder_t *B __dd_wls_Policies_formal_args);
__flatbuffers_build_table_prolog(flatbuffers_, dd_wls_Policies, dd_wls_Policies_file_identifier, dd_wls_Policies_type_identifier)

__flatbuffers_build_string_field(0, flatbuffers_, dd_wls_Policy_description, dd_wls_Policy)
__flatbuffers_build_table_field(1, flatbuffers_, dd_wls_Policy_rules, dd_wls_NodeTypeWrapper, dd_wls_Policy)
__flatbuffers_build_table_vector_field(2, flatbuffers_, dd_wls_Policy_actions, dd_wls_Action, dd_wls_Policy)

static inline dd_wls_Policy_ref_t dd_wls_Policy_create(flatbuffers_builder_t *B __dd_wls_Policy_formal_args)
{
    if (dd_wls_Policy_start(B)
        || dd_wls_Policy_description_add(B, v0)
        || dd_wls_Policy_rules_add(B, v1)
        || dd_wls_Policy_actions_add(B, v2)) {
        return 0;
    }
    return dd_wls_Policy_end(B);
}

static dd_wls_Policy_ref_t dd_wls_Policy_clone(flatbuffers_builder_t *B, dd_wls_Policy_table_t t)
{
    __flatbuffers_memoize_begin(B, t);
    if (dd_wls_Policy_start(B)
        || dd_wls_Policy_description_pick(B, t)
        || dd_wls_Policy_rules_pick(B, t)
        || dd_wls_Policy_actions_pick(B, t)) {
        return 0;
    }
    __flatbuffers_memoize_end(B, t, dd_wls_Policy_end(B));
}

__flatbuffers_build_table_vector_field(0, flatbuffers_, dd_wls_Policies_policies, dd_wls_Policy, dd_wls_Policies)

static inline dd_wls_Policies_ref_t dd_wls_Policies_create(flatbuffers_builder_t *B __dd_wls_Policies_formal_args)
{
    if (dd_wls_Policies_start(B)
        || dd_wls_Policies_policies_add(B, v0)) {
        return 0;
    }
    return dd_wls_Policies_end(B);
}

static dd_wls_Policies_ref_t dd_wls_Policies_clone(flatbuffers_builder_t *B, dd_wls_Policies_table_t t)
{
    __flatbuffers_memoize_begin(B, t);
    if (dd_wls_Policies_start(B)
        || dd_wls_Policies_policies_pick(B, t)) {
        return 0;
    }
    __flatbuffers_memoize_end(B, t, dd_wls_Policies_end(B));
}

#include "flatcc/flatcc_epilogue.h"
#endif /* POLICY_BUILDER_H */
