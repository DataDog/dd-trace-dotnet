#ifndef POLICY_READER_H
#define POLICY_READER_H

/* Generated by flatcc 0.6.1 FlatBuffers schema compiler for C by dvide.com */

#ifndef FLATBUFFERS_COMMON_READER_H
#include "flatbuffers_common_reader.h"
#endif
#ifndef NODES_READER_H
#include "nodes_reader.h"
#endif
#ifndef ACTIONS_READER_H
#include "actions_reader.h"
#endif
#include "flatcc/flatcc_flatbuffers.h"
#ifndef __alignas_is_defined
#include <stdalign.h>
#endif
#include "flatcc/flatcc_prologue.h"
#ifndef flatbuffers_identifier
#define flatbuffers_identifier 0
#endif
#ifndef flatbuffers_extension
#define flatbuffers_extension "bin"
#endif


typedef const struct dd_wls_Policy_table *dd_wls_Policy_table_t;
typedef struct dd_wls_Policy_table *dd_wls_Policy_mutable_table_t;
typedef const flatbuffers_uoffset_t *dd_wls_Policy_vec_t;
typedef flatbuffers_uoffset_t *dd_wls_Policy_mutable_vec_t;
typedef const struct dd_wls_Policies_table *dd_wls_Policies_table_t;
typedef struct dd_wls_Policies_table *dd_wls_Policies_mutable_table_t;
typedef const flatbuffers_uoffset_t *dd_wls_Policies_vec_t;
typedef flatbuffers_uoffset_t *dd_wls_Policies_mutable_vec_t;
#ifndef dd_wls_Policy_file_identifier
#define dd_wls_Policy_file_identifier 0
#endif
/* deprecated, use dd_wls_Policy_file_identifier */
#ifndef dd_wls_Policy_identifier
#define dd_wls_Policy_identifier 0
#endif
#define dd_wls_Policy_type_hash ((flatbuffers_thash_t)0x319a5901)
#define dd_wls_Policy_type_identifier "\x01\x59\x9a\x31"
#ifndef dd_wls_Policy_file_extension
#define dd_wls_Policy_file_extension "bin"
#endif
#ifndef dd_wls_Policies_file_identifier
#define dd_wls_Policies_file_identifier 0
#endif
/* deprecated, use dd_wls_Policies_file_identifier */
#ifndef dd_wls_Policies_identifier
#define dd_wls_Policies_identifier 0
#endif
#define dd_wls_Policies_type_hash ((flatbuffers_thash_t)0x5507a1fd)
#define dd_wls_Policies_type_identifier "\xfd\xa1\x07\x55"
#ifndef dd_wls_Policies_file_extension
#define dd_wls_Policies_file_extension "bin"
#endif



/**  Represents a policy that contains rules and actions.
 *  The rules are represented as a tree structure where each node can be a leaf (with an evaluator) or a root (with child nodes). */
struct dd_wls_Policy_table { uint8_t unused__; };

static inline size_t dd_wls_Policy_vec_len(dd_wls_Policy_vec_t vec)
__flatbuffers_vec_len(vec)
static inline dd_wls_Policy_table_t dd_wls_Policy_vec_at(dd_wls_Policy_vec_t vec, size_t i)
__flatbuffers_offset_vec_at(dd_wls_Policy_table_t, vec, i, 0)
__flatbuffers_table_as_root(dd_wls_Policy)

/**  The policy can have a description for debugging purposes. */
__flatbuffers_define_string_field(0, dd_wls_Policy, description, 0)
/**  The rules are represented as a NodeTypeWrapper to allow for union vectors in FlatBuffers.  */
__flatbuffers_define_table_field(1, dd_wls_Policy, rules, dd_wls_NodeTypeWrapper_table_t, 0)
/**  The actions are taken post evaluation of the policy. */
__flatbuffers_define_vector_field(2, dd_wls_Policy, actions, dd_wls_Action_vec_t, 0)

/**  Represents a collection of policies.
 *  This allows for concatenation of policies from different sources.
 *  The policies are stored in a vector of Policy.
 *  This is also the root type of the FlatBuffer schema!!! */
struct dd_wls_Policies_table { uint8_t unused__; };

static inline size_t dd_wls_Policies_vec_len(dd_wls_Policies_vec_t vec)
__flatbuffers_vec_len(vec)
static inline dd_wls_Policies_table_t dd_wls_Policies_vec_at(dd_wls_Policies_vec_t vec, size_t i)
__flatbuffers_offset_vec_at(dd_wls_Policies_table_t, vec, i, 0)
__flatbuffers_table_as_root(dd_wls_Policies)

__flatbuffers_define_vector_field(0, dd_wls_Policies, policies, dd_wls_Policy_vec_t, 0)


#include "flatcc/flatcc_epilogue.h"
#endif /* POLICY_READER_H */
