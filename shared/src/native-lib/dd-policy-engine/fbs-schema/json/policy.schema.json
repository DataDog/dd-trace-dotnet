{
  "$schema": "https://json-schema.org/draft/2019-09/schema",
  "definitions": {
    "dd_wls_ActionId" : {
      "type" : "string",
      "enum": ["INJECT_DENY", "INJECT_ALLOW", "ENABLE_SDK", "ENABLE_PROFILER", "SET_ENVAR", "REEXEC", "ACTIONS_COUNT"]
    },
    "dd_wls_ActionMax" : {
      "type" : "string",
      "enum": ["ACTION_VALUES_MAX"]
    },
    "dd_wls_BoolOperation" : {
      "type" : "string",
      "enum": ["BOOL_AND", "BOOL_NOT", "BOOL_OR", "BOOL_COUNT"]
    },
    "dd_wls_StringEvaluators" : {
      "type" : "string",
      "enum": ["COMPONENT", "PROCESS_EXE", "PROCESS_EXE_FULL_PATH", "PROCESS_BASEDIR_PATH", "PROCESS_ARGV", "PROCESS_CWD", "RUNTIME_LANGUAGE", "RUNTIME_ENTRY_POINT_FILE", "RUNTIME_ENTRY_POINT_JAR", "RUNTIME_ENTRY_POINT_CLASS", "RUNTIME_ENTRY_POINT_PACKAGE", "RUNTIME_ENTRY_POINT_MODULE", "RUNTIME_ENTRY_POINT_SOURCE", "RUNTIME_DOPTION", "RUNTIME_VERSION", "LIBC_FLAVOR", "LIBC_VERSION", "MACHINE_ARCHITECTURE", "HOST_NAME", "HOST_IP", "OS", "OS_DISTRO", "OS_DISTRO_VERSION", "OS_DISTRO_CODENAME", "OS_KERNEL_VERSION", "OS_KERNEL_NAME", "OS_USER", "OS_USER_GROUP", "CONTAINER_IMAGE", "CONTAINER_ID", "ALWAYS_TRUE", "ALWAYS_FALSE", "ALWAYS_ABSTAIN", "STR_EVAL_COUNT"]
    },
    "dd_wls_NumericEvaluators" : {
      "type" : "string",
      "enum": ["JAVA_HEAP", "RUNTIME_VERSION_MAJOR", "RUNTIME_VERSION_MINOR", "RUNTIME_VERSION_PATCH", "OS_DISTRO_VERSION_MAJOR", "OS_DISTRO_VERSION_MINOR", "OS_DISTRO_VERSION_PATCH", "OS_KERNEL_VERSION_MAJOR", "OS_KERNEL_VERSION_MINOR", "OS_KERNEL_VERSION_PATCH", "LIBC_VERSION_MAJOR", "LIBC_VERSION_MINOR", "LIBC_VERSION_PATCH", "NUM_EVAL_COUNT"]
    },
    "dd_wls_CmpTypeNUM" : {
      "type" : "string",
      "enum": ["CMP_EQ", "CMP_GT", "CMP_GTE", "CMP_LT", "CMP_LTE", "CMP_COUNT"]
    },
    "dd_wls_CmpTypeSTR" : {
      "type" : "string",
      "enum": ["CMP_PREFIX", "CMP_SUFFIX", "CMP_CONTAINS", "CMP_EXACT", "CMP_COUNT"]
    },
    "dd_wls_EvaluatorType" : {
      "type" : "string",
      "enum": ["NONE", "StrEvaluator", "NumEvaluator", "UNumEvaluator"]
    },
    "dd_wls_NodeType" : {
      "type" : "string",
      "enum": ["NONE", "EvaluatorNode", "CompositeNode"]
    },
    "dd_wls_Action" : {
      "type" : "object",
      "description" : "Represents an action taken post evaluation",
      "properties" : {
        "action" : {
                "$ref" : "#/definitions/dd_wls_ActionId",
                "description" : "An enum representing the type of action to take."
              },
        "description" : {
                "type" : "string",
                "description" : "For debugging purposes a description string can be passed"
              },
        "values" : {
                "type" : "array", "items" : {"type" : "string"},
                "description" : "Each action defines the values it accepts\\supports."
              }
      },
      "additionalProperties" : false
    },
    "dd_wls_StrEvaluator" : {
      "type" : "object",
      "description" : "Represents a String evaluator\nEach evaluator has an ID, a comparison type and a value to compare against.",
      "properties" : {
        "id" : {
                "$ref" : "#/definitions/dd_wls_StringEvaluators",
                "description" : "The ID is a unique identifier for the evaluator."
              },
        "cmp" : {
                "$ref" : "#/definitions/dd_wls_CmpTypeSTR",
                "description" : "The comparison type is used to determine how to compare the value against the evaluator's value."
              },
        "value" : {
                "type" : "string",
                "description" : "The value is the value to compare against."
              }
      },
      "additionalProperties" : false
    },
    "dd_wls_UNumEvaluator" : {
      "type" : "object",
      "description" : "Represents a String evaluator that can accept multiple values.\nRepresents an unsigned Numeric evaluator\nThis evaluator is used for unsigned numeric comparisons.",
      "properties" : {
        "id" : {
                "$ref" : "#/definitions/dd_wls_NumericEvaluators",
                "description" : "Each evaluator has an ID, a comparison type and a value to compare against."
              },
        "cmp" : {
                "$ref" : "#/definitions/dd_wls_CmpTypeNUM",
                "description" : "The comparison type is used to determine how to compare the value against the evaluator's value."
              },
        "value" : {
                "type" : "integer", "minimum" : 0, "maximum" : 18446744073709551615,
                "description" : "The value is an unsigned long."
              }
      },
      "additionalProperties" : false
    },
    "dd_wls_NumEvaluator" : {
      "type" : "object",
      "description" : "Represents a signed Numeric evaluator\nThis evaluator is used for signed numeric comparisons.",
      "properties" : {
        "id" : {
                "$ref" : "#/definitions/dd_wls_NumericEvaluators",
                "description" : "Each evaluator has an ID, a comparison type and a value to compare against."
              },
        "cmp" : {
                "$ref" : "#/definitions/dd_wls_CmpTypeNUM",
                "description" : "The comparison type is used to determine how to compare the value against the evaluator's value."
              },
        "value" : {
                "type" : "integer", "minimum" : -9223372036854775808, "maximum" : 9223372036854775807,
                "description" : "The value is a signed long."
              }
      },
      "additionalProperties" : false
    },
    "dd_wls_NodeTypeWrapper" : {
      "type" : "object",
      "description" : "Represents a wrapper for NodeType to allow for union vectors in FlatBuffers.\nThis is necessary because union vectors are not supported directly in all FlatBuffers implementations :(",
      "properties" : {
        "node_type" : {
                "$ref" : "#/definitions/dd_wls_NodeType"
              },
        "node" : {
                "anyOf": [{ "$ref" : "#/definitions/dd_wls_EvaluatorNode" },{ "$ref" : "#/definitions/dd_wls_CompositeNode" }]
              }
      },
      "additionalProperties" : false
    },
    "dd_wls_CompositeNode" : {
      "type" : "object",
      "description" : "Represents a root node in the policy tree.\nIt contains a description, a boolean operation (AND, OR, NOT) and a list of child nodes.\nThe children are wrapped in NodeTypeWrapper to allow for union vectors.",
      "properties" : {
        "description" : {
                "type" : "string"
              },
        "op" : {
                "$ref" : "#/definitions/dd_wls_BoolOperation"
              },
        "children" : {
                "type" : "array", "items" : {"$ref" : "#/definitions/dd_wls_NodeTypeWrapper"},
                "description" : "At some point we will switch back to; children: [NodeType];\n(union vectors are not supported in GO so we are wrapping the table in a table)"
              }
      },
      "additionalProperties" : false
    },
    "dd_wls_EvaluatorNode" : {
      "type" : "object",
      "description" : "Represents a leaf node in the policy tree.\nIt contains a description and an evaluator.",
      "properties" : {
        "description" : {
                "type" : "string",
                "description" : "The description is used for debugging purposes."
              },
        "eval_type" : {
                "$ref" : "#/definitions/dd_wls_EvaluatorType"
              },
        "eval" : {
                "anyOf": [{ "$ref" : "#/definitions/dd_wls_StrEvaluator" },{ "$ref" : "#/definitions/dd_wls_NumEvaluator" },{ "$ref" : "#/definitions/dd_wls_UNumEvaluator" }],
                "description" : "The evaluator is a union of different evaluator types (String, Numeric, etc.)."
              }
      },
      "additionalProperties" : false
    },
    "dd_wls_Policy" : {
      "type" : "object",
      "description" : "Represents a policy that contains rules and actions.\nThe rules are represented as a tree structure where each node can be a leaf (with an evaluator) or a root (with child nodes).",
      "properties" : {
        "description" : {
                "type" : "string",
                "description" : "The policy can have a description for debugging purposes."
              },
        "rules" : {
                "$ref" : "#/definitions/dd_wls_NodeTypeWrapper",
                "description" : "The rules are represented as a NodeTypeWrapper to allow for union vectors in FlatBuffers."
              },
        "actions" : {
                "type" : "array", "items" : {"$ref" : "#/definitions/dd_wls_Action"},
                "description" : "The actions are taken post evaluation of the policy."
              }
      },
      "additionalProperties" : false
    },
    "dd_wls_Policies" : {
      "type" : "object",
      "description" : "Represents a collection of policies.\nThis allows for concatenation of policies from different sources.\nThe policies are stored in a vector of Policy.\nThis is also the root type of the FlatBuffer schema!!!",
      "properties" : {
        "policies" : {
                "type" : "array", "items" : {"$ref" : "#/definitions/dd_wls_Policy"}
              }
      },
      "additionalProperties" : false
    }
  },
  "$ref" : "#/definitions/dd_wls_Policies"
}
