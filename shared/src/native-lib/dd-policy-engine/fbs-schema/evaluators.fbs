include "evaluator_ids.fbs";

namespace dd.wls;

/// These are the supported comparison operators for Numeric evaluators:
/// CMP_EQ : Compare equal `==`
/// CMP_GT : Compare Greater Than `>`
/// CMP_GTE : Compare Greater Than Equal `>=`
/// CMP_LT : Compare Lower Than `<`
/// CMP_LTE : Compare Lower Than Equal `<=`
enum CmpTypeNUM : byte {
  CMP_EQ,
  CMP_GT,
  CMP_GTE,
  CMP_LT,
  CMP_LTE,
  CMP_COUNT
}

/// These are the supported comparison operators for String evaluators:
/// CMP_PREFIX : Compare if the string starts with the value
/// CMP_SUFFIX : Compare if the string ends with the value
/// CMP_CONTAINS : Compare if the string contains the value
/// CMP_EXACT : Compare if the string is exactly equal to the value
enum CmpTypeSTR : byte {
  CMP_PREFIX,
  CMP_SUFFIX,
  CMP_CONTAINS,
  CMP_EXACT,
  CMP_COUNT
}

/// EvaluatorType is a union of all the evaluators supported by the policy engine.
/// NOTE: StrArrEvaluator is not supported yet, but it is reserved for future use.
// union EvaluatorType { StrEvaluator, NumEvaluator, UNumEvaluator, StrArrEvaluator }
union EvaluatorType { StrEvaluator, NumEvaluator, UNumEvaluator}

/// Represents a String evaluator
/// Each evaluator has an ID, a comparison type and a value to compare against.
table StrEvaluator {
  /// The ID is a unique identifier for the evaluator.
  id: StringEvaluators;
  /// The comparison type is used to determine how to compare the value against the evaluator's value.
  cmp: CmpTypeSTR;
  /// The value is the value to compare against.
  value: string;
}

/// Represents a String evaluator that can accept multiple values.
// /// This evaluator is not yet supported, but it is reserved for future use.
// table StrArrEvaluator {
//   id: string;
//   cmp: string;
//   value: [string];
// }

/// Represents an unsigned Numeric evaluator
/// This evaluator is used for unsigned numeric comparisons.
table UNumEvaluator {
  /// Each evaluator has an ID, a comparison type and a value to compare against.
  id: NumericEvaluators;
  /// The comparison type is used to determine how to compare the value against the evaluator's value.
  cmp: CmpTypeNUM;
  /// The value is an unsigned long.
  value: ulong;
}


/// Represents a signed Numeric evaluator
/// This evaluator is used for signed numeric comparisons.
table NumEvaluator {
  /// Each evaluator has an ID, a comparison type and a value to compare against.
  id: NumericEvaluators;
  /// The comparison type is used to determine how to compare the value against the evaluator's value.
  cmp: CmpTypeNUM;
  /// The value is a signed long.
  value: long;
}
