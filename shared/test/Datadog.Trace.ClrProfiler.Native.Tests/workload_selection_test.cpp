// #ifdef BUILD_WITH_WORKLOAD_SELECTION
#include "gtest/gtest.h"

#include <vector>

#include "../../src/Datadog.Trace.ClrProfiler.Native/workload_selection.h"

using namespace datadog::shared::nativeloader;

const std::vector<::shared::WSTRING> noarg{};

/*
  [allow-only-java]
  instrument = true
  description = "Only instrument java runtime"
  expression = "runtime.language:java"
*/
const std::vector<uint8_t> only_instrument_java = {
    0x0C, 0x00, 0x00, 0x00, 0x00, 0x00, 0x06, 0x00, 0x08, 0x00, 0x04, 0x00, 0x06, 0x00, 0x00, 0x00, 0x04, 0x00,
    0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0A, 0x00, 0x10, 0x00, 0x0C, 0x00,
    0x08, 0x00, 0x04, 0x00, 0x0A, 0x00, 0x00, 0x00, 0x0C, 0x00, 0x00, 0x00, 0x64, 0x00, 0x00, 0x00, 0x0C, 0x00,
    0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x30, 0x00, 0x00, 0x00, 0x1C, 0x00, 0x00, 0x00, 0x4F, 0x6E, 0x6C, 0x79,
    0x20, 0x69, 0x6E, 0x73, 0x74, 0x72, 0x75, 0x6D, 0x65, 0x6E, 0x74, 0x20, 0x6A, 0x61, 0x76, 0x61, 0x20, 0x72,
    0x75, 0x6E, 0x74, 0x69, 0x6D, 0x65, 0x00, 0x00, 0x0A, 0x00, 0x10, 0x00, 0x0F, 0x00, 0x08, 0x00, 0x04, 0x00,
    0x0A, 0x00, 0x00, 0x00, 0x0C, 0x00, 0x00, 0x00, 0x0C, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00,
    0x00, 0x00, 0x0F, 0x00, 0x00, 0x00, 0x61, 0x6C, 0x6C, 0x6F, 0x77, 0x2D, 0x6F, 0x6E, 0x6C, 0x79, 0x2D, 0x6A,
    0x61, 0x76, 0x61, 0x00, 0xBC, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x02, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x0A, 0x00, 0x10, 0x00, 0x0C, 0x00, 0x0B, 0x00, 0x04, 0x00, 0x0A, 0x00, 0x00, 0x00, 0x0C, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x01, 0x0C, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x20, 0x00, 0x00, 0x00, 0x0F, 0x00,
    0x00, 0x00, 0x61, 0x6C, 0x6C, 0x6F, 0x77, 0x2D, 0x6F, 0x6E, 0x6C, 0x79, 0x2D, 0x6A, 0x61, 0x76, 0x61, 0x00,
    0x08, 0x00, 0x0E, 0x00, 0x07, 0x00, 0x08, 0x00, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x10, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x0A, 0x00, 0x10, 0x00, 0x08, 0x00, 0x0F, 0x00, 0x04, 0x00, 0x0A, 0x00, 0x00, 0x00,
    0x30, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x15, 0x00, 0x00, 0x00, 0x43, 0x68,
    0x65, 0x63, 0x6B, 0x20, 0x72, 0x75, 0x6E, 0x74, 0x69, 0x6D, 0x65, 0x20, 0x69, 0x73, 0x20, 0x6A, 0x61, 0x76,
    0x61, 0x00, 0x0A, 0x00, 0x0C, 0x00, 0x0A, 0x00, 0x0B, 0x00, 0x04, 0x00, 0x0A, 0x00, 0x00, 0x00, 0x08, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x07, 0x04, 0x04, 0x00, 0x00, 0x00, 0x6A, 0x61, 0x76, 0x61, 0x00, 0x00, 0x00, 0x00};

/*
  [allow-only-my-app-exe]
  instrument = true
  description = "Only instrument java runtime"
  expression = "process.executable:my-app.exe OR dotnet.dll:my-app.dll"
*/
const std::vector<uint8_t> instrument_my_app = {
    0x0C, 0x00, 0x00, 0x00, 0x00, 0x00, 0x06, 0x00, 0x08, 0x00, 0x04, 0x00, 0x06, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00,
    0x00, 0x01, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0A, 0x00, 0x10, 0x00, 0x0C, 0x00, 0x08, 0x00,
    0x04, 0x00, 0x0A, 0x00, 0x00, 0x00, 0x0C, 0x00, 0x00, 0x00, 0x6C, 0x00, 0x00, 0x00, 0x0C, 0x00, 0x00, 0x00, 0x01,
    0x00, 0x00, 0x00, 0x30, 0x00, 0x00, 0x00, 0x1C, 0x00, 0x00, 0x00, 0x4F, 0x6E, 0x6C, 0x79, 0x20, 0x69, 0x6E, 0x73,
    0x74, 0x72, 0x75, 0x6D, 0x65, 0x6E, 0x74, 0x20, 0x6A, 0x61, 0x76, 0x61, 0x20, 0x72, 0x75, 0x6E, 0x74, 0x69, 0x6D,
    0x65, 0x00, 0x00, 0x0A, 0x00, 0x10, 0x00, 0x0F, 0x00, 0x08, 0x00, 0x04, 0x00, 0x0A, 0x00, 0x00, 0x00, 0x0C, 0x00,
    0x00, 0x00, 0x0C, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x15, 0x00, 0x00, 0x00, 0x61,
    0x6C, 0x6C, 0x6F, 0x77, 0x2D, 0x6F, 0x6E, 0x6C, 0x79, 0x2D, 0x6D, 0x79, 0x2D, 0x61, 0x70, 0x70, 0x2D, 0x65, 0x78,
    0x65, 0x00, 0x00, 0x00, 0x28, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x02, 0x04, 0x00, 0x00, 0x00, 0xBE, 0xFF, 0xFF,
    0xFF, 0x0C, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x0C, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x20, 0x00,
    0x00, 0x00, 0x15, 0x00, 0x00, 0x00, 0x61, 0x6C, 0x6C, 0x6F, 0x77, 0x2D, 0x6F, 0x6E, 0x6C, 0x79, 0x2D, 0x6D, 0x79,
    0x2D, 0x61, 0x70, 0x70, 0x2D, 0x65, 0x78, 0x65, 0x00, 0x00, 0x00, 0x68, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x02,
    0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0A, 0x00, 0x10, 0x00, 0x0C, 0x00, 0x0B, 0x00, 0x04, 0x00, 0x0A, 0x00, 0x00,
    0x00, 0x0C, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x10, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x74, 0x00,
    0x00, 0x00, 0x0C, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xA4, 0xFF, 0xFF, 0xFF, 0x00,
    0x00, 0x00, 0x01, 0x04, 0x00, 0x00, 0x00, 0x9A, 0xFF, 0xFF, 0xFF, 0x30, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x01, 0x1F, 0x00, 0x00, 0x00, 0x43, 0x68, 0x65, 0x63, 0x6B, 0x20, 0x70, 0x72, 0x6F, 0x63, 0x65,
    0x73, 0x73, 0x20, 0x44, 0x4C, 0x4C, 0x20, 0x69, 0x73, 0x20, 0x6D, 0x79, 0x2D, 0x61, 0x70, 0x70, 0x2E, 0x64, 0x6C,
    0x6C, 0x00, 0x92, 0xFF, 0xFF, 0xFF, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x04, 0x0A, 0x00, 0x00, 0x00, 0x6D,
    0x79, 0x2D, 0x61, 0x70, 0x70, 0x2E, 0x64, 0x6C, 0x6C, 0x00, 0x00, 0x08, 0x00, 0x0E, 0x00, 0x07, 0x00, 0x08, 0x00,
    0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0A, 0x00, 0x10, 0x00, 0x08,
    0x00, 0x0F, 0x00, 0x04, 0x00, 0x0A, 0x00, 0x00, 0x00, 0x38, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x01, 0x1B, 0x00, 0x00, 0x00, 0x43, 0x68, 0x65, 0x63, 0x6B, 0x20, 0x70, 0x72, 0x6F, 0x63, 0x65, 0x73, 0x73,
    0x20, 0x69, 0x73, 0x20, 0x6D, 0x79, 0x2D, 0x61, 0x70, 0x70, 0x2E, 0x65, 0x78, 0x65, 0x00, 0x00, 0x00, 0x0A, 0x00,
    0x0C, 0x00, 0x0A, 0x00, 0x0B, 0x00, 0x04, 0x00, 0x0A, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02,
    0x04, 0x0A, 0x00, 0x00, 0x00, 0x6D, 0x79, 0x2D, 0x61, 0x70, 0x70, 0x2E, 0x65, 0x78, 0x65, 0x00, 0x00};

TEST(WorkloadSelectionTest, EnableWhenPoliciesIsEmpty)
{
    EXPECT_TRUE(isWorkloadAllowed(L"foo.exe", noarg, L"", {}, false));
}

TEST(WorkloadSelectionTest, EnableWhenLibPoliciesReturnAnError)
{
    const bool is_iis = false;
    const std::vector<uint8_t> ill_formatted_policies{0, 1, 3, 4};
    EXPECT_TRUE(isWorkloadAllowed(L"bar.exe", noarg, L"", ill_formatted_policies, is_iis));
}

TEST(WorkloadSelectionTest, DenyWhenNoPoliciesMatch)
{
    const bool is_iis = false;
    EXPECT_FALSE(isWorkloadAllowed(L"my-app.exe", noarg, L"", only_instrument_java, is_iis));
}

TEST(WorkloadSelectionTest, AllowWhenPoliciesMatch)
{
    const bool is_iis = false;

    // executable
    EXPECT_TRUE(isWorkloadAllowed(L"my-app.exe", noarg, L"", instrument_my_app, is_iis));

    // dotnet dll
    EXPECT_TRUE(
        isWorkloadAllowed(L"dotnet.exe", {L"dotnet.exe", L"/foo/bar/my-app.dll"}, L"", instrument_my_app, is_iis));
    EXPECT_TRUE(
        isWorkloadAllowed(L"dotnet.exe", {L"dotnet.exe", L"exec", L"my-app.dll"}, L"", instrument_my_app, is_iis));
}

TEST(WorkloadSelectionTest, DenyWhenPoliciesMatchWithInstrumentationDisabled)
{
    /*
      [disable-only-my-app-exe]
      instrument = false
      description = "Only instrument java runtime"
      expression = "process.executable:my-app.exe OR dotnet.dll:my-app.dll"
    */
    std::vector<uint8_t> disable_instrumentation_on_my_app = {
        0x0C, 0x00, 0x00, 0x00, 0x00, 0x00, 0x06, 0x00, 0x08, 0x00, 0x04, 0x00, 0x06, 0x00, 0x00, 0x00, 0x04, 0x00,
        0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0A, 0x00, 0x10, 0x00, 0x0C, 0x00,
        0x08, 0x00, 0x04, 0x00, 0x0A, 0x00, 0x00, 0x00, 0x0C, 0x00, 0x00, 0x00, 0x6C, 0x00, 0x00, 0x00, 0x0C, 0x00,
        0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x30, 0x00, 0x00, 0x00, 0x1C, 0x00, 0x00, 0x00, 0x4F, 0x6E, 0x6C, 0x79,
        0x20, 0x69, 0x6E, 0x73, 0x74, 0x72, 0x75, 0x6D, 0x65, 0x6E, 0x74, 0x20, 0x6A, 0x61, 0x76, 0x61, 0x20, 0x72,
        0x75, 0x6E, 0x74, 0x69, 0x6D, 0x65, 0x00, 0x00, 0x0A, 0x00, 0x10, 0x00, 0x0F, 0x00, 0x08, 0x00, 0x04, 0x00,
        0x0A, 0x00, 0x00, 0x00, 0x0C, 0x00, 0x00, 0x00, 0x0C, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00,
        0x00, 0x00, 0x15, 0x00, 0x00, 0x00, 0x61, 0x6C, 0x6C, 0x6F, 0x77, 0x2D, 0x6F, 0x6E, 0x6C, 0x79, 0x2D, 0x6D,
        0x79, 0x2D, 0x61, 0x70, 0x70, 0x2D, 0x65, 0x78, 0x65, 0x00, 0x00, 0x00, 0x28, 0xFF, 0xFF, 0xFF, 0x00, 0x00,
        0x00, 0x02, 0x04, 0x00, 0x00, 0x00, 0xBE, 0xFF, 0xFF, 0xFF, 0x0C, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01,
        0x0C, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x20, 0x00, 0x00, 0x00, 0x15, 0x00, 0x00, 0x00, 0x61, 0x6C,
        0x6C, 0x6F, 0x77, 0x2D, 0x6F, 0x6E, 0x6C, 0x79, 0x2D, 0x6D, 0x79, 0x2D, 0x61, 0x70, 0x70, 0x2D, 0x65, 0x78,
        0x65, 0x00, 0x00, 0x00, 0x68, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x02, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x0A, 0x00, 0x10, 0x00, 0x0C, 0x00, 0x0B, 0x00, 0x04, 0x00, 0x0A, 0x00, 0x00, 0x00, 0x0C, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x03, 0x10, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x74, 0x00, 0x00, 0x00, 0x0C, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xA4, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x01,
        0x04, 0x00, 0x00, 0x00, 0x9A, 0xFF, 0xFF, 0xFF, 0x30, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x01, 0x1F, 0x00, 0x00, 0x00, 0x43, 0x68, 0x65, 0x63, 0x6B, 0x20, 0x70, 0x72, 0x6F, 0x63, 0x65, 0x73,
        0x73, 0x20, 0x44, 0x4C, 0x4C, 0x20, 0x69, 0x73, 0x20, 0x6D, 0x79, 0x2D, 0x61, 0x70, 0x70, 0x2E, 0x64, 0x6C,
        0x6C, 0x00, 0x92, 0xFF, 0xFF, 0xFF, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x04, 0x0A, 0x00, 0x00, 0x00,
        0x6D, 0x79, 0x2D, 0x61, 0x70, 0x70, 0x2E, 0x64, 0x6C, 0x6C, 0x00, 0x00, 0x08, 0x00, 0x0E, 0x00, 0x07, 0x00,
        0x08, 0x00, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0A, 0x00,
        0x10, 0x00, 0x08, 0x00, 0x0F, 0x00, 0x04, 0x00, 0x0A, 0x00, 0x00, 0x00, 0x38, 0x00, 0x00, 0x00, 0x08, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x1B, 0x00, 0x00, 0x00, 0x43, 0x68, 0x65, 0x63, 0x6B, 0x20, 0x70, 0x72,
        0x6F, 0x63, 0x65, 0x73, 0x73, 0x20, 0x69, 0x73, 0x20, 0x6D, 0x79, 0x2D, 0x61, 0x70, 0x70, 0x2E, 0x65, 0x78,
        0x65, 0x00, 0x00, 0x00, 0x0A, 0x00, 0x0C, 0x00, 0x0A, 0x00, 0x0B, 0x00, 0x04, 0x00, 0x0A, 0x00, 0x00, 0x00,
        0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x04, 0x0A, 0x00, 0x00, 0x00, 0x6D, 0x79, 0x2D, 0x61, 0x70, 0x70,
        0x2E, 0x65, 0x78, 0x65, 0x00, 0x00};

    const bool is_iis = false;
    EXPECT_FALSE(isWorkloadAllowed(L"my-app.exe", noarg, L"", disable_instrumentation_on_my_app, is_iis));
}

TEST(WorkloadSelectionTest, IIS_AllowWhenNoPoliciesMatch)
{
    const bool is_iis = true;
    EXPECT_TRUE(isWorkloadAllowed(L"my-app.exe", noarg, L"", only_instrument_java, is_iis));
}

TEST(WorkloadSelectionTest, IIS_AllowWhenPoliciesMatchWithInstrumentationEnabled)
{
    const bool is_iis = true;
    EXPECT_TRUE(isWorkloadAllowed(L"my-app.exe", noarg, L"", instrument_my_app, is_iis));
}

TEST(WorkloadSelectionTest, IIS_DenyWhenPoliciesMatchWithInstrumentationDisabled)
{
    std::vector<uint8_t> disable_staging_app_pool = {
        0x0C, 0x00, 0x00, 0x00, 0x00, 0x00, 0x06, 0x00, 0x08, 0x00, 0x04, 0x00, 0x06, 0x00, 0x00, 0x00, 0x04, 0x00,
        0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0A, 0x00, 0x10, 0x00, 0x0C, 0x00,
        0x08, 0x00, 0x04, 0x00, 0x0A, 0x00, 0x00, 0x00, 0x0C, 0x00, 0x00, 0x00, 0x74, 0x00, 0x00, 0x00, 0x0C, 0x00,
        0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x34, 0x00, 0x00, 0x00, 0x20, 0x00, 0x00, 0x00, 0x44, 0x69, 0x73, 0x61,
        0x62, 0x6C, 0x65, 0x20, 0x73, 0x74, 0x61, 0x67, 0x69, 0x6E, 0x67, 0x20, 0x61, 0x70, 0x70, 0x6C, 0x69, 0x63,
        0x61, 0x74, 0x69, 0x6F, 0x6E, 0x20, 0x70, 0x6F, 0x6F, 0x6C, 0x00, 0x00, 0x0A, 0x00, 0x10, 0x00, 0x0F, 0x00,
        0x08, 0x00, 0x04, 0x00, 0x0A, 0x00, 0x00, 0x00, 0x0C, 0x00, 0x00, 0x00, 0x0C, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x18, 0x00, 0x00, 0x00, 0x64, 0x69, 0x73, 0x61, 0x62, 0x6C, 0x65, 0x2D,
        0x73, 0x74, 0x61, 0x67, 0x69, 0x6E, 0x67, 0x2D, 0x61, 0x70, 0x70, 0x2D, 0x70, 0x6F, 0x6F, 0x6C, 0x00, 0x00,
        0x00, 0x00, 0xB0, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x02, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0A, 0x00,
        0x10, 0x00, 0x0C, 0x00, 0x0B, 0x00, 0x04, 0x00, 0x0A, 0x00, 0x00, 0x00, 0x0C, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x01, 0x0C, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x2C, 0x00, 0x00, 0x00, 0x18, 0x00, 0x00, 0x00,
        0x64, 0x69, 0x73, 0x61, 0x62, 0x6C, 0x65, 0x2D, 0x73, 0x74, 0x61, 0x67, 0x69, 0x6E, 0x67, 0x2D, 0x61, 0x70,
        0x70, 0x2D, 0x70, 0x6F, 0x6F, 0x6C, 0x00, 0x00, 0x00, 0x00, 0x08, 0x00, 0x0E, 0x00, 0x07, 0x00, 0x08, 0x00,
        0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0A, 0x00, 0x10, 0x00,
        0x08, 0x00, 0x0F, 0x00, 0x04, 0x00, 0x0A, 0x00, 0x00, 0x00, 0x40, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x01, 0x25, 0x00, 0x00, 0x00, 0x43, 0x68, 0x65, 0x63, 0x6B, 0x20, 0x49, 0x49, 0x53, 0x20,
        0x61, 0x70, 0x70, 0x6C, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6F, 0x6E, 0x20, 0x70, 0x6F, 0x6F, 0x6C, 0x20, 0x69,
        0x73, 0x20, 0x73, 0x74, 0x61, 0x67, 0x69, 0x6E, 0x67, 0x00, 0x0A, 0x00, 0x0C, 0x00, 0x0A, 0x00, 0x0B, 0x00,
        0x04, 0x00, 0x0A, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x22, 0x04, 0x07, 0x00, 0x00, 0x00,
        0x73, 0x74, 0x61, 0x67, 0x69, 0x6E, 0x67, 0x00};

    const bool is_iis = true;
    EXPECT_FALSE(isWorkloadAllowed(L"w3p.exe", noarg, L"staging", disable_staging_app_pool, is_iis));
}

// #endif
