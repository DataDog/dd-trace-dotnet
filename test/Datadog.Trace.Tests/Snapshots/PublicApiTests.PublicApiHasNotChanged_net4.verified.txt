[assembly: System.Reflection.AssemblyMetadata("RepositoryUrl", "https://github.com/DataDog/dd-trace-dotnet.git")]

namespace Datadog.Trace.AppSec
{
    public class Security : System.IDisposable
    {
        public Security() { }
        public static Datadog.Trace.AppSec.Security Instance { get; set; }
        public void Dispose() { }
    }
}
namespace Datadog.Trace.AspNet
{
    public class TracingHttpModule : System.Web.IHttpModule
    {
        public TracingHttpModule() { }
        public TracingHttpModule(string operationName) { }
        public void Dispose() { }
        public void Init(System.Web.HttpApplication httpApplication) { }
    }
}
namespace Datadog.Trace.ClrProfiler.AutoInstrumentation.AWS.SDK
{
    public interface IAmazonWebServiceResponse
    {
        long ContentLength { get; }
        System.Net.HttpStatusCode HttpStatusCode { get; }
        Datadog.Trace.ClrProfiler.AutoInstrumentation.AWS.SDK.IResponseMetadata ResponseMetadata { get; }
    }
    public interface IClientConfig
    {
        Datadog.Trace.ClrProfiler.AutoInstrumentation.AWS.SDK.IRegionEndpoint RegionEndpoint { get; }
    }
    public interface IExecutionContext
    {
        Datadog.Trace.ClrProfiler.AutoInstrumentation.AWS.SDK.IRequestContext RequestContext { get; }
        Datadog.Trace.ClrProfiler.AutoInstrumentation.AWS.SDK.IResponseContext ResponseContext { get; }
    }
    public interface IRegionEndpoint
    {
        string SystemName { get; }
    }
    public interface IRequest
    {
        string HttpMethod { get; }
    }
    public interface IRequestContext
    {
        Datadog.Trace.ClrProfiler.AutoInstrumentation.AWS.SDK.IClientConfig ClientConfig { get; }
        Datadog.Trace.ClrProfiler.AutoInstrumentation.AWS.SDK.IRequest Request { get; }
    }
    public interface IResponseContext
    {
        Datadog.Trace.ClrProfiler.AutoInstrumentation.AWS.SDK.IAmazonWebServiceResponse Response { get; }
    }
    public interface IResponseMetadata
    {
        System.Collections.Generic.IDictionary<string, string> Metadata { get; }
        string RequestId { get; }
    }
    [Datadog.Trace.ClrProfiler.InstrumentMethod(AssemblyName="AWSSDK.Core", IntegrationName="AwsSdk", MaximumVersion="3.*.*", MethodName="InvokeAsync", MinimumVersion="3.0.0", ParameterTypeNames=new string[] {
            "Amazon.Runtime.IExecutionContext"}, ReturnTypeName="System.Threading.Tasks.Task`1<T>", TypeName="Amazon.Runtime.Internal.RuntimePipeline")]
    public class RuntimePipelineInvokeAsyncIntegration
    {
        public RuntimePipelineInvokeAsyncIntegration() { }
        public static TResponse OnAsyncMethodEnd<TTarget, TResponse>(TTarget instance, TResponse response, System.Exception exception, Datadog.Trace.ClrProfiler.CallTarget.CallTargetState state)
            where TResponse : Datadog.Trace.ClrProfiler.AutoInstrumentation.AWS.SDK.IAmazonWebServiceResponse { }
        public static Datadog.Trace.ClrProfiler.CallTarget.CallTargetState OnMethodBegin<TTarget, TExecutionContext>(TTarget instance, TExecutionContext executionContext)
            where TExecutionContext : Datadog.Trace.ClrProfiler.AutoInstrumentation.AWS.SDK.IExecutionContext, Datadog.Trace.DuckTyping.IDuckType { }
    }
    [Datadog.Trace.ClrProfiler.InstrumentMethod(AssemblyName="AWSSDK.Core", IntegrationName="AwsSdk", MaximumVersion="3.*.*", MethodName="InvokeSync", MinimumVersion="3.0.0", ParameterTypeNames=new string[] {
            "Amazon.Runtime.IExecutionContext"}, ReturnTypeName="Amazon.Runtime.IResponseContext", TypeName="Amazon.Runtime.Internal.RuntimePipeline")]
    public class RuntimePipelineInvokeSyncIntegration
    {
        public RuntimePipelineInvokeSyncIntegration() { }
        public static Datadog.Trace.ClrProfiler.CallTarget.CallTargetState OnMethodBegin<TTarget, TExecutionContext>(TTarget instance, TExecutionContext executionContext)
            where TExecutionContext : Datadog.Trace.ClrProfiler.AutoInstrumentation.AWS.SDK.IExecutionContext, Datadog.Trace.DuckTyping.IDuckType { }
        public static Datadog.Trace.ClrProfiler.CallTarget.CallTargetReturn<TResponseContext> OnMethodEnd<TTarget, TResponseContext>(TTarget instance, TResponseContext responseContext, System.Exception exception, Datadog.Trace.ClrProfiler.CallTarget.CallTargetState state)
            where TResponseContext : Datadog.Trace.ClrProfiler.AutoInstrumentation.AWS.SDK.IResponseContext { }
    }
}
namespace Datadog.Trace.ClrProfiler.AutoInstrumentation.AWS.SQS
{
    [Datadog.Trace.ClrProfiler.InstrumentMethod(AssemblyName="AWSSDK.SQS", IntegrationName="AwsSqs", MaximumVersion="3.*.*", MethodName="CreateQueueAsync", MinimumVersion="3.0.0", ParameterTypeNames=new string[] {
            "Amazon.SQS.Model.CreateQueueRequest",
            "System.Threading.CancellationToken"}, ReturnTypeName="System.Threading.Tasks.Task`1<Amazon.SQS.Model.CreateQueueResponse>", TypeName="Amazon.SQS.AmazonSQSClient")]
    public class CreateQueueAsyncIntegration
    {
        public CreateQueueAsyncIntegration() { }
        public static TResponse OnAsyncMethodEnd<TTarget, TResponse>(TTarget instance, TResponse response, System.Exception exception, Datadog.Trace.ClrProfiler.CallTarget.CallTargetState state)
            where TResponse : Datadog.Trace.ClrProfiler.AutoInstrumentation.AWS.SQS.ICreateQueueResponse { }
        public static Datadog.Trace.ClrProfiler.CallTarget.CallTargetState OnMethodBegin<TTarget, TCreateQueueRequest>(TTarget instance, TCreateQueueRequest request, System.Threading.CancellationToken cancellationToken)
            where TCreateQueueRequest : Datadog.Trace.ClrProfiler.AutoInstrumentation.AWS.SQS.ICreateQueueRequest, Datadog.Trace.DuckTyping.IDuckType { }
    }
    [Datadog.Trace.ClrProfiler.InstrumentMethod(AssemblyName="AWSSDK.SQS", IntegrationName="AwsSqs", MaximumVersion="3.*.*", MethodName="CreateQueue", MinimumVersion="3.0.0", ParameterTypeNames=new string[] {
            "Amazon.SQS.Model.CreateQueueRequest"}, ReturnTypeName="Amazon.SQS.Model.CreateQueueResponse", TypeName="Amazon.SQS.AmazonSQSClient")]
    public class CreateQueueIntegration
    {
        public CreateQueueIntegration() { }
        public static Datadog.Trace.ClrProfiler.CallTarget.CallTargetState OnMethodBegin<TTarget, TCreateQueueRequest>(TTarget instance, TCreateQueueRequest request)
            where TCreateQueueRequest : Datadog.Trace.ClrProfiler.AutoInstrumentation.AWS.SQS.ICreateQueueRequest, Datadog.Trace.DuckTyping.IDuckType { }
        public static Datadog.Trace.ClrProfiler.CallTarget.CallTargetReturn<TResponse> OnMethodEnd<TTarget, TResponse>(TTarget instance, TResponse response, System.Exception exception, Datadog.Trace.ClrProfiler.CallTarget.CallTargetState state)
            where TResponse : Datadog.Trace.ClrProfiler.AutoInstrumentation.AWS.SQS.ICreateQueueResponse { }
    }
    [Datadog.Trace.ClrProfiler.InstrumentMethod(AssemblyName="AWSSDK.SQS", IntegrationName="AwsSqs", MaximumVersion="3.*.*", MethodName="DeleteMessageAsync", MinimumVersion="3.0.0", ParameterTypeNames=new string[] {
            "Amazon.SQS.Model.DeleteMessageRequest",
            "System.Threading.CancellationToken"}, ReturnTypeName="System.Threading.Tasks.Task`1<Amazon.SQS.Model.DeleteMessageResponse>", TypeName="Amazon.SQS.AmazonSQSClient")]
    public class DeleteMessageAsyncIntegration
    {
        public DeleteMessageAsyncIntegration() { }
        public static TResponse OnAsyncMethodEnd<TTarget, TResponse>(TTarget instance, TResponse response, System.Exception exception, Datadog.Trace.ClrProfiler.CallTarget.CallTargetState state) { }
        public static Datadog.Trace.ClrProfiler.CallTarget.CallTargetState OnMethodBegin<TTarget, TDeleteMessageRequest>(TTarget instance, TDeleteMessageRequest request, System.Threading.CancellationToken cancellationToken)
            where TDeleteMessageRequest : Datadog.Trace.ClrProfiler.AutoInstrumentation.AWS.SQS.IAmazonSQSRequestWithQueueUrl, Datadog.Trace.DuckTyping.IDuckType { }
    }
    [Datadog.Trace.ClrProfiler.InstrumentMethod(AssemblyName="AWSSDK.SQS", IntegrationName="AwsSqs", MaximumVersion="3.*.*", MethodName="DeleteMessageBatchAsync", MinimumVersion="3.0.0", ParameterTypeNames=new string[] {
            "Amazon.SQS.Model.DeleteMessageBatchRequest",
            "System.Threading.CancellationToken"}, ReturnTypeName="System.Threading.Tasks.Task`1<Amazon.SQS.Model.DeleteMessageBatchResponse>", TypeName="Amazon.SQS.AmazonSQSClient")]
    public class DeleteMessageBatchAsyncIntegration
    {
        public DeleteMessageBatchAsyncIntegration() { }
        public static TResponse OnAsyncMethodEnd<TTarget, TResponse>(TTarget instance, TResponse response, System.Exception exception, Datadog.Trace.ClrProfiler.CallTarget.CallTargetState state) { }
        public static Datadog.Trace.ClrProfiler.CallTarget.CallTargetState OnMethodBegin<TTarget, TDeleteMessageBatchRequest>(TTarget instance, TDeleteMessageBatchRequest request, System.Threading.CancellationToken cancellationToken)
            where TDeleteMessageBatchRequest : Datadog.Trace.ClrProfiler.AutoInstrumentation.AWS.SQS.IAmazonSQSRequestWithQueueUrl, Datadog.Trace.DuckTyping.IDuckType { }
    }
    [Datadog.Trace.ClrProfiler.InstrumentMethod(AssemblyName="AWSSDK.SQS", IntegrationName="AwsSqs", MaximumVersion="3.*.*", MethodName="DeleteMessageBatch", MinimumVersion="3.0.0", ParameterTypeNames=new string[] {
            "Amazon.SQS.Model.DeleteMessageBatchRequest"}, ReturnTypeName="Amazon.SQS.Model.DeleteMessageBatchResponse", TypeName="Amazon.SQS.AmazonSQSClient")]
    public class DeleteMessageBatchIntegration
    {
        public DeleteMessageBatchIntegration() { }
        public static Datadog.Trace.ClrProfiler.CallTarget.CallTargetState OnMethodBegin<TTarget, TDeleteMessageBatchRequest>(TTarget instance, TDeleteMessageBatchRequest request)
            where TDeleteMessageBatchRequest : Datadog.Trace.ClrProfiler.AutoInstrumentation.AWS.SQS.IAmazonSQSRequestWithQueueUrl, Datadog.Trace.DuckTyping.IDuckType { }
        public static Datadog.Trace.ClrProfiler.CallTarget.CallTargetReturn<TResponse> OnMethodEnd<TTarget, TResponse>(TTarget instance, TResponse response, System.Exception exception, Datadog.Trace.ClrProfiler.CallTarget.CallTargetState state) { }
    }
    [Datadog.Trace.ClrProfiler.InstrumentMethod(AssemblyName="AWSSDK.SQS", IntegrationName="AwsSqs", MaximumVersion="3.*.*", MethodName="DeleteMessage", MinimumVersion="3.0.0", ParameterTypeNames=new string[] {
            "Amazon.SQS.Model.DeleteMessageRequest"}, ReturnTypeName="Amazon.SQS.Model.DeleteMessageResponse", TypeName="Amazon.SQS.AmazonSQSClient")]
    public class DeleteMessageIntegration
    {
        public DeleteMessageIntegration() { }
        public static Datadog.Trace.ClrProfiler.CallTarget.CallTargetState OnMethodBegin<TTarget, TDeleteMessageRequest>(TTarget instance, TDeleteMessageRequest request)
            where TDeleteMessageRequest : Datadog.Trace.ClrProfiler.AutoInstrumentation.AWS.SQS.IAmazonSQSRequestWithQueueUrl, Datadog.Trace.DuckTyping.IDuckType { }
        public static Datadog.Trace.ClrProfiler.CallTarget.CallTargetReturn<TResponse> OnMethodEnd<TTarget, TResponse>(TTarget instance, TResponse response, System.Exception exception, Datadog.Trace.ClrProfiler.CallTarget.CallTargetState state) { }
    }
    [Datadog.Trace.ClrProfiler.InstrumentMethod(AssemblyName="AWSSDK.SQS", IntegrationName="AwsSqs", MaximumVersion="3.*.*", MethodName="DeleteQueueAsync", MinimumVersion="3.0.0", ParameterTypeNames=new string[] {
            "Amazon.SQS.Model.DeleteQueueRequest",
            "System.Threading.CancellationToken"}, ReturnTypeName="System.Threading.Tasks.Task`1<Amazon.SQS.Model.DeleteQueueResponse>", TypeName="Amazon.SQS.AmazonSQSClient")]
    public class DeleteQueueAsyncIntegration
    {
        public DeleteQueueAsyncIntegration() { }
        public static TResponse OnAsyncMethodEnd<TTarget, TResponse>(TTarget instance, TResponse response, System.Exception exception, Datadog.Trace.ClrProfiler.CallTarget.CallTargetState state) { }
        public static Datadog.Trace.ClrProfiler.CallTarget.CallTargetState OnMethodBegin<TTarget, TDeleteQueueRequest>(TTarget instance, TDeleteQueueRequest request, System.Threading.CancellationToken cancellationToken)
            where TDeleteQueueRequest : Datadog.Trace.ClrProfiler.AutoInstrumentation.AWS.SQS.IAmazonSQSRequestWithQueueUrl, Datadog.Trace.DuckTyping.IDuckType { }
    }
    [Datadog.Trace.ClrProfiler.InstrumentMethod(AssemblyName="AWSSDK.SQS", IntegrationName="AwsSqs", MaximumVersion="3.*.*", MethodName="DeleteQueue", MinimumVersion="3.0.0", ParameterTypeNames=new string[] {
            "Amazon.SQS.Model.DeleteQueueRequest"}, ReturnTypeName="Amazon.SQS.Model.DeleteQueueResponse", TypeName="Amazon.SQS.AmazonSQSClient")]
    public class DeleteQueueIntegration
    {
        public DeleteQueueIntegration() { }
        public static Datadog.Trace.ClrProfiler.CallTarget.CallTargetState OnMethodBegin<TTarget, TDeleteQueueRequest>(TTarget instance, TDeleteQueueRequest request)
            where TDeleteQueueRequest : Datadog.Trace.ClrProfiler.AutoInstrumentation.AWS.SQS.IAmazonSQSRequestWithQueueUrl, Datadog.Trace.DuckTyping.IDuckType { }
        public static Datadog.Trace.ClrProfiler.CallTarget.CallTargetReturn<TResponse> OnMethodEnd<TTarget, TResponse>(TTarget instance, TResponse response, System.Exception exception, Datadog.Trace.ClrProfiler.CallTarget.CallTargetState state) { }
    }
    public interface IAmazonSQSRequestWithQueueUrl
    {
        string QueueUrl { get; }
    }
    public interface IContainsMessageAttributes
    {
        System.Collections.IDictionary MessageAttributes { get; set; }
    }
    public interface ICreateQueueRequest
    {
        System.Collections.Generic.Dictionary<string, string> Attributes { get; }
        string QueueName { get; }
    }
    public interface ICreateQueueResponse : Datadog.Trace.ClrProfiler.AutoInstrumentation.AWS.SDK.IAmazonWebServiceResponse
    {
        string QueueUrl { get; }
    }
    public interface ISendMessageBatchRequest : Datadog.Trace.ClrProfiler.AutoInstrumentation.AWS.SQS.IAmazonSQSRequestWithQueueUrl
    {
        System.Collections.IList Entries { get; }
    }
    public interface ISendMessageRequest : Datadog.Trace.ClrProfiler.AutoInstrumentation.AWS.SQS.IAmazonSQSRequestWithQueueUrl, Datadog.Trace.ClrProfiler.AutoInstrumentation.AWS.SQS.IContainsMessageAttributes { }
    [Datadog.Trace.ClrProfiler.InstrumentMethod(AssemblyName="AWSSDK.SQS", IntegrationName="AwsSqs", MaximumVersion="3.*.*", MethodName="ReceiveMessageAsync", MinimumVersion="3.0.0", ParameterTypeNames=new string[] {
            "Amazon.SQS.Model.ReceiveMessageRequest",
            "System.Threading.CancellationToken"}, ReturnTypeName="System.Threading.Tasks.Task`1<Amazon.SQS.Model.ReceiveMessageResponse>", TypeName="Amazon.SQS.AmazonSQSClient")]
    public class ReceiveMessageAsyncIntegration
    {
        public ReceiveMessageAsyncIntegration() { }
        public static TResponse OnAsyncMethodEnd<TTarget, TResponse>(TTarget instance, TResponse response, System.Exception exception, Datadog.Trace.ClrProfiler.CallTarget.CallTargetState state) { }
        public static Datadog.Trace.ClrProfiler.CallTarget.CallTargetState OnMethodBegin<TTarget, TReceiveMessageRequest>(TTarget instance, TReceiveMessageRequest request, System.Threading.CancellationToken cancellationToken)
            where TReceiveMessageRequest : Datadog.Trace.ClrProfiler.AutoInstrumentation.AWS.SQS.IAmazonSQSRequestWithQueueUrl, Datadog.Trace.DuckTyping.IDuckType { }
    }
    [Datadog.Trace.ClrProfiler.InstrumentMethod(AssemblyName="AWSSDK.SQS", IntegrationName="AwsSqs", MaximumVersion="3.*.*", MethodName="ReceiveMessage", MinimumVersion="3.0.0", ParameterTypeNames=new string[] {
            "Amazon.SQS.Model.ReceiveMessageRequest"}, ReturnTypeName="Amazon.SQS.Model.ReceiveMessageResponse", TypeName="Amazon.SQS.AmazonSQSClient")]
    public class ReceiveMessageIntegration
    {
        public ReceiveMessageIntegration() { }
        public static Datadog.Trace.ClrProfiler.CallTarget.CallTargetState OnMethodBegin<TTarget, TReceiveMessageRequest>(TTarget instance, TReceiveMessageRequest request)
            where TReceiveMessageRequest : Datadog.Trace.ClrProfiler.AutoInstrumentation.AWS.SQS.IAmazonSQSRequestWithQueueUrl, Datadog.Trace.DuckTyping.IDuckType { }
        public static Datadog.Trace.ClrProfiler.CallTarget.CallTargetReturn<TResponse> OnMethodEnd<TTarget, TResponse>(TTarget instance, TResponse response, System.Exception exception, Datadog.Trace.ClrProfiler.CallTarget.CallTargetState state) { }
    }
    [Datadog.Trace.ClrProfiler.InstrumentMethod(AssemblyName="AWSSDK.SQS", IntegrationName="AwsSqs", MaximumVersion="3.*.*", MethodName="SendMessageAsync", MinimumVersion="3.0.0", ParameterTypeNames=new string[] {
            "Amazon.SQS.Model.SendMessageRequest",
            "System.Threading.CancellationToken"}, ReturnTypeName="System.Threading.Tasks.Task`1<Amazon.SQS.Model.SendMessageResponse>", TypeName="Amazon.SQS.AmazonSQSClient")]
    public class SendMessageAsyncIntegration
    {
        public SendMessageAsyncIntegration() { }
        public static TResponse OnAsyncMethodEnd<TTarget, TResponse>(TTarget instance, TResponse response, System.Exception exception, Datadog.Trace.ClrProfiler.CallTarget.CallTargetState state) { }
        public static Datadog.Trace.ClrProfiler.CallTarget.CallTargetState OnMethodBegin<TTarget, TSendMessageRequest>(TTarget instance, TSendMessageRequest request, System.Threading.CancellationToken cancellationToken) { }
    }
    [Datadog.Trace.ClrProfiler.InstrumentMethod(AssemblyName="AWSSDK.SQS", IntegrationName="AwsSqs", MaximumVersion="3.*.*", MethodName="SendMessageBatchAsync", MinimumVersion="3.0.0", ParameterTypeNames=new string[] {
            "Amazon.SQS.Model.SendMessageBatchRequest",
            "System.Threading.CancellationToken"}, ReturnTypeName="System.Threading.Tasks.Task`1<Amazon.SQS.Model.SendMessageBatchResponse>", TypeName="Amazon.SQS.AmazonSQSClient")]
    public class SendMessageBatchAsyncIntegration
    {
        public SendMessageBatchAsyncIntegration() { }
        public static TResponse OnAsyncMethodEnd<TTarget, TResponse>(TTarget instance, TResponse response, System.Exception exception, Datadog.Trace.ClrProfiler.CallTarget.CallTargetState state) { }
        public static Datadog.Trace.ClrProfiler.CallTarget.CallTargetState OnMethodBegin<TTarget, TSendMessageBatchRequest>(TTarget instance, TSendMessageBatchRequest request, System.Threading.CancellationToken cancellationToken) { }
    }
    [Datadog.Trace.ClrProfiler.InstrumentMethod(AssemblyName="AWSSDK.SQS", IntegrationName="AwsSqs", MaximumVersion="3.*.*", MethodName="SendMessageBatch", MinimumVersion="3.0.0", ParameterTypeNames=new string[] {
            "Amazon.SQS.Model.SendMessageBatchRequest"}, ReturnTypeName="Amazon.SQS.Model.SendMessageBatchResponse", TypeName="Amazon.SQS.AmazonSQSClient")]
    public class SendMessageBatchIntegration
    {
        public SendMessageBatchIntegration() { }
        public static Datadog.Trace.ClrProfiler.CallTarget.CallTargetState OnMethodBegin<TTarget, TSendMessageBatchRequest>(TTarget instance, TSendMessageBatchRequest request) { }
        public static Datadog.Trace.ClrProfiler.CallTarget.CallTargetReturn<TResponse> OnMethodEnd<TTarget, TResponse>(TTarget instance, TResponse response, System.Exception exception, Datadog.Trace.ClrProfiler.CallTarget.CallTargetState state) { }
    }
    [Datadog.Trace.ClrProfiler.InstrumentMethod(AssemblyName="AWSSDK.SQS", IntegrationName="AwsSqs", MaximumVersion="3.*.*", MethodName="SendMessage", MinimumVersion="3.0.0", ParameterTypeNames=new string[] {
            "Amazon.SQS.Model.SendMessageRequest"}, ReturnTypeName="Amazon.SQS.Model.SendMessageResponse", TypeName="Amazon.SQS.AmazonSQSClient")]
    public class SendMessageIntegration
    {
        public SendMessageIntegration() { }
        public static Datadog.Trace.ClrProfiler.CallTarget.CallTargetState OnMethodBegin<TTarget, TSendMessageRequest>(TTarget instance, TSendMessageRequest request) { }
        public static Datadog.Trace.ClrProfiler.CallTarget.CallTargetReturn<TResponse> OnMethodEnd<TTarget, TResponse>(TTarget instance, TResponse response, System.Exception exception, Datadog.Trace.ClrProfiler.CallTarget.CallTargetState state) { }
    }
}
namespace Datadog.Trace.ClrProfiler.AutoInstrumentation.AdoNet
{
    public class CommandExecuteNonQueryAsyncIntegration
    {
        public CommandExecuteNonQueryAsyncIntegration() { }
        public static TReturn OnAsyncMethodEnd<TTarget, TReturn>(TTarget instance, TReturn returnValue, System.Exception exception, Datadog.Trace.ClrProfiler.CallTarget.CallTargetState state) { }
        public static Datadog.Trace.ClrProfiler.CallTarget.CallTargetState OnMethodBegin<TTarget>(TTarget instance, System.Threading.CancellationToken cancellationToken) { }
    }
    public class CommandExecuteNonQueryIntegration
    {
        public CommandExecuteNonQueryIntegration() { }
        public static Datadog.Trace.ClrProfiler.CallTarget.CallTargetState OnMethodBegin<TTarget>(TTarget instance) { }
        public static Datadog.Trace.ClrProfiler.CallTarget.CallTargetReturn<TReturn> OnMethodEnd<TTarget, TReturn>(TTarget instance, TReturn returnValue, System.Exception exception, Datadog.Trace.ClrProfiler.CallTarget.CallTargetState state) { }
    }
    public class CommandExecuteNonQueryWithBehaviorIntegration
    {
        public CommandExecuteNonQueryWithBehaviorIntegration() { }
        public static Datadog.Trace.ClrProfiler.CallTarget.CallTargetState OnMethodBegin<TTarget, TBehavior>(TTarget instance, TBehavior commandBehavior) { }
        public static Datadog.Trace.ClrProfiler.CallTarget.CallTargetReturn<TReturn> OnMethodEnd<TTarget, TReturn>(TTarget instance, TReturn returnValue, System.Exception exception, Datadog.Trace.ClrProfiler.CallTarget.CallTargetState state) { }
    }
    public class CommandExecuteReaderAsyncIntegration
    {
        public CommandExecuteReaderAsyncIntegration() { }
        public static TReturn OnAsyncMethodEnd<TTarget, TReturn>(TTarget instance, TReturn returnValue, System.Exception exception, Datadog.Trace.ClrProfiler.CallTarget.CallTargetState state) { }
        public static Datadog.Trace.ClrProfiler.CallTarget.CallTargetState OnMethodBegin<TTarget>(TTarget instance) { }
    }
    public class CommandExecuteReaderIntegration
    {
        public CommandExecuteReaderIntegration() { }
        public static Datadog.Trace.ClrProfiler.CallTarget.CallTargetState OnMethodBegin<TTarget>(TTarget instance) { }
        public static Datadog.Trace.ClrProfiler.CallTarget.CallTargetReturn<TReturn> OnMethodEnd<TTarget, TReturn>(TTarget instance, TReturn returnValue, System.Exception exception, Datadog.Trace.ClrProfiler.CallTarget.CallTargetState state) { }
    }
    public class CommandExecuteReaderWithBehaviorAndCancellationAsyncIntegration
    {
        public CommandExecuteReaderWithBehaviorAndCancellationAsyncIntegration() { }
        public static TReturn OnAsyncMethodEnd<TTarget, TReturn>(TTarget instance, TReturn returnValue, System.Exception exception, Datadog.Trace.ClrProfiler.CallTarget.CallTargetState state) { }
        public static Datadog.Trace.ClrProfiler.CallTarget.CallTargetState OnMethodBegin<TTarget, TBehavior>(TTarget instance, TBehavior commandBehavior, System.Threading.CancellationToken cancellationToken) { }
    }
    public class CommandExecuteReaderWithBehaviorAsyncIntegration
    {
        public CommandExecuteReaderWithBehaviorAsyncIntegration() { }
        public static TReturn OnAsyncMethodEnd<TTarget, TReturn>(TTarget instance, TReturn returnValue, System.Exception exception, Datadog.Trace.ClrProfiler.CallTarget.CallTargetState state) { }
        public static Datadog.Trace.ClrProfiler.CallTarget.CallTargetState OnMethodBegin<TTarget, TBehavior>(TTarget instance, TBehavior commandBehavior) { }
    }
    public class CommandExecuteReaderWithBehaviorIntegration
    {
        public CommandExecuteReaderWithBehaviorIntegration() { }
        public static Datadog.Trace.ClrProfiler.CallTarget.CallTargetState OnMethodBegin<TTarget, TBehavior>(TTarget instance, TBehavior commandBehavior) { }
        public static Datadog.Trace.ClrProfiler.CallTarget.CallTargetReturn<TReturn> OnMethodEnd<TTarget, TReturn>(TTarget instance, TReturn returnValue, System.Exception exception, Datadog.Trace.ClrProfiler.CallTarget.CallTargetState state) { }
    }
    public class CommandExecuteReaderWithCancellationAsyncIntegration
    {
        public CommandExecuteReaderWithCancellationAsyncIntegration() { }
        public static TReturn OnAsyncMethodEnd<TTarget, TReturn>(TTarget instance, TReturn returnValue, System.Exception exception, Datadog.Trace.ClrProfiler.CallTarget.CallTargetState state) { }
        public static Datadog.Trace.ClrProfiler.CallTarget.CallTargetState OnMethodBegin<TTarget>(TTarget instance, System.Threading.CancellationToken cancellationToken) { }
    }
    public class CommandExecuteScalarAsyncIntegration
    {
        public CommandExecuteScalarAsyncIntegration() { }
        public static TReturn OnAsyncMethodEnd<TTarget, TReturn>(TTarget instance, TReturn returnValue, System.Exception exception, Datadog.Trace.ClrProfiler.CallTarget.CallTargetState state) { }
        public static Datadog.Trace.ClrProfiler.CallTarget.CallTargetState OnMethodBegin<TTarget>(TTarget instance, System.Threading.CancellationToken cancellationToken) { }
    }
    public class CommandExecuteScalarIntegration
    {
        public CommandExecuteScalarIntegration() { }
        public static Datadog.Trace.ClrProfiler.CallTarget.CallTargetState OnMethodBegin<TTarget>(TTarget instance) { }
        public static Datadog.Trace.ClrProfiler.CallTarget.CallTargetReturn<TReturn> OnMethodEnd<TTarget, TReturn>(TTarget instance, TReturn returnValue, System.Exception exception, Datadog.Trace.ClrProfiler.CallTarget.CallTargetState state) { }
    }
    public class CommandExecuteScalarWithBehaviorIntegration
    {
        public CommandExecuteScalarWithBehaviorIntegration() { }
        public static Datadog.Trace.ClrProfiler.CallTarget.CallTargetState OnMethodBegin<TTarget, TBehavior>(TTarget instance, TBehavior commandBehavior) { }
        public static Datadog.Trace.ClrProfiler.CallTarget.CallTargetReturn<TReturn> OnMethodEnd<TTarget, TReturn>(TTarget instance, TReturn returnValue, System.Exception exception, Datadog.Trace.ClrProfiler.CallTarget.CallTargetState state) { }
    }
}
namespace Datadog.Trace.ClrProfiler.AutoInstrumentation.AspNet
{
    [Datadog.Trace.ClrProfiler.InstrumentMethod(AssemblyName="System.Web.Http", IntegrationName="AspNetWebApi2", MaximumVersion="5", MethodName="ExecuteAsync", MinimumVersion="5.1", ParameterTypeNames=new string[] {
            "System.Web.Http.Controllers.HttpControllerContext",
            "System.Threading.CancellationToken"}, ReturnTypeName="System.Threading.Tasks.Task`1<System.Net.Http.HttpResponseMessage>", TypeName="System.Web.Http.ApiController")]
    public class ApiController_ExecuteAsync_Integration
    {
        public ApiController_ExecuteAsync_Integration() { }
        public static TResponse OnAsyncMethodEnd<TTarget, TResponse>(TTarget instance, TResponse responseMessage, System.Exception exception, Datadog.Trace.ClrProfiler.CallTarget.CallTargetState state) { }
        public static Datadog.Trace.ClrProfiler.CallTarget.CallTargetState OnMethodBegin<TTarget, TController>(TTarget instance, TController controllerContext, System.Threading.CancellationToken cancellationToken)
            where TController : Datadog.Trace.ClrProfiler.Integrations.AspNet.IHttpControllerContext { }
    }
    [Datadog.Trace.ClrProfiler.InstrumentMethod(AssemblyName="System.Web.Mvc", IntegrationName="AspNetMvc", MaximumVersion="5", MethodName="BeginInvokeAction", MinimumVersion="4", ParameterTypeNames=new string[] {
            "System.Web.Mvc.ControllerContext",
            "System.String",
            "System.AsyncCallback",
            "System.Object"}, ReturnTypeName="System.IAsyncResult", TypeName="System.Web.Mvc.Async.AsyncControllerActionInvoker")]
    public class AsyncControllerActionInvoker_BeginInvokeAction_Integration
    {
        public AsyncControllerActionInvoker_BeginInvokeAction_Integration() { }
        public static Datadog.Trace.ClrProfiler.CallTarget.CallTargetState OnMethodBegin<TTarget, TContext>(TTarget instance, TContext controllerContext, string actionName, System.AsyncCallback callback, object state) { }
    }
    [Datadog.Trace.ClrProfiler.InstrumentMethod(AssemblyName="System.Web.Mvc", IntegrationName="AspNetMvc", MaximumVersion="5", MethodName="EndInvokeAction", MinimumVersion="4", ParameterTypeNames=new string[] {
            "System.IAsyncResult"}, ReturnTypeName="System.Boolean", TypeName="System.Web.Mvc.Async.AsyncControllerActionInvoker")]
    public class AsyncControllerActionInvoker_EndInvokeAction_Integration
    {
        public AsyncControllerActionInvoker_EndInvokeAction_Integration() { }
        public static Datadog.Trace.ClrProfiler.CallTarget.CallTargetReturn<TResult> OnMethodEnd<TTarget, TResult>(TTarget instance, TResult returnValue, System.Exception exception, Datadog.Trace.ClrProfiler.CallTarget.CallTargetState state) { }
    }
    [Datadog.Trace.ClrProfiler.InstrumentMethod(AssemblyName="System.Web", IntegrationName="AspNet", MaximumVersion="4.*.*", MethodName="InvokePreStartInitMethodsCore", MinimumVersion="4.0.0", ParameterTypeNames=new string[] {
            "System.Collections.Generic.ICollection`1[System.Reflection.MethodInfo]",
            "System.Func`1[System.IDisposable]"}, ReturnTypeName="System.Void", TypeName="System.Web.Compilation.BuildManager")]
    public class HttpModule_Integration
    {
        public HttpModule_Integration() { }
        public static Datadog.Trace.ClrProfiler.CallTarget.CallTargetState OnMethodBegin<TTarget, TCollection, TFunc>(TTarget instance, TCollection methods, TFunc setHostingEnvironmentCultures) { }
    }
}
namespace Datadog.Trace.ClrProfiler.AutoInstrumentation.AspNetCore
{
    [Datadog.Trace.ClrProfiler.InstrumentMethod(AssemblyName="Microsoft.AspNetCore.Http", IntegrationName="AspNetCore", MaximumVersion="2", MethodName="Build", MinimumVersion="2", ReturnTypeName="Microsoft.AspNetCore.Http.RequestDelegate", TypeName="Microsoft.AspNetCore.Builder.Internal.ApplicationBuilder")]
    [Datadog.Trace.ClrProfiler.InstrumentMethod(AssemblyName="Microsoft.AspNetCore.Http", IntegrationName="AspNetCore", MaximumVersion="6", MethodName="Build", MinimumVersion="3", ReturnTypeName="System.Void", TypeName="Microsoft.AspNetCore.Builder.ApplicationBuilder")]
    public static class AspNetCoreMiddlewareIntegration
    {
        public static Datadog.Trace.ClrProfiler.CallTarget.CallTargetState OnMethodBegin<TTarget>(TTarget instance) { }
    }
}
namespace Datadog.Trace.ClrProfiler.AutoInstrumentation.CosmosDb
{
    [Datadog.Trace.ClrProfiler.InstrumentMethod(AssemblyName="Microsoft.Azure.Cosmos.Client", IntegrationName="CosmosDb", MaximumVersion="3", MethodName="GetDatabaseQueryIterator", MinimumVersion="3.6.0", ParameterTypeNames=new string[] {
            "Microsoft.Azure.Cosmos.QueryDefinition",
            "System.String",
            "Microsoft.Azure.Cosmos.QueryRequestOptions"}, ReturnTypeName="Microsoft.Azure.Cosmos.FeedIterator`1<T>", TypeName="Microsoft.Azure.Cosmos.CosmosClient")]
    [Datadog.Trace.ClrProfiler.InstrumentMethod(AssemblyName="Microsoft.Azure.Cosmos.Client", IntegrationName="CosmosDb", MaximumVersion="3", MethodName="GetDatabaseQueryIterator", MinimumVersion="3.6.0", ParameterTypeNames=new string[] {
            "System.String",
            "System.String",
            "Microsoft.Azure.Cosmos.QueryRequestOptions"}, ReturnTypeName="Microsoft.Azure.Cosmos.FeedIterator`1<T>", TypeName="Microsoft.Azure.Cosmos.CosmosClient")]
    [Datadog.Trace.ClrProfiler.InstrumentMethod(AssemblyName="Microsoft.Azure.Cosmos.Client", IntegrationName="CosmosDb", MaximumVersion="3", MethodName="GetDatabaseQueryStreamIterator", MinimumVersion="3.6.0", ParameterTypeNames=new string[] {
            "Microsoft.Azure.Cosmos.QueryDefinition",
            "System.String",
            "Microsoft.Azure.Cosmos.QueryRequestOptions"}, ReturnTypeName="Microsoft.Azure.Cosmos.FeedIterator`1<T>", TypeName="Microsoft.Azure.Cosmos.CosmosClient")]
    [Datadog.Trace.ClrProfiler.InstrumentMethod(AssemblyName="Microsoft.Azure.Cosmos.Client", IntegrationName="CosmosDb", MaximumVersion="3", MethodName="GetDatabaseQueryStreamIterator", MinimumVersion="3.6.0", ParameterTypeNames=new string[] {
            "System.String",
            "System.String",
            "Microsoft.Azure.Cosmos.QueryRequestOptions"}, ReturnTypeName="Microsoft.Azure.Cosmos.FeedIterator`1<T>", TypeName="Microsoft.Azure.Cosmos.CosmosClient")]
    public class ClientQueryIteratorsIntegrations
    {
        public ClientQueryIteratorsIntegrations() { }
        public static Datadog.Trace.ClrProfiler.CallTarget.CallTargetState OnMethodBegin<TTarget, TQueryDefinition, TQueryRequestOptions>(TTarget instance, TQueryDefinition queryDefinition, string cancellationToken, TQueryRequestOptions queryRequestOptions) { }
        public static Datadog.Trace.ClrProfiler.CallTarget.CallTargetReturn<TReturn> OnMethodEnd<TTarget, TReturn>(TTarget instance, TReturn returnValue, System.Exception exception, Datadog.Trace.ClrProfiler.CallTarget.CallTargetState state) { }
    }
    [Datadog.Trace.DuckTyping.DuckCopy]
    public struct ContainerNewStruct
    {
        [Datadog.Trace.DuckTyping.Duck(BindingFlags=System.Reflection.BindingFlags.Default | System.Reflection.BindingFlags.IgnoreCase | System.Reflection.BindingFlags.Instance | System.Reflection.BindingFlags.Static | System.Reflection.BindingFlags.Public | System.Reflection.BindingFlags.NonPublic | System.Reflection.BindingFlags.FlattenHierarchy)]
        public Datadog.Trace.ClrProfiler.AutoInstrumentation.CosmosDb.DatabaseNewStruct Database;
        [Datadog.Trace.DuckTyping.Duck(BindingFlags=System.Reflection.BindingFlags.Default | System.Reflection.BindingFlags.IgnoreCase | System.Reflection.BindingFlags.Instance | System.Reflection.BindingFlags.Static | System.Reflection.BindingFlags.Public | System.Reflection.BindingFlags.NonPublic | System.Reflection.BindingFlags.FlattenHierarchy)]
        public string Id;
    }
    [Datadog.Trace.DuckTyping.DuckCopy]
    public struct ContainerOldStruct
    {
        [Datadog.Trace.DuckTyping.Duck(BindingFlags=System.Reflection.BindingFlags.Default | System.Reflection.BindingFlags.IgnoreCase | System.Reflection.BindingFlags.Instance | System.Reflection.BindingFlags.Static | System.Reflection.BindingFlags.Public | System.Reflection.BindingFlags.NonPublic | System.Reflection.BindingFlags.FlattenHierarchy)]
        public Datadog.Trace.ClrProfiler.AutoInstrumentation.CosmosDb.DatabaseOldStruct Database;
        [Datadog.Trace.DuckTyping.Duck(BindingFlags=System.Reflection.BindingFlags.Default | System.Reflection.BindingFlags.IgnoreCase | System.Reflection.BindingFlags.Instance | System.Reflection.BindingFlags.Static | System.Reflection.BindingFlags.Public | System.Reflection.BindingFlags.NonPublic | System.Reflection.BindingFlags.FlattenHierarchy)]
        public string Id;
    }
    [Datadog.Trace.ClrProfiler.InstrumentMethod(AssemblyName="Microsoft.Azure.Cosmos.Client", IntegrationName="CosmosDb", MaximumVersion="3", MethodName="GetItemQueryIterator", MinimumVersion="3.6.0", ParameterTypeNames=new string[] {
            "Microsoft.Azure.Cosmos.QueryDefinition",
            "System.String",
            "Microsoft.Azure.Cosmos.QueryRequestOptions"}, ReturnTypeName="Microsoft.Azure.Cosmos.FeedIterator`1<T>", TypeName="Microsoft.Azure.Cosmos.ContainerCore")]
    [Datadog.Trace.ClrProfiler.InstrumentMethod(AssemblyName="Microsoft.Azure.Cosmos.Client", IntegrationName="CosmosDb", MaximumVersion="3", MethodName="GetItemQueryIterator", MinimumVersion="3.6.0", ParameterTypeNames=new string[] {
            "System.String",
            "System.String",
            "Microsoft.Azure.Cosmos.QueryRequestOptions"}, ReturnTypeName="Microsoft.Azure.Cosmos.FeedIterator`1<T>", TypeName="Microsoft.Azure.Cosmos.ContainerCore")]
    [Datadog.Trace.ClrProfiler.InstrumentMethod(AssemblyName="Microsoft.Azure.Cosmos.Client", IntegrationName="CosmosDb", MaximumVersion="3", MethodName="GetItemQueryStreamIterator", MinimumVersion="3.6.0", ParameterTypeNames=new string[] {
            "Microsoft.Azure.Cosmos.QueryDefinition",
            "System.String",
            "Microsoft.Azure.Cosmos.QueryRequestOptions"}, ReturnTypeName="Microsoft.Azure.Cosmos.FeedIterator`1<T>", TypeName="Microsoft.Azure.Cosmos.ContainerCore")]
    [Datadog.Trace.ClrProfiler.InstrumentMethod(AssemblyName="Microsoft.Azure.Cosmos.Client", IntegrationName="CosmosDb", MaximumVersion="3", MethodName="GetItemQueryStreamIterator", MinimumVersion="3.6.0", ParameterTypeNames=new string[] {
            "System.String",
            "System.String",
            "Microsoft.Azure.Cosmos.QueryRequestOptions"}, ReturnTypeName="Microsoft.Azure.Cosmos.FeedIterator`1<T>", TypeName="Microsoft.Azure.Cosmos.ContainerCore")]
    public class ContainerQueryIteratorsIntegrations
    {
        public ContainerQueryIteratorsIntegrations() { }
        public static Datadog.Trace.ClrProfiler.CallTarget.CallTargetState OnMethodBegin<TTarget, TQueryDefinition, TQueryRequestOptions>(TTarget instance, TQueryDefinition queryDefinition, string cancellationToken, TQueryRequestOptions queryRequestOptions) { }
        public static Datadog.Trace.ClrProfiler.CallTarget.CallTargetReturn<TReturn> OnMethodEnd<TTarget, TReturn>(TTarget instance, TReturn returnValue, System.Exception exception, Datadog.Trace.ClrProfiler.CallTarget.CallTargetState state) { }
    }
    [Datadog.Trace.DuckTyping.DuckCopy]
    public struct CosmosClientStruct
    {
        [Datadog.Trace.DuckTyping.Duck(BindingFlags=System.Reflection.BindingFlags.Default | System.Reflection.BindingFlags.IgnoreCase | System.Reflection.BindingFlags.Instance | System.Reflection.BindingFlags.Static | System.Reflection.BindingFlags.Public | System.Reflection.BindingFlags.NonPublic | System.Reflection.BindingFlags.FlattenHierarchy)]
        public System.Uri Endpoint;
    }
    [Datadog.Trace.DuckTyping.DuckCopy]
    public struct CosmosContextClientStruct
    {
        [Datadog.Trace.DuckTyping.Duck(BindingFlags=System.Reflection.BindingFlags.Default | System.Reflection.BindingFlags.IgnoreCase | System.Reflection.BindingFlags.Instance | System.Reflection.BindingFlags.Static | System.Reflection.BindingFlags.Public | System.Reflection.BindingFlags.NonPublic | System.Reflection.BindingFlags.FlattenHierarchy)]
        public Datadog.Trace.ClrProfiler.AutoInstrumentation.CosmosDb.CosmosClientStruct Client;
    }
    [Datadog.Trace.DuckTyping.DuckCopy]
    public struct DatabaseNewStruct
    {
        [Datadog.Trace.DuckTyping.Duck(BindingFlags=System.Reflection.BindingFlags.Default | System.Reflection.BindingFlags.IgnoreCase | System.Reflection.BindingFlags.Instance | System.Reflection.BindingFlags.Static | System.Reflection.BindingFlags.Public | System.Reflection.BindingFlags.NonPublic | System.Reflection.BindingFlags.FlattenHierarchy)]
        public Datadog.Trace.ClrProfiler.AutoInstrumentation.CosmosDb.CosmosClientStruct Client;
        [Datadog.Trace.DuckTyping.Duck(BindingFlags=System.Reflection.BindingFlags.Default | System.Reflection.BindingFlags.IgnoreCase | System.Reflection.BindingFlags.Instance | System.Reflection.BindingFlags.Static | System.Reflection.BindingFlags.Public | System.Reflection.BindingFlags.NonPublic | System.Reflection.BindingFlags.FlattenHierarchy)]
        public string Id;
    }
    [Datadog.Trace.DuckTyping.DuckCopy]
    public struct DatabaseOldStruct
    {
        [Datadog.Trace.DuckTyping.Duck(BindingFlags=System.Reflection.BindingFlags.Default | System.Reflection.BindingFlags.IgnoreCase | System.Reflection.BindingFlags.Instance | System.Reflection.BindingFlags.Static | System.Reflection.BindingFlags.Public | System.Reflection.BindingFlags.NonPublic | System.Reflection.BindingFlags.FlattenHierarchy)]
        public Datadog.Trace.ClrProfiler.AutoInstrumentation.CosmosDb.CosmosContextClientStruct ClientContext;
        [Datadog.Trace.DuckTyping.Duck(BindingFlags=System.Reflection.BindingFlags.Default | System.Reflection.BindingFlags.IgnoreCase | System.Reflection.BindingFlags.Instance | System.Reflection.BindingFlags.Static | System.Reflection.BindingFlags.Public | System.Reflection.BindingFlags.NonPublic | System.Reflection.BindingFlags.FlattenHierarchy)]
        public string Id;
    }
    [Datadog.Trace.ClrProfiler.InstrumentMethod(AssemblyName="Microsoft.Azure.Cosmos.Client", IntegrationName="CosmosDb", MaximumVersion="3", MethodName="GetContainerQueryIterator", MinimumVersion="3.6.0", ParameterTypeNames=new string[] {
            "Microsoft.Azure.Cosmos.QueryDefinition",
            "System.String",
            "Microsoft.Azure.Cosmos.QueryRequestOptions"}, ReturnTypeName="Microsoft.Azure.Cosmos.FeedIterator`1<T>", TypeName="Microsoft.Azure.Cosmos.DatabaseCore")]
    [Datadog.Trace.ClrProfiler.InstrumentMethod(AssemblyName="Microsoft.Azure.Cosmos.Client", IntegrationName="CosmosDb", MaximumVersion="3", MethodName="GetContainerQueryIterator", MinimumVersion="3.6.0", ParameterTypeNames=new string[] {
            "System.String",
            "System.String",
            "Microsoft.Azure.Cosmos.QueryRequestOptions"}, ReturnTypeName="Microsoft.Azure.Cosmos.FeedIterator`1<T>", TypeName="Microsoft.Azure.Cosmos.DatabaseCore")]
    [Datadog.Trace.ClrProfiler.InstrumentMethod(AssemblyName="Microsoft.Azure.Cosmos.Client", IntegrationName="CosmosDb", MaximumVersion="3", MethodName="GetContainerQueryStreamIterator", MinimumVersion="3.6.0", ParameterTypeNames=new string[] {
            "Microsoft.Azure.Cosmos.QueryDefinition",
            "System.String",
            "Microsoft.Azure.Cosmos.QueryRequestOptions"}, ReturnTypeName="Microsoft.Azure.Cosmos.FeedIterator`1<T>", TypeName="Microsoft.Azure.Cosmos.DatabaseCore")]
    [Datadog.Trace.ClrProfiler.InstrumentMethod(AssemblyName="Microsoft.Azure.Cosmos.Client", IntegrationName="CosmosDb", MaximumVersion="3", MethodName="GetContainerQueryStreamIterator", MinimumVersion="3.6.0", ParameterTypeNames=new string[] {
            "System.String",
            "System.String",
            "Microsoft.Azure.Cosmos.QueryRequestOptions"}, ReturnTypeName="Microsoft.Azure.Cosmos.FeedIterator`1<T>", TypeName="Microsoft.Azure.Cosmos.DatabaseCore")]
    [Datadog.Trace.ClrProfiler.InstrumentMethod(AssemblyName="Microsoft.Azure.Cosmos.Client", IntegrationName="CosmosDb", MaximumVersion="3", MethodName="GetUserQueryIterator", MinimumVersion="3.6.0", ParameterTypeNames=new string[] {
            "Microsoft.Azure.Cosmos.QueryDefinition",
            "System.String",
            "Microsoft.Azure.Cosmos.QueryRequestOptions"}, ReturnTypeName="Microsoft.Azure.Cosmos.FeedIterator`1<T>", TypeName="Microsoft.Azure.Cosmos.DatabaseCore")]
    [Datadog.Trace.ClrProfiler.InstrumentMethod(AssemblyName="Microsoft.Azure.Cosmos.Client", IntegrationName="CosmosDb", MaximumVersion="3", MethodName="GetUserQueryIterator", MinimumVersion="3.6.0", ParameterTypeNames=new string[] {
            "System.String",
            "System.String",
            "Microsoft.Azure.Cosmos.QueryRequestOptions"}, ReturnTypeName="Microsoft.Azure.Cosmos.FeedIterator`1<T>", TypeName="Microsoft.Azure.Cosmos.DatabaseCore")]
    public class DatabaseQueryIteratorsIntegrations
    {
        public DatabaseQueryIteratorsIntegrations() { }
        public static Datadog.Trace.ClrProfiler.CallTarget.CallTargetState OnMethodBegin<TTarget, TQueryDefinition, TQueryRequestOptions>(TTarget instance, TQueryDefinition queryDefinition, string cancellationToken, TQueryRequestOptions queryRequestOptions) { }
        public static Datadog.Trace.ClrProfiler.CallTarget.CallTargetReturn<TReturn> OnMethodEnd<TTarget, TReturn>(TTarget instance, TReturn returnValue, System.Exception exception, Datadog.Trace.ClrProfiler.CallTarget.CallTargetState state) { }
    }
    [Datadog.Trace.DuckTyping.DuckCopy]
    public struct QueryDefinitionStruct
    {
        [Datadog.Trace.DuckTyping.Duck(BindingFlags=System.Reflection.BindingFlags.Default | System.Reflection.BindingFlags.IgnoreCase | System.Reflection.BindingFlags.Instance | System.Reflection.BindingFlags.Static | System.Reflection.BindingFlags.Public | System.Reflection.BindingFlags.NonPublic | System.Reflection.BindingFlags.FlattenHierarchy)]
        public string QueryText;
    }
}
namespace Datadog.Trace.ClrProfiler.AutoInstrumentation.Elasticsearch
{
    public enum HttpMethod
    {
        GET = 0,
        POST = 1,
        PUT = 2,
        DELETE = 3,
        HEAD = 4,
    }
    public interface IRequestData
    {
        string Method { get; }
        string Path { get; }
        System.Uri Uri { get; }
    }
    [Datadog.Trace.DuckTyping.DuckCopy]
    public struct RequestPipelineStruct
    {
        public object RequestParameters;
    }
}
namespace Datadog.Trace.ClrProfiler.AutoInstrumentation.Elasticsearch.V5
{
    public struct RequestDataV5 : Datadog.Trace.ClrProfiler.AutoInstrumentation.Elasticsearch.IRequestData
    {
        public RequestDataV5(object source) { }
        public string Method { get; }
        public string Path { get; }
        public System.Uri Uri { get; }
        [Datadog.Trace.DuckTyping.DuckCopy]
        public struct Proxy
        {
            public Datadog.Trace.ClrProfiler.AutoInstrumentation.Elasticsearch.HttpMethod Method;
            public string Path;
            public System.Uri Uri;
        }
    }
    [Datadog.Trace.ClrProfiler.InstrumentMethod(AssemblyName="Elasticsearch.Net", IntegrationName="ElasticsearchNet5", MaximumVersion="5", MethodName="CallElasticsearchAsync", MinimumVersion="5", ParameterTypeNames=new string[] {
            "Elasticsearch.Net.RequestData",
            "System.Threading.CancellationToken"}, ReturnTypeName="System.Threading.Tasks.Task`1<Elasticsearch.Net.ElasticsearchResponse`1<T>>", TypeName="Elasticsearch.Net.RequestPipeline")]
    public class RequestPipeline_CallElasticsearchAsync_Integration
    {
        public RequestPipeline_CallElasticsearchAsync_Integration() { }
        public static TExecutionResult OnAsyncMethodEnd<TTarget, TExecutionResult>(TTarget instance, TExecutionResult executionResult, System.Exception exception, Datadog.Trace.ClrProfiler.CallTarget.CallTargetState state) { }
        public static Datadog.Trace.ClrProfiler.CallTarget.CallTargetState OnMethodBegin<TTarget, TRequestData>(TTarget instance, TRequestData requestData, System.Threading.CancellationToken cancellationToken) { }
    }
    [Datadog.Trace.ClrProfiler.InstrumentMethod(AssemblyName="Elasticsearch.Net", IntegrationName="ElasticsearchNet5", MaximumVersion="5", MethodName="CallElasticsearch", MinimumVersion="5", ParameterTypeNames=new string[] {
            "Elasticsearch.Net.RequestData"}, ReturnTypeName="Elasticsearch.Net.ElasticsearchResponse`1<T>", TypeName="Elasticsearch.Net.RequestPipeline")]
    public class RequestPipeline_CallElasticsearch_Integration
    {
        public RequestPipeline_CallElasticsearch_Integration() { }
        public static Datadog.Trace.ClrProfiler.CallTarget.CallTargetState OnMethodBegin<TTarget, TRequestData>(TTarget instance, TRequestData requestData) { }
        public static Datadog.Trace.ClrProfiler.CallTarget.CallTargetReturn<TResponse> OnMethodEnd<TTarget, TResponse>(TTarget instance, TResponse response, System.Exception exception, Datadog.Trace.ClrProfiler.CallTarget.CallTargetState state) { }
    }
}
namespace Datadog.Trace.ClrProfiler.AutoInstrumentation.Elasticsearch.V6
{
    public struct RequestDataV6 : Datadog.Trace.ClrProfiler.AutoInstrumentation.Elasticsearch.IRequestData
    {
        public RequestDataV6(object source) { }
        public string Method { get; }
        public string Path { get; }
        public System.Uri Uri { get; }
        [Datadog.Trace.DuckTyping.DuckCopy]
        public struct Proxy
        {
            public Datadog.Trace.ClrProfiler.AutoInstrumentation.Elasticsearch.HttpMethod Method;
            public string PathAndQuery;
            public System.Uri Uri;
        }
    }
    [Datadog.Trace.ClrProfiler.InstrumentMethod(AssemblyName="Elasticsearch.Net", IntegrationName="ElasticsearchNet", MaximumVersion="6", MethodName="CallElasticsearchAsync", MinimumVersion="6", ParameterTypeNames=new string[] {
            "Elasticsearch.Net.RequestData",
            "System.Threading.CancellationToken"}, ReturnTypeName="System.Threading.Tasks.Task`1<T>", TypeName="Elasticsearch.Net.RequestPipeline")]
    public class RequestPipeline_CallElasticsearchAsync_Integration
    {
        public RequestPipeline_CallElasticsearchAsync_Integration() { }
        public static TExecutionResult OnAsyncMethodEnd<TTarget, TExecutionResult>(TTarget instance, TExecutionResult executionResult, System.Exception exception, Datadog.Trace.ClrProfiler.CallTarget.CallTargetState state) { }
        public static Datadog.Trace.ClrProfiler.CallTarget.CallTargetState OnMethodBegin<TTarget, TRequestData>(TTarget instance, TRequestData requestData, System.Threading.CancellationToken cancellationToken) { }
    }
    [Datadog.Trace.ClrProfiler.InstrumentMethod(AssemblyName="Elasticsearch.Net", IntegrationName="ElasticsearchNet", MaximumVersion="6", MethodName="CallElasticsearch", MinimumVersion="6", ParameterTypeNames=new string[] {
            "Elasticsearch.Net.RequestData"}, ReturnTypeName="T", TypeName="Elasticsearch.Net.RequestPipeline")]
    public class RequestPipeline_CallElasticsearch_Integration
    {
        public RequestPipeline_CallElasticsearch_Integration() { }
        public static Datadog.Trace.ClrProfiler.CallTarget.CallTargetState OnMethodBegin<TTarget, TRequestData>(TTarget instance, TRequestData requestData) { }
        public static Datadog.Trace.ClrProfiler.CallTarget.CallTargetReturn<TResponse> OnMethodEnd<TTarget, TResponse>(TTarget instance, TResponse response, System.Exception exception, Datadog.Trace.ClrProfiler.CallTarget.CallTargetState state) { }
    }
}
namespace Datadog.Trace.ClrProfiler.AutoInstrumentation.GraphQL
{
    [Datadog.Trace.DuckTyping.DuckCopy]
    public struct ErrorLocationStruct
    {
        public int Column;
        public int Line;
    }
    public class ExecuteAsyncIntegration
    {
        public ExecuteAsyncIntegration() { }
        public static TExecutionResult OnAsyncMethodEnd<TTarget, TExecutionResult>(TTarget instance, TExecutionResult executionResult, System.Exception exception, Datadog.Trace.ClrProfiler.CallTarget.CallTargetState state) { }
        public static Datadog.Trace.ClrProfiler.CallTarget.CallTargetState OnMethodBegin<TTarget, TContext>(TTarget instance, TContext context)
            where TContext : Datadog.Trace.ClrProfiler.AutoInstrumentation.GraphQL.IExecutionContext { }
    }
    public interface IDocument
    {
        string OriginalQuery { get; }
    }
    public interface IExecutionContext
    {
        Datadog.Trace.ClrProfiler.AutoInstrumentation.GraphQL.IDocument Document { get; }
        Datadog.Trace.ClrProfiler.AutoInstrumentation.GraphQL.IExecutionErrors Errors { get; }
        Datadog.Trace.ClrProfiler.AutoInstrumentation.GraphQL.IOperation Operation { get; }
    }
    public interface IExecutionError
    {
        string Code { get; }
        System.Collections.Generic.IEnumerable<object> Locations { get; }
        string Message { get; }
        System.Collections.Generic.IEnumerable<string> Path { get; }
    }
    public interface IExecutionErrors
    {
        int Count { get; }
        Datadog.Trace.ClrProfiler.AutoInstrumentation.GraphQL.IExecutionError this[int index] { get; }
    }
    public interface IOperation
    {
        string Name { get; }
        Datadog.Trace.ClrProfiler.AutoInstrumentation.GraphQL.OperationTypeProxy OperationType { get; }
    }
    public interface IValidationResult
    {
        Datadog.Trace.ClrProfiler.AutoInstrumentation.GraphQL.IExecutionErrors Errors { get; }
    }
    public enum OperationTypeProxy
    {
        Query = 0,
        Mutation = 1,
        Subscription = 2,
    }
    [Datadog.Trace.ClrProfiler.InstrumentMethod(AssemblyName="GraphQL", IntegrationName="GraphQL", MaximumVersion="2", MethodName="Validate", MinimumVersion="2.3", ParameterTypeNames=new string[] {
            "System.String",
            "GraphQL.Types.ISchema",
            "GraphQL.Language.AST.Document",
            "System.Collections.Generic.IEnumerable`1[GraphQL.Validation.IValidationRule]",
            "_",
            "GraphQL.Inputs"}, ReturnTypeName="GraphQL.Validation.IValidationResult", TypeName="GraphQL.Validation.DocumentValidator")]
    public class ValidateIntegration
    {
        public ValidateIntegration() { }
        public static Datadog.Trace.ClrProfiler.CallTarget.CallTargetState OnMethodBegin<TTarget, TSchema, TDocument, TRules, TUserContext, TInputs>(TTarget instance, string originalQuery, TSchema schema, TDocument document, TRules rules, TUserContext userContext, TInputs inputs)
            where TDocument : Datadog.Trace.ClrProfiler.AutoInstrumentation.GraphQL.IDocument { }
        public static Datadog.Trace.ClrProfiler.CallTarget.CallTargetReturn<TValidationResult> OnMethodEnd<TTarget, TValidationResult>(TTarget instance, TValidationResult validationResult, System.Exception exception, Datadog.Trace.ClrProfiler.CallTarget.CallTargetState state)
            where TValidationResult : Datadog.Trace.ClrProfiler.AutoInstrumentation.GraphQL.IValidationResult { }
    }
}
namespace Datadog.Trace.ClrProfiler.AutoInstrumentation.Http.HttpClient.CurlHandler
{
    [Datadog.Trace.ClrProfiler.InstrumentMethod(AssemblyName="System.Net.Http", IntegrationName="HttpMessageHandler", MaximumVersion="4.*.*", MethodName="SendAsync", MinimumVersion="4.0.0", ParameterTypeNames=new string[] {
            "System.Net.Http.HttpRequestMessage",
            "System.Threading.CancellationToken"}, ReturnTypeName="System.Threading.Tasks.Task`1<System.Net.Http.HttpResponseMessage>", TypeName="System.Net.Http.CurlHandler")]
    public class CurlHandlerIntegration
    {
        public CurlHandlerIntegration() { }
        public static TResponse OnAsyncMethodEnd<TTarget, TResponse>(TTarget instance, TResponse responseMessage, System.Exception exception, Datadog.Trace.ClrProfiler.CallTarget.CallTargetState state)
            where TResponse : Datadog.Trace.ClrProfiler.AutoInstrumentation.Http.HttpClient.IHttpResponseMessage { }
        public static Datadog.Trace.ClrProfiler.CallTarget.CallTargetState OnMethodBegin<TTarget, TRequest>(TTarget instance, TRequest requestMessage, System.Threading.CancellationToken cancellationToken)
            where TRequest : Datadog.Trace.ClrProfiler.AutoInstrumentation.Http.HttpClient.IHttpRequestMessage { }
    }
}
namespace Datadog.Trace.ClrProfiler.AutoInstrumentation.Http.HttpClient.HttpClientHandler
{
    [Datadog.Trace.ClrProfiler.InstrumentMethod(AssemblyName="System.Net.Http", IntegrationName="HttpMessageHandler", MaximumVersion="5.*.*", MethodName="SendAsync", MinimumVersion="4.0.0", ParameterTypeNames=new string[] {
            "System.Net.Http.HttpRequestMessage",
            "System.Threading.CancellationToken"}, ReturnTypeName="System.Threading.Tasks.Task`1<System.Net.Http.HttpResponseMessage>", TypeName="System.Net.Http.HttpClientHandler")]
    public class HttpClientHandlerIntegration
    {
        public HttpClientHandlerIntegration() { }
        public static TResponse OnAsyncMethodEnd<TTarget, TResponse>(TTarget instance, TResponse responseMessage, System.Exception exception, Datadog.Trace.ClrProfiler.CallTarget.CallTargetState state)
            where TResponse : Datadog.Trace.ClrProfiler.AutoInstrumentation.Http.HttpClient.IHttpResponseMessage { }
        public static Datadog.Trace.ClrProfiler.CallTarget.CallTargetState OnMethodBegin<TTarget, TRequest>(TTarget instance, TRequest requestMessage, System.Threading.CancellationToken cancellationToken)
            where TRequest : Datadog.Trace.ClrProfiler.AutoInstrumentation.Http.HttpClient.IHttpRequestMessage { }
    }
    [Datadog.Trace.ClrProfiler.InstrumentMethod(AssemblyName="System.Net.Http", IntegrationName="HttpMessageHandler", MaximumVersion="5.*.*", MethodName="Send", MinimumVersion="5.0.0", ParameterTypeNames=new string[] {
            "System.Net.Http.HttpRequestMessage",
            "System.Threading.CancellationToken"}, ReturnTypeName="System.Net.Http.HttpResponseMessage", TypeName="System.Net.Http.HttpClientHandler")]
    public class HttpClientHandlerSyncIntegration
    {
        public HttpClientHandlerSyncIntegration() { }
        public static Datadog.Trace.ClrProfiler.CallTarget.CallTargetState OnMethodBegin<TTarget, TRequest>(TTarget instance, TRequest requestMessage, System.Threading.CancellationToken cancellationToken)
            where TRequest : Datadog.Trace.ClrProfiler.AutoInstrumentation.Http.HttpClient.IHttpRequestMessage { }
        public static Datadog.Trace.ClrProfiler.CallTarget.CallTargetReturn<TResponse> OnMethodEnd<TTarget, TResponse>(TTarget instance, TResponse responseMessage, System.Exception exception, Datadog.Trace.ClrProfiler.CallTarget.CallTargetState state)
            where TResponse : Datadog.Trace.ClrProfiler.AutoInstrumentation.Http.HttpClient.IHttpResponseMessage { }
    }
}
namespace Datadog.Trace.ClrProfiler.AutoInstrumentation.Http.HttpClient
{
    [Datadog.Trace.DuckTyping.DuckCopy]
    public struct HttpMethodStruct
    {
        public string Method;
    }
    public interface IHttpRequestMessage : Datadog.Trace.DuckTyping.IDuckType
    {
        Datadog.Trace.ClrProfiler.AutoInstrumentation.Http.HttpClient.IRequestHeaders Headers { get; }
        Datadog.Trace.ClrProfiler.AutoInstrumentation.Http.HttpClient.HttpMethodStruct Method { get; }
        System.Uri RequestUri { get; }
    }
    public interface IHttpResponseMessage : Datadog.Trace.DuckTyping.IDuckType
    {
        int StatusCode { get; }
    }
    public interface IRequestHeaders
    {
        void Add(string name, string value);
        bool Remove(string name);
        bool TryGetValues(string name, out System.Collections.Generic.IEnumerable<string> values);
    }
}
namespace Datadog.Trace.ClrProfiler.AutoInstrumentation.Http.HttpClient.SocketsHttpHandler
{
    [Datadog.Trace.ClrProfiler.InstrumentMethod(AssemblyName="System.Net.Http", IntegrationName="HttpMessageHandler", MaximumVersion="5.*.*", MethodName="SendAsync", MinimumVersion="4.0.0", ParameterTypeNames=new string[] {
            "System.Net.Http.HttpRequestMessage",
            "System.Threading.CancellationToken"}, ReturnTypeName="System.Threading.Tasks.Task`1<System.Net.Http.HttpResponseMessage>", TypeName="System.Net.Http.SocketsHttpHandler")]
    public class SocketsHttpHandlerIntegration
    {
        public SocketsHttpHandlerIntegration() { }
        public static TResponse OnAsyncMethodEnd<TTarget, TResponse>(TTarget instance, TResponse responseMessage, System.Exception exception, Datadog.Trace.ClrProfiler.CallTarget.CallTargetState state)
            where TResponse : Datadog.Trace.ClrProfiler.AutoInstrumentation.Http.HttpClient.IHttpResponseMessage { }
        public static Datadog.Trace.ClrProfiler.CallTarget.CallTargetState OnMethodBegin<TTarget, TRequest>(TTarget instance, TRequest requestMessage, System.Threading.CancellationToken cancellationToken)
            where TRequest : Datadog.Trace.ClrProfiler.AutoInstrumentation.Http.HttpClient.IHttpRequestMessage { }
    }
    [Datadog.Trace.ClrProfiler.InstrumentMethod(AssemblyName="System.Net.Http", IntegrationName="HttpMessageHandler", MaximumVersion="5.*.*", MethodName="Send", MinimumVersion="5.0.0", ParameterTypeNames=new string[] {
            "System.Net.Http.HttpRequestMessage",
            "System.Threading.CancellationToken"}, ReturnTypeName="System.Net.Http.HttpResponseMessage", TypeName="System.Net.Http.SocketsHttpHandler")]
    public class SocketsHttpHandlerSyncIntegration
    {
        public SocketsHttpHandlerSyncIntegration() { }
        public static Datadog.Trace.ClrProfiler.CallTarget.CallTargetState OnMethodBegin<TTarget, TRequest>(TTarget instance, TRequest requestMessage, System.Threading.CancellationToken cancellationToken)
            where TRequest : Datadog.Trace.ClrProfiler.AutoInstrumentation.Http.HttpClient.IHttpRequestMessage { }
        public static Datadog.Trace.ClrProfiler.CallTarget.CallTargetReturn<TResponse> OnMethodEnd<TTarget, TResponse>(TTarget instance, TResponse responseMessage, System.Exception exception, Datadog.Trace.ClrProfiler.CallTarget.CallTargetState state)
            where TResponse : Datadog.Trace.ClrProfiler.AutoInstrumentation.Http.HttpClient.IHttpResponseMessage { }
    }
}
namespace Datadog.Trace.ClrProfiler.AutoInstrumentation.Http.HttpClient.WinHttpHandler
{
    [Datadog.Trace.ClrProfiler.InstrumentMethod(AssemblyNames=new string[] {
            "System.Net.Http",
            "System.Net.Http.WinHttpHandler"}, IntegrationName="HttpMessageHandler", MaximumVersion="5.*.*", MethodName="SendAsync", MinimumVersion="4.0.0", ParameterTypeNames=new string[] {
            "System.Net.Http.HttpRequestMessage",
            "System.Threading.CancellationToken"}, ReturnTypeName="System.Threading.Tasks.Task`1<System.Net.Http.HttpResponseMessage>", TypeName="System.Net.Http.WinHttpHandler")]
    public class WinHttpHandlerIntegration
    {
        public WinHttpHandlerIntegration() { }
        public static TResponse OnAsyncMethodEnd<TTarget, TResponse>(TTarget instance, TResponse responseMessage, System.Exception exception, Datadog.Trace.ClrProfiler.CallTarget.CallTargetState state)
            where TResponse : Datadog.Trace.ClrProfiler.AutoInstrumentation.Http.HttpClient.IHttpResponseMessage { }
        public static Datadog.Trace.ClrProfiler.CallTarget.CallTargetState OnMethodBegin<TTarget, TRequest>(TTarget instance, TRequest requestMessage, System.Threading.CancellationToken cancellationToken)
            where TRequest : Datadog.Trace.ClrProfiler.AutoInstrumentation.Http.HttpClient.IHttpRequestMessage { }
    }
}
namespace Datadog.Trace.ClrProfiler.AutoInstrumentation.Http.WebRequest
{
    [Datadog.Trace.ClrProfiler.InstrumentMethod(AssemblyName="System", IntegrationName="WebRequest", MaximumVersion="4", MethodName="BeginGetRequestStream", MinimumVersion="4", ParameterTypeNames=new string[] {
            "System.AsyncCallback",
            "System.Object"}, ReturnTypeName="System.IAsyncResult", TypeName="System.Net.HttpWebRequest")]
    [Datadog.Trace.ClrProfiler.InstrumentMethod(AssemblyName="System.Net.Requests", IntegrationName="WebRequest", MaximumVersion="5", MethodName="BeginGetRequestStream", MinimumVersion="4", ParameterTypeNames=new string[] {
            "System.AsyncCallback",
            "System.Object"}, ReturnTypeName="System.IAsyncResult", TypeName="System.Net.HttpWebRequest")]
    public class HttpWebRequest_BeginGetRequestStream_Integration
    {
        public HttpWebRequest_BeginGetRequestStream_Integration() { }
        public static Datadog.Trace.ClrProfiler.CallTarget.CallTargetState OnMethodBegin<TTarget>(TTarget instance, System.AsyncCallback callback, object state) { }
    }
    [Datadog.Trace.ClrProfiler.InstrumentMethod(AssemblyName="System", IntegrationName="WebRequest", MaximumVersion="4", MethodName="BeginGetResponse", MinimumVersion="4", ParameterTypeNames=new string[] {
            "System.AsyncCallback",
            "System.Object"}, ReturnTypeName="System.IAsyncResult", TypeName="System.Net.HttpWebRequest")]
    public class HttpWebRequest_BeginGetResponse_Integration
    {
        public HttpWebRequest_BeginGetResponse_Integration() { }
        public static Datadog.Trace.ClrProfiler.CallTarget.CallTargetState OnMethodBegin<TTarget>(TTarget instance, System.AsyncCallback callback, object state) { }
    }
    [Datadog.Trace.ClrProfiler.InstrumentMethod(AssemblyName="System", IntegrationName="WebRequest", MaximumVersion="4", MethodName="EndGetResponse", MinimumVersion="4", ParameterTypeNames=new string[] {
            "System.IAsyncResult"}, ReturnTypeName="System.Net.WebResponse", TypeName="System.Net.HttpWebRequest")]
    public class HttpWebRequest_EndGetResponse_Integration
    {
        public HttpWebRequest_EndGetResponse_Integration() { }
        public static Datadog.Trace.ClrProfiler.CallTarget.CallTargetReturn<TReturn> OnMethodEnd<TTarget, TReturn>(TTarget instance, TReturn returnValue, System.Exception exception, Datadog.Trace.ClrProfiler.CallTarget.CallTargetState state)
            where TTarget : Datadog.Trace.ClrProfiler.AutoInstrumentation.Http.WebRequest.IHttpWebRequest, Datadog.Trace.DuckTyping.IDuckType { }
    }
    [Datadog.Trace.ClrProfiler.InstrumentMethod(AssemblyName="System", IntegrationName="WebRequest", MaximumVersion="4", MethodName="GetRequestStream", MinimumVersion="4", ReturnTypeName="System.IO.Stream", TypeName="System.Net.HttpWebRequest")]
    [Datadog.Trace.ClrProfiler.InstrumentMethod(AssemblyName="System.Net.Requests", IntegrationName="WebRequest", MaximumVersion="5", MethodName="GetRequestStream", MinimumVersion="4", ReturnTypeName="System.IO.Stream", TypeName="System.Net.HttpWebRequest")]
    public class HttpWebRequest_GetRequestStream_Integration
    {
        public HttpWebRequest_GetRequestStream_Integration() { }
        public static Datadog.Trace.ClrProfiler.CallTarget.CallTargetState OnMethodBegin<TTarget>(TTarget instance) { }
    }
    [Datadog.Trace.ClrProfiler.InstrumentMethod(AssemblyName="System", IntegrationName="WebRequest", MaximumVersion="4", MethodName="GetResponse", MinimumVersion="4", ReturnTypeName="System.Net.WebResponse", TypeName="System.Net.HttpWebRequest")]
    [Datadog.Trace.ClrProfiler.InstrumentMethod(AssemblyName="System.Net.Requests", IntegrationName="WebRequest", MaximumVersion="5", MethodName="GetResponse", MinimumVersion="4", ReturnTypeName="System.Net.WebResponse", TypeName="System.Net.HttpWebRequest")]
    public class HttpWebRequest_GetResponse_Integration
    {
        public HttpWebRequest_GetResponse_Integration() { }
        public static Datadog.Trace.ClrProfiler.CallTarget.CallTargetState OnMethodBegin<TTarget>(TTarget instance) { }
        public static Datadog.Trace.ClrProfiler.CallTarget.CallTargetReturn<TReturn> OnMethodEnd<TTarget, TReturn>(TTarget instance, TReturn returnValue, System.Exception exception, Datadog.Trace.ClrProfiler.CallTarget.CallTargetState state) { }
    }
    public interface IHttpWebRequest
    {
        [Datadog.Trace.DuckTyping.Duck(Kind=Datadog.Trace.DuckTyping.DuckKind.Field, Name="m_StartTimestamp")]
        long RequestStartTicks { get; }
    }
    [Datadog.Trace.ClrProfiler.InstrumentMethod(AssemblyName="System", IntegrationName="WebRequest", MaximumVersion="4", MethodName="GetResponseAsync", MinimumVersion="4", ReturnTypeName="System.Threading.Tasks.Task`1<System.Net.WebResponse>", TypeName="System.Net.WebRequest")]
    [Datadog.Trace.ClrProfiler.InstrumentMethod(AssemblyName="System.Net.Requests", IntegrationName="WebRequest", MaximumVersion="5", MethodName="GetResponseAsync", MinimumVersion="4", ReturnTypeName="System.Threading.Tasks.Task`1<System.Net.WebResponse>", TypeName="System.Net.WebRequest")]
    public class WebRequest_GetResponseAsync_Integration
    {
        public WebRequest_GetResponseAsync_Integration() { }
        public static TReturn OnAsyncMethodEnd<TTarget, TReturn>(TTarget instance, TReturn returnValue, System.Exception exception, Datadog.Trace.ClrProfiler.CallTarget.CallTargetState state) { }
        public static Datadog.Trace.ClrProfiler.CallTarget.CallTargetState OnMethodBegin<TTarget>(TTarget instance) { }
    }
}
namespace Datadog.Trace.ClrProfiler.AutoInstrumentation.Kafka
{
    public interface IConsumeException
    {
        Datadog.Trace.ClrProfiler.AutoInstrumentation.Kafka.IConsumeResult ConsumerRecord { get; }
    }
    public interface IConsumeResult
    {
        bool IsPartitionEOF { get; }
        Datadog.Trace.ClrProfiler.AutoInstrumentation.Kafka.IMessage Message { get; }
        Datadog.Trace.ClrProfiler.AutoInstrumentation.Kafka.Offset Offset { get; }
        Datadog.Trace.ClrProfiler.AutoInstrumentation.Kafka.Partition Partition { get; }
        string Topic { get; }
    }
    public interface IDeliveryReport : Datadog.Trace.ClrProfiler.AutoInstrumentation.Kafka.IDeliveryResult
    {
        Datadog.Trace.ClrProfiler.AutoInstrumentation.Kafka.IError Error { get; }
    }
    public interface IDeliveryResult
    {
        Datadog.Trace.ClrProfiler.AutoInstrumentation.Kafka.Offset Offset { get; }
        Datadog.Trace.ClrProfiler.AutoInstrumentation.Kafka.Partition Partition { get; }
    }
    public interface IError
    {
        bool IsError { get; }
        string ToString();
    }
    public interface IHeaders
    {
        void Add(string key, byte[] val);
        void Remove(string key);
        bool TryGetLastBytes(string key, out byte[] lastHeader);
    }
    public interface IMessage
    {
        Datadog.Trace.ClrProfiler.AutoInstrumentation.Kafka.IHeaders Headers { get; set; }
        Datadog.Trace.ClrProfiler.AutoInstrumentation.Kafka.ITimestamp Timestamp { get; }
        object Value { get; }
    }
    public interface IProduceException
    {
        Datadog.Trace.ClrProfiler.AutoInstrumentation.Kafka.IDeliveryResult DeliveryResult { get; }
    }
    public interface ITimestamp
    {
        int Type { get; }
        System.DateTime UtcDateTime { get; }
    }
    public interface ITopicPartition
    {
        Datadog.Trace.ClrProfiler.AutoInstrumentation.Kafka.Partition Partition { get; }
        string Topic { get; }
    }
    public interface ITypedDeliveryHandlerShimAction
    {
        [Datadog.Trace.DuckTyping.Duck(Kind=Datadog.Trace.DuckTyping.DuckKind.Field)]
        object Handler { set; }
    }
    [Datadog.Trace.ClrProfiler.InstrumentMethod(AssemblyName="Confluent.Kafka", IntegrationName="Kafka", MaximumVersion="1.*.*", MethodName="Close", MinimumVersion="1.4.0", ParameterTypeNames=new string[0], ReturnTypeName="System.Void", TypeName="Confluent.Kafka.Consumer`2")]
    public class KafkaConsumerCloseIntegration
    {
        public KafkaConsumerCloseIntegration() { }
        public static Datadog.Trace.ClrProfiler.CallTarget.CallTargetState OnMethodBegin<TTarget>(TTarget instance) { }
        public static Datadog.Trace.ClrProfiler.CallTarget.CallTargetReturn OnMethodEnd<TTarget>(TTarget instance, System.Exception exception, Datadog.Trace.ClrProfiler.CallTarget.CallTargetState state) { }
    }
    [Datadog.Trace.ClrProfiler.InstrumentMethod(AssemblyName="Confluent.Kafka", IntegrationName="Kafka", MaximumVersion="1.*.*", MethodName="Consume", MinimumVersion="1.4.0", ParameterTypeNames=new string[] {
            "System.Int32"}, ReturnTypeName="Confluent.Kafka.ConsumeResult`2[!0,!1]", TypeName="Confluent.Kafka.Consumer`2")]
    public class KafkaConsumerConsumeIntegration
    {
        public KafkaConsumerConsumeIntegration() { }
        public static Datadog.Trace.ClrProfiler.CallTarget.CallTargetState OnMethodBegin<TTarget>(TTarget instance, int millisecondsTimeout) { }
        public static Datadog.Trace.ClrProfiler.CallTarget.CallTargetReturn<TResponse> OnMethodEnd<TTarget, TResponse>(TTarget instance, TResponse response, System.Exception exception, Datadog.Trace.ClrProfiler.CallTarget.CallTargetState state)
            where TResponse : Datadog.Trace.ClrProfiler.AutoInstrumentation.Kafka.IConsumeResult, Datadog.Trace.DuckTyping.IDuckType { }
    }
    [Datadog.Trace.ClrProfiler.InstrumentMethod(AssemblyName="Confluent.Kafka", IntegrationName="Kafka", MaximumVersion="1.*.*", MethodName="Dispose", MinimumVersion="1.4.0", ParameterTypeNames=new string[0], ReturnTypeName="System.Void", TypeName="Confluent.Kafka.Consumer`2")]
    public class KafkaConsumerDisposeIntegration
    {
        public KafkaConsumerDisposeIntegration() { }
        public static Datadog.Trace.ClrProfiler.CallTarget.CallTargetState OnMethodBegin<TTarget>(TTarget instance) { }
        public static Datadog.Trace.ClrProfiler.CallTarget.CallTargetReturn OnMethodEnd<TTarget>(TTarget instance, System.Exception exception, Datadog.Trace.ClrProfiler.CallTarget.CallTargetState state) { }
    }
    [Datadog.Trace.ClrProfiler.InstrumentMethod(AssemblyName="Confluent.Kafka", IntegrationName="Kafka", MaximumVersion="1.*.*", MethodName="Unsubscribe", MinimumVersion="1.4.0", ParameterTypeNames=new string[0], ReturnTypeName="System.Void", TypeName="Confluent.Kafka.Consumer`2")]
    public class KafkaConsumerUnsubscribeIntegration
    {
        public KafkaConsumerUnsubscribeIntegration() { }
        public static Datadog.Trace.ClrProfiler.CallTarget.CallTargetState OnMethodBegin<TTarget>(TTarget instance) { }
        public static Datadog.Trace.ClrProfiler.CallTarget.CallTargetReturn OnMethodEnd<TTarget>(TTarget instance, System.Exception exception, Datadog.Trace.ClrProfiler.CallTarget.CallTargetState state) { }
    }
    [Datadog.Trace.ClrProfiler.InstrumentMethod(AssemblyName="Confluent.Kafka", IntegrationName="Kafka", MaximumVersion="1.*.*", MethodName="ProduceAsync", MinimumVersion="1.4.0", ParameterTypeNames=new string[] {
            "Confluent.Kafka.TopicPartition",
            "Confluent.Kafka.Message`2[!0,!1]",
            "System.Threading.CancellationToken"}, ReturnTypeName="System.Threading.Tasks.Task`1[Confluent.Kafka.DeliveryReport`2[!0,!1]]", TypeName="Confluent.Kafka.Producer`2")]
    public class KafkaProduceAsyncIntegration
    {
        public KafkaProduceAsyncIntegration() { }
        public static TResponse OnAsyncMethodEnd<TTarget, TResponse>(TTarget instance, TResponse response, System.Exception exception, Datadog.Trace.ClrProfiler.CallTarget.CallTargetState state)
            where TResponse : Datadog.Trace.ClrProfiler.AutoInstrumentation.Kafka.IDeliveryResult { }
        public static Datadog.Trace.ClrProfiler.CallTarget.CallTargetState OnMethodBegin<TTarget, TTopicPartition, TMessage>(TTarget instance, TTopicPartition topicPartition, TMessage message, System.Threading.CancellationToken cancellationToken)
            where TMessage : Datadog.Trace.ClrProfiler.AutoInstrumentation.Kafka.IMessage { }
    }
    [Datadog.Trace.ClrProfiler.InstrumentMethod(AssemblyName="Confluent.Kafka", IntegrationName="Kafka", MaximumVersion="1.*.*", MethodName=".ctor", MinimumVersion="1.4.0", ParameterTypeNames=new string[] {
            "System.String",
            "!0",
            "!1",
            "System.Action`1[Confluent.Kafka.DeliveryReport`2[!0,!1]]"}, ReturnTypeName="System.Void", TypeName="Confluent.Kafka.Producer`2+TypedDeliveryHandlerShim_Action")]
    public class KafkaProduceSyncDeliveryHandlerIntegration
    {
        public KafkaProduceSyncDeliveryHandlerIntegration() { }
        public static Datadog.Trace.ClrProfiler.CallTarget.CallTargetState OnMethodBegin<TTarget, TKey, TValue, TActionOfDeliveryReport>(TTarget instance, string topic, TKey key, TValue value, TActionOfDeliveryReport handler) { }
        public static Datadog.Trace.ClrProfiler.CallTarget.CallTargetReturn OnMethodEnd<TTarget>(TTarget instance, System.Exception exception, Datadog.Trace.ClrProfiler.CallTarget.CallTargetState state) { }
        public static System.Action<TDeliveryReport> WrapAction<TDeliveryReport>(System.Action<TDeliveryReport> originalHandler, Datadog.Trace.Span span) { }
    }
    [Datadog.Trace.ClrProfiler.InstrumentMethod(AssemblyName="Confluent.Kafka", IntegrationName="Kafka", MaximumVersion="1.*.*", MethodName="Produce", MinimumVersion="1.4.0", ParameterTypeNames=new string[] {
            "Confluent.Kafka.TopicPartition",
            "Confluent.Kafka.Message`2[!0,!1]",
            "System.Action`1[Confluent.Kafka.DeliveryReport`2[!0,!1]]"}, ReturnTypeName="System.Void", TypeName="Confluent.Kafka.Producer`2")]
    public class KafkaProduceSyncIntegration
    {
        public KafkaProduceSyncIntegration() { }
        public static Datadog.Trace.ClrProfiler.CallTarget.CallTargetState OnMethodBegin<TTarget, TTopicPartition, TMessage, TDeliveryHandler>(TTarget instance, TTopicPartition topicPartition, TMessage message, TDeliveryHandler deliveryHandler)
            where TMessage : Datadog.Trace.ClrProfiler.AutoInstrumentation.Kafka.IMessage { }
        public static Datadog.Trace.ClrProfiler.CallTarget.CallTargetReturn OnMethodEnd<TTarget>(TTarget instance, System.Exception exception, Datadog.Trace.ClrProfiler.CallTarget.CallTargetState state) { }
    }
    [Datadog.Trace.DuckTyping.DuckCopy]
    public struct Offset
    {
        public long Value;
        public override string ToString() { }
    }
    [Datadog.Trace.DuckTyping.DuckCopy]
    public struct Partition
    {
        public bool IsSpecial;
        public int Value;
        public override string ToString() { }
    }
}
namespace Datadog.Trace.ClrProfiler.AutoInstrumentation.MongoDb
{
    public class IWireProtocol_ExecuteAsync_Integration
    {
        public IWireProtocol_ExecuteAsync_Integration() { }
        public static TReturn OnAsyncMethodEnd<TTarget, TReturn>(TTarget instance, TReturn returnValue, System.Exception exception, Datadog.Trace.ClrProfiler.CallTarget.CallTargetState state) { }
        public static Datadog.Trace.ClrProfiler.CallTarget.CallTargetState OnMethodBegin<TTarget>(TTarget instance, object connection, System.Threading.CancellationToken cancellationToken) { }
    }
    public class IWireProtocol_Execute_Integration
    {
        public IWireProtocol_Execute_Integration() { }
        public static Datadog.Trace.ClrProfiler.CallTarget.CallTargetState OnMethodBegin<TTarget>(TTarget instance, object connection, System.Threading.CancellationToken cancellationToken) { }
        public static Datadog.Trace.ClrProfiler.CallTarget.CallTargetReturn OnMethodEnd<TTarget>(TTarget instance, System.Exception exception, Datadog.Trace.ClrProfiler.CallTarget.CallTargetState state) { }
    }
    public class IWireProtocol_Generic_Execute_Integration
    {
        public IWireProtocol_Generic_Execute_Integration() { }
        public static Datadog.Trace.ClrProfiler.CallTarget.CallTargetState OnMethodBegin<TTarget>(TTarget instance, object connection, System.Threading.CancellationToken cancellationToken) { }
        public static Datadog.Trace.ClrProfiler.CallTarget.CallTargetReturn<TReturn> OnMethodEnd<TTarget, TReturn>(TTarget instance, TReturn returnValue, System.Exception exception, Datadog.Trace.ClrProfiler.CallTarget.CallTargetState state) { }
    }
}
namespace Datadog.Trace.ClrProfiler.AutoInstrumentation.Msmq
{
    public interface IMessageQueue
    {
        string Path { get; }
        bool Transactional { get; }
    }
    public enum MessageQueueTransactionType
    {
        None = 0,
        Automatic = 1,
        Single = 3,
    }
    [Datadog.Trace.ClrProfiler.InstrumentMethod(AssemblyName="System.Messaging", IntegrationName="Msmq", MaximumVersion="4.*.*", MethodName="Purge", MinimumVersion="4.0.0", ReturnTypeName="System.Void", TypeName="System.Messaging.MessageQueue")]
    public class MessageQueue_Purge_Integration
    {
        public MessageQueue_Purge_Integration() { }
        public static Datadog.Trace.ClrProfiler.CallTarget.CallTargetState OnMethodBegin<TMessageQueue>(TMessageQueue instance)
            where TMessageQueue : Datadog.Trace.ClrProfiler.AutoInstrumentation.Msmq.IMessageQueue { }
        public static Datadog.Trace.ClrProfiler.CallTarget.CallTargetReturn OnMethodEnd<TTarget>(TTarget instance, System.Exception exception, Datadog.Trace.ClrProfiler.CallTarget.CallTargetState state) { }
    }
    [Datadog.Trace.ClrProfiler.InstrumentMethod(AssemblyName="System.Messaging", IntegrationName="Msmq", MaximumVersion="4.*.*", MethodName="ReceiveCurrent", MinimumVersion="4.0.0", ParameterTypeNames=new string[] {
            "System.TimeSpan",
            "System.Int32",
            "System.Messaging.Interop.CursorHandle",
            "System.Messaging.MessagePropertyFilter",
            "System.Messaging.MessageQueueTransaction",
            "System.Messaging.MessageQueueTransactionType"}, ReturnTypeName="System.Messaging.Message", TypeName="System.Messaging.MessageQueue")]
    public class MessageQueue_ReceiveCurrent_Integration
    {
        public MessageQueue_ReceiveCurrent_Integration() { }
        public static Datadog.Trace.ClrProfiler.CallTarget.CallTargetState OnMethodBegin<TMessageQueue>(TMessageQueue instance, System.TimeSpan timeout, int action, object cursorHandle, object messagePropertyFilter, object messageQueueTransaction, Datadog.Trace.ClrProfiler.AutoInstrumentation.Msmq.MessageQueueTransactionType messageQueueTransactionType)
            where TMessageQueue : Datadog.Trace.ClrProfiler.AutoInstrumentation.Msmq.IMessageQueue { }
        public static Datadog.Trace.ClrProfiler.CallTarget.CallTargetReturn<TResult> OnMethodEnd<TTarget, TResult>(TTarget instance, TResult messageResult, System.Exception exception, Datadog.Trace.ClrProfiler.CallTarget.CallTargetState state) { }
    }
    [Datadog.Trace.ClrProfiler.InstrumentMethod(AssemblyName="System.Messaging", IntegrationName="Msmq", MaximumVersion="4.*.*", MethodName="SendInternal", MinimumVersion="4.0.0", ParameterTypeNames=new string[] {
            "System.Object",
            "System.Messaging.MessageQueueTransaction",
            "System.Messaging.MessageQueueTransactionType"}, ReturnTypeName="System.Void", TypeName="System.Messaging.MessageQueue")]
    public class MessageQueue_SendInternal_Integration
    {
        public MessageQueue_SendInternal_Integration() { }
        public static Datadog.Trace.ClrProfiler.CallTarget.CallTargetState OnMethodBegin<TMessageQueue>(TMessageQueue instance, object message, object messageQueueTransaction, Datadog.Trace.ClrProfiler.AutoInstrumentation.Msmq.MessageQueueTransactionType messageQueueTransactionType)
            where TMessageQueue : Datadog.Trace.ClrProfiler.AutoInstrumentation.Msmq.IMessageQueue { }
        public static Datadog.Trace.ClrProfiler.CallTarget.CallTargetReturn OnMethodEnd<TTarget>(TTarget instance, System.Exception exception, Datadog.Trace.ClrProfiler.CallTarget.CallTargetState state) { }
    }
}
namespace Datadog.Trace.ClrProfiler.AutoInstrumentation.RabbitMQ
{
    [Datadog.Trace.ClrProfiler.InstrumentMethod(AssemblyName="RabbitMQ.Client", IntegrationName="RabbitMQ", MaximumVersion="6.*.*", MethodName="HandleBasicDeliver", MinimumVersion="3.6.9", ParameterTypeNames=new string[] {
            "System.String",
            "System.UInt64",
            "System.Boolean",
            "System.String",
            "System.String",
            "RabbitMQ.Client.IBasicProperties",
            "_"}, ReturnTypeName="System.Void", TypeName="RabbitMQ.Client.Events.EventingBasicConsumer")]
    public class BasicDeliverIntegration
    {
        public BasicDeliverIntegration() { }
        public static Datadog.Trace.ClrProfiler.CallTarget.CallTargetState OnMethodBegin<TTarget, TBasicProperties, TBody>(TTarget instance, string consumerTag, ulong deliveryTag, bool redelivered, string exchange, string routingKey, TBasicProperties basicProperties, TBody body)
            where TBasicProperties : Datadog.Trace.ClrProfiler.AutoInstrumentation.RabbitMQ.IBasicProperties
            where TBody : Datadog.Trace.ClrProfiler.AutoInstrumentation.RabbitMQ.IBody { }
        public static Datadog.Trace.ClrProfiler.CallTarget.CallTargetReturn OnMethodEnd<TTarget>(TTarget instance, System.Exception exception, Datadog.Trace.ClrProfiler.CallTarget.CallTargetState state) { }
    }
    [Datadog.Trace.ClrProfiler.InstrumentMethod(AssemblyName="RabbitMQ.Client", IntegrationName="RabbitMQ", MaximumVersion="6.*.*", MethodName="BasicGet", MinimumVersion="3.6.9", ParameterTypeNames=new string[] {
            "System.String",
            "System.Boolean"}, ReturnTypeName="RabbitMQ.Client.BasicGetResult", TypeName="RabbitMQ.Client.Impl.ModelBase")]
    public class BasicGetIntegration
    {
        public BasicGetIntegration() { }
        public static Datadog.Trace.ClrProfiler.CallTarget.CallTargetState OnMethodBegin<TTarget>(TTarget instance, string queue, bool autoAck) { }
        public static Datadog.Trace.ClrProfiler.CallTarget.CallTargetReturn<TResult> OnMethodEnd<TTarget, TResult>(TTarget instance, TResult basicGetResult, System.Exception exception, Datadog.Trace.ClrProfiler.CallTarget.CallTargetState state)
            where TResult : Datadog.Trace.ClrProfiler.AutoInstrumentation.RabbitMQ.IBasicGetResult, Datadog.Trace.DuckTyping.IDuckType { }
    }
    [Datadog.Trace.ClrProfiler.InstrumentMethod(AssemblyName="RabbitMQ.Client", IntegrationName="RabbitMQ", MaximumVersion="6.*.*", MethodName="_Private_BasicPublish", MinimumVersion="3.6.9", ParameterTypeNames=new string[] {
            "System.String",
            "System.String",
            "System.Boolean",
            "RabbitMQ.Client.IBasicProperties",
            "_"}, ReturnTypeName="System.Void", TypeName="RabbitMQ.Client.Framing.Impl.Model")]
    public class BasicPublishIntegration
    {
        public BasicPublishIntegration() { }
        public static Datadog.Trace.ClrProfiler.CallTarget.CallTargetState OnMethodBegin<TTarget, TBasicProperties, TBody>(TTarget instance, string exchange, string routingKey, bool mandatory, TBasicProperties basicProperties, TBody body)
            where TBasicProperties : Datadog.Trace.ClrProfiler.AutoInstrumentation.RabbitMQ.IBasicProperties, Datadog.Trace.DuckTyping.IDuckType
            where TBody : Datadog.Trace.ClrProfiler.AutoInstrumentation.RabbitMQ.IBody, Datadog.Trace.DuckTyping.IDuckType { }
        public static Datadog.Trace.ClrProfiler.CallTarget.CallTargetReturn OnMethodEnd<TTarget>(TTarget instance, System.Exception exception, Datadog.Trace.ClrProfiler.CallTarget.CallTargetState state) { }
    }
    [Datadog.Trace.ClrProfiler.InstrumentMethod(AssemblyName="RabbitMQ.Client", IntegrationName="RabbitMQ", MaximumVersion="6.*.*", MethodName="_Private_ExchangeDeclare", MinimumVersion="3.6.9", ParameterTypeNames=new string[] {
            "System.String",
            "System.String",
            "System.Boolean",
            "System.Boolean",
            "System.Boolean",
            "System.Boolean",
            "System.Boolean",
            "System.Collections.Generic.IDictionary`2[System.String,System.Object]"}, ReturnTypeName="System.Void", TypeName="RabbitMQ.Client.Framing.Impl.Model")]
    public class ExchangeDeclareIntegration
    {
        public ExchangeDeclareIntegration() { }
        public static Datadog.Trace.ClrProfiler.CallTarget.CallTargetState OnMethodBegin<TTarget>(TTarget instance, string exchange, string type, bool passive, bool durable, bool autoDelete, bool @internal, bool nowait, System.Collections.Generic.IDictionary<string, object> arguments) { }
        public static Datadog.Trace.ClrProfiler.CallTarget.CallTargetReturn OnMethodEnd<TTarget>(TTarget instance, System.Exception exception, Datadog.Trace.ClrProfiler.CallTarget.CallTargetState state) { }
    }
    public interface IBasicGetResult
    {
        Datadog.Trace.ClrProfiler.AutoInstrumentation.RabbitMQ.IBasicProperties BasicProperties { get; }
        Datadog.Trace.ClrProfiler.AutoInstrumentation.RabbitMQ.IBody Body { get; }
    }
    public interface IBasicProperties
    {
        byte DeliveryMode { get; }
        System.Collections.Generic.IDictionary<string, object> Headers { get; set; }
        bool IsDeliveryModePresent();
    }
    public interface IBody
    {
        int Length { get; }
    }
    [Datadog.Trace.ClrProfiler.InstrumentMethod(AssemblyName="RabbitMQ.Client", IntegrationName="RabbitMQ", MaximumVersion="6.*.*", MethodName="QueueBind", MinimumVersion="3.6.9", ParameterTypeNames=new string[] {
            "System.String",
            "System.String",
            "System.String",
            "System.Collections.Generic.IDictionary`2[System.String,System.Object]"}, ReturnTypeName="System.Void", TypeName="RabbitMQ.Client.Impl.ModelBase")]
    public class QueueBindIntegration
    {
        public QueueBindIntegration() { }
        public static Datadog.Trace.ClrProfiler.CallTarget.CallTargetState OnMethodBegin<TTarget>(TTarget instance, string queue, string exchange, string routingKey, System.Collections.Generic.IDictionary<string, object> arguments) { }
        public static Datadog.Trace.ClrProfiler.CallTarget.CallTargetReturn OnMethodEnd<TTarget>(TTarget instance, System.Exception exception, Datadog.Trace.ClrProfiler.CallTarget.CallTargetState state) { }
    }
    [Datadog.Trace.ClrProfiler.InstrumentMethod(AssemblyName="RabbitMQ.Client", IntegrationName="RabbitMQ", MaximumVersion="6.*.*", MethodName="_Private_QueueDeclare", MinimumVersion="3.6.9", ParameterTypeNames=new string[] {
            "System.String",
            "System.Boolean",
            "System.Boolean",
            "System.Boolean",
            "System.Boolean",
            "System.Boolean",
            "System.Collections.Generic.IDictionary`2[System.String,System.Object]"}, ReturnTypeName="System.Void", TypeName="RabbitMQ.Client.Framing.Impl.Model")]
    public class QueueDeclareIntegration
    {
        public QueueDeclareIntegration() { }
        public static Datadog.Trace.ClrProfiler.CallTarget.CallTargetState OnMethodBegin<TTarget>(TTarget instance, string queue, bool passive, bool durable, bool exclusive, bool autoDelete, bool nowait, System.Collections.Generic.IDictionary<string, object> arguments) { }
        public static Datadog.Trace.ClrProfiler.CallTarget.CallTargetReturn OnMethodEnd<TTarget>(TTarget instance, System.Exception exception, Datadog.Trace.ClrProfiler.CallTarget.CallTargetState state) { }
    }
}
namespace Datadog.Trace.ClrProfiler.AutoInstrumentation.Redis.ServiceStack
{
    public interface IRedisNativeClient
    {
        string Host { get; }
        int Port { get; }
    }
    [Datadog.Trace.ClrProfiler.InstrumentMethod(AssemblyName="ServiceStack.Redis", IntegrationName="ServiceStackRedis", MaximumVersion="5.*.*", MethodName="SendReceive", MinimumVersion="4.0.0", ParameterTypeNames=new string[] {
            "System.Byte[][]",
            "System.Func`1[!!0]",
            "System.Action`1[System.Func`1[!!0]]",
            "System.Boolean"}, ReturnTypeName="T", TypeName="ServiceStack.Redis.RedisNativeClient")]
    public class RedisNativeClientSendReceiveIntegration
    {
        public RedisNativeClientSendReceiveIntegration() { }
        public static Datadog.Trace.ClrProfiler.CallTarget.CallTargetState OnMethodBegin<TTarget, TFunc, TAction>(TTarget instance, byte[][] cmdWithBinaryArgs, TFunc fn, TAction completePipelineFn, bool sendWithoutRead)
            where TTarget : Datadog.Trace.ClrProfiler.AutoInstrumentation.Redis.ServiceStack.IRedisNativeClient { }
        public static Datadog.Trace.ClrProfiler.CallTarget.CallTargetReturn<TResponse> OnMethodEnd<TTarget, TResponse>(TTarget instance, TResponse response, System.Exception exception, Datadog.Trace.ClrProfiler.CallTarget.CallTargetState state) { }
    }
}
namespace Datadog.Trace.ClrProfiler.AutoInstrumentation.Redis.StackExchange
{
    [Datadog.Trace.ClrProfiler.InstrumentMethod(AssemblyName="StackExchange.Redis", IntegrationName="StackExchangeRedis", MaximumVersion="2.*.*", MethodName="ExecuteAsyncImpl", MinimumVersion="1.0.0", ParameterTypeNames=new string[] {
            "StackExchange.Redis.Message",
            "StackExchange.Redis.ResultProcessor`1[!!0]",
            "System.Object",
            "StackExchange.Redis.ServerEndPoint"}, ReturnTypeName="System.Threading.Tasks.Task`1<T>", TypeName="StackExchange.Redis.ConnectionMultiplexer")]
    [Datadog.Trace.ClrProfiler.InstrumentMethod(AssemblyName="StackExchange.Redis.StrongName", IntegrationName="StackExchangeRedis", MaximumVersion="2.*.*", MethodName="ExecuteAsyncImpl", MinimumVersion="1.0.0", ParameterTypeNames=new string[] {
            "StackExchange.Redis.Message",
            "StackExchange.Redis.ResultProcessor`1[!!0]",
            "System.Object",
            "StackExchange.Redis.ServerEndPoint"}, ReturnTypeName="System.Threading.Tasks.Task`1<T>", TypeName="StackExchange.Redis.ConnectionMultiplexer")]
    public class ConnectionMultiplexerExecuteAsyncImplIntegration
    {
        public ConnectionMultiplexerExecuteAsyncImplIntegration() { }
        public static TResponse OnAsyncMethodEnd<TTarget, TResponse>(TTarget instance, TResponse response, System.Exception exception, Datadog.Trace.ClrProfiler.CallTarget.CallTargetState state) { }
        public static Datadog.Trace.ClrProfiler.CallTarget.CallTargetState OnMethodBegin<TTarget, TMessage, TProcessor, TServerEndPoint>(TTarget instance, TMessage message, TProcessor resultProcessor, object state, TServerEndPoint serverEndPoint)
            where TTarget : Datadog.Trace.ClrProfiler.AutoInstrumentation.Redis.StackExchange.IConnectionMultiplexer
            where TMessage : Datadog.Trace.ClrProfiler.AutoInstrumentation.Redis.StackExchange.IMessageData { }
    }
    [Datadog.Trace.ClrProfiler.InstrumentMethod(AssemblyName="StackExchange.Redis", IntegrationName="StackExchangeRedis", MaximumVersion="2.*.*", MethodName="ExecuteSyncImpl", MinimumVersion="1.0.0", ParameterTypeNames=new string[] {
            "StackExchange.Redis.Message",
            "StackExchange.Redis.ResultProcessor`1[!!0]",
            "StackExchange.Redis.ServerEndPoint"}, ReturnTypeName="T", TypeName="StackExchange.Redis.ConnectionMultiplexer")]
    [Datadog.Trace.ClrProfiler.InstrumentMethod(AssemblyName="StackExchange.Redis.StrongName", IntegrationName="StackExchangeRedis", MaximumVersion="2.*.*", MethodName="ExecuteSyncImpl", MinimumVersion="1.0.0", ParameterTypeNames=new string[] {
            "StackExchange.Redis.Message",
            "StackExchange.Redis.ResultProcessor`1[!!0]",
            "StackExchange.Redis.ServerEndPoint"}, ReturnTypeName="T", TypeName="StackExchange.Redis.ConnectionMultiplexer")]
    public class ConnectionMultiplexerExecuteSyncImplIntegration
    {
        public ConnectionMultiplexerExecuteSyncImplIntegration() { }
        public static Datadog.Trace.ClrProfiler.CallTarget.CallTargetState OnMethodBegin<TTarget, TMessage, TProcessor, TServerEndPoint>(TTarget instance, TMessage message, TProcessor resultProcessor, TServerEndPoint serverEndPoint)
            where TTarget : Datadog.Trace.ClrProfiler.AutoInstrumentation.Redis.StackExchange.IConnectionMultiplexer
            where TMessage : Datadog.Trace.ClrProfiler.AutoInstrumentation.Redis.StackExchange.IMessageData { }
        public static Datadog.Trace.ClrProfiler.CallTarget.CallTargetReturn<TResponse> OnMethodEnd<TTarget, TResponse>(TTarget instance, TResponse response, System.Exception exception, Datadog.Trace.ClrProfiler.CallTarget.CallTargetState state) { }
    }
    public interface IConnectionMultiplexer
    {
        string Configuration { get; }
    }
    public interface IMessageData
    {
        string CommandAndKey { get; }
    }
    public interface IRedisBase
    {
        [Datadog.Trace.DuckTyping.Duck(Kind=Datadog.Trace.DuckTyping.DuckKind.Field, Name="multiplexer")]
        Datadog.Trace.ClrProfiler.AutoInstrumentation.Redis.StackExchange.MultiplexerData Multiplexer { get; }
    }
    [Datadog.Trace.DuckTyping.DuckCopy]
    public struct MultiplexerData
    {
        public string Configuration;
    }
    public class RedisExecuteAsyncIntegration
    {
        public RedisExecuteAsyncIntegration() { }
        public static TResponse OnAsyncMethodEnd<TTarget, TResponse>(TTarget instance, TResponse response, System.Exception exception, Datadog.Trace.ClrProfiler.CallTarget.CallTargetState state) { }
        public static Datadog.Trace.ClrProfiler.CallTarget.CallTargetState OnMethodBegin<TTarget, TMessage, TProcessor, TServerEndPoint>(TTarget instance, TMessage message, TProcessor resultProcessor, TServerEndPoint serverEndPoint)
            where TTarget : Datadog.Trace.ClrProfiler.AutoInstrumentation.Redis.StackExchange.IRedisBase
            where TMessage : Datadog.Trace.ClrProfiler.AutoInstrumentation.Redis.StackExchange.IMessageData { }
    }
    public class RedisExecuteSyncIntegration
    {
        public RedisExecuteSyncIntegration() { }
        public static Datadog.Trace.ClrProfiler.CallTarget.CallTargetState OnMethodBegin<TTarget, TMessage, TProcessor, TServerEndPoint>(TTarget instance, TMessage message, TProcessor resultProcessor, TServerEndPoint serverEndPoint)
            where TTarget : Datadog.Trace.ClrProfiler.AutoInstrumentation.Redis.StackExchange.IRedisBase
            where TMessage : Datadog.Trace.ClrProfiler.AutoInstrumentation.Redis.StackExchange.IMessageData { }
        public static Datadog.Trace.ClrProfiler.CallTarget.CallTargetReturn<TResponse> OnMethodEnd<TTarget, TResponse>(TTarget instance, TResponse response, System.Exception exception, Datadog.Trace.ClrProfiler.CallTarget.CallTargetState state) { }
    }
}
namespace Datadog.Trace.ClrProfiler.AutoInstrumentation.Testing.MsTestV2
{
    public interface ITestMethod
    {
        object[] Arguments { get; }
        System.Reflection.MethodInfo MethodInfo { get; }
        string TestClassName { get; }
        string TestMethodName { get; }
        System.Attribute[] GetAllAttributes(bool inherit);
    }
    public interface ITestMethodRunner
    {
        [Datadog.Trace.DuckTyping.Duck(Kind=Datadog.Trace.DuckTyping.DuckKind.Field, Name="testMethodInfo")]
        Datadog.Trace.ClrProfiler.AutoInstrumentation.Testing.MsTestV2.ITestMethod TestMethodInfo { get; }
    }
    [Datadog.Trace.DuckTyping.DuckCopy]
    public struct TestCategoryAttributeStruct
    {
        public System.Collections.Generic.IList<string> TestCategories;
    }
    [Datadog.Trace.ClrProfiler.InstrumentMethod(AssemblyName="Microsoft.VisualStudio.TestPlatform.TestFramework", IntegrationName="MsTestV2", MaximumVersion="14.*.*", MethodName="Execute", MinimumVersion="14.0.0", ParameterTypeNames=new string[] {
            "Microsoft.VisualStudio.TestTools.UnitTesting.ITestMethod"}, ReturnTypeName="Microsoft.VisualStudio.TestTools.UnitTesting.TestResult", TypeName="Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute")]
    public class TestMethodAttributeExecuteIntegration
    {
        public TestMethodAttributeExecuteIntegration() { }
        public static Datadog.Trace.ClrProfiler.CallTarget.CallTargetState OnMethodBegin<TTarget, TTestMethod>(TTarget instance, TTestMethod testMethod)
            where TTestMethod : Datadog.Trace.ClrProfiler.AutoInstrumentation.Testing.MsTestV2.ITestMethod, Datadog.Trace.DuckTyping.IDuckType { }
        public static Datadog.Trace.ClrProfiler.CallTarget.CallTargetReturn<TReturn> OnMethodEnd<TTarget, TReturn>(TTarget instance, TReturn returnValue, System.Exception exception, Datadog.Trace.ClrProfiler.CallTarget.CallTargetState state) { }
    }
    [Datadog.Trace.ClrProfiler.InstrumentMethod(AssemblyName="Microsoft.VisualStudio.TestPlatform.MSTest.TestAdapter", IntegrationName="MsTestV2", MaximumVersion="14.*.*", MethodName="Execute", MinimumVersion="14.0.0", ParameterTypeNames=new string[0], ReturnTypeName="Microsoft.VisualStudio.TestPlatform.MSTest.TestAdapter.ObjectModel.UnitTestResult" +
        "", TypeName="Microsoft.VisualStudio.TestPlatform.MSTest.TestAdapter.Execution.TestMethodRunner" +
        "")]
    public class TestMethodRunnerExecuteIntegration
    {
        public TestMethodRunnerExecuteIntegration() { }
        public static Datadog.Trace.ClrProfiler.CallTarget.CallTargetState OnMethodBegin<TTarget>(TTarget instance) { }
        public static Datadog.Trace.ClrProfiler.CallTarget.CallTargetReturn<TReturn> OnMethodEnd<TTarget, TReturn>(TTarget instance, TReturn returnValue, System.Exception exception, Datadog.Trace.ClrProfiler.CallTarget.CallTargetState state)
            where TTarget : Datadog.Trace.ClrProfiler.AutoInstrumentation.Testing.MsTestV2.ITestMethodRunner { }
    }
    [Datadog.Trace.DuckTyping.DuckCopy]
    public struct TestPropertyAttributeStruct
    {
        public string Name;
        public string Value;
    }
    [Datadog.Trace.DuckTyping.DuckCopy]
    public struct TestResultStruct
    {
        public Datadog.Trace.ClrProfiler.AutoInstrumentation.Testing.MsTestV2.UnitTestOutcome Outcome;
        public System.Exception TestFailureException;
    }
    public enum UnitTestOutcome
    {
        Failed = 0,
        Inconclusive = 1,
        Passed = 2,
        InProgress = 3,
        Error = 4,
        Timeout = 5,
        Aborted = 6,
        Unknown = 7,
        NotRunnable = 8,
    }
    public enum UnitTestResultOutcome
    {
        Error = 0,
        Failed = 1,
        Timeout = 2,
        Inconclusive = 3,
        Ignored = 4,
        NotRunnable = 5,
        Passed = 6,
        NotFound = 7,
        InProgress = 8,
    }
    [Datadog.Trace.DuckTyping.DuckCopy]
    public struct UnitTestResultStruct
    {
        public string ErrorMessage;
        public string ErrorStackTrace;
        public Datadog.Trace.ClrProfiler.AutoInstrumentation.Testing.MsTestV2.UnitTestResultOutcome Outcome;
    }
    [Datadog.Trace.ClrProfiler.InstrumentMethod(AssemblyName="Microsoft.VisualStudio.TestPlatform.MSTest.TestAdapter", IntegrationName="MsTestV2", MaximumVersion="14.*.*", MethodName="RunCleanup", MinimumVersion="14.0.0", ParameterTypeNames=new string[0], ReturnTypeName="Microsoft.VisualStudio.TestPlatform.MSTest.TestAdapter.Execution.RunCleanupResult" +
        "", TypeName="Microsoft.VisualStudio.TestPlatform.MSTest.TestAdapter.Execution.UnitTestRunner")]
    public class UnitTestRunnerRunCleanupIntegration
    {
        public UnitTestRunnerRunCleanupIntegration() { }
        public static Datadog.Trace.ClrProfiler.CallTarget.CallTargetReturn<TReturn> OnMethodEnd<TTarget, TReturn>(TTarget instance, TReturn returnValue, System.Exception exception, Datadog.Trace.ClrProfiler.CallTarget.CallTargetState state) { }
    }
}
namespace Datadog.Trace.ClrProfiler.AutoInstrumentation.Testing.NUnit
{
    public enum FailureSite
    {
        Test = 0,
        SetUp = 1,
        TearDown = 2,
        Parent = 3,
        Child = 4,
    }
    public interface ICompositeWorkItem : Datadog.Trace.ClrProfiler.AutoInstrumentation.Testing.NUnit.IWorkItem
    {
        System.Collections.IEnumerable Children { get; }
    }
    public interface IMethodInfo
    {
        System.Reflection.MethodInfo MethodInfo { get; }
    }
    public interface IPropertyBag
    {
        System.Collections.IList this[string key] { get; }
        System.Collections.Generic.ICollection<string> Keys { get; }
        object Get(string key);
    }
    public interface IResultState
    {
        Datadog.Trace.ClrProfiler.AutoInstrumentation.Testing.NUnit.FailureSite Site { get; }
        Datadog.Trace.ClrProfiler.AutoInstrumentation.Testing.NUnit.TestStatus Status { get; }
    }
    public interface ITest
    {
        object[] Arguments { get; }
        string FullName { get; }
        Datadog.Trace.ClrProfiler.AutoInstrumentation.Testing.NUnit.IMethodInfo Method { get; }
        string Name { get; }
        Datadog.Trace.ClrProfiler.AutoInstrumentation.Testing.NUnit.IPropertyBag Properties { get; }
    }
    public interface ITestExecutionContext
    {
        Datadog.Trace.ClrProfiler.AutoInstrumentation.Testing.NUnit.ITest CurrentTest { get; }
    }
    public interface ITestResult
    {
        string Message { get; }
        Datadog.Trace.ClrProfiler.AutoInstrumentation.Testing.NUnit.IResultState ResultState { get; }
        string StackTrace { get; }
        Datadog.Trace.ClrProfiler.AutoInstrumentation.Testing.NUnit.ITest Test { get; }
    }
    public interface ITestSuite : Datadog.Trace.ClrProfiler.AutoInstrumentation.Testing.NUnit.ITest
    {
        System.Collections.IEnumerable Tests { get; }
    }
    public interface IWorkItem
    {
        Datadog.Trace.ClrProfiler.AutoInstrumentation.Testing.NUnit.ITestResult Result { get; }
    }
    [Datadog.Trace.ClrProfiler.InstrumentMethod(AssemblyName="nunit.framework", IntegrationName="NUnit", MaximumVersion="3.*.*", MethodName="SkipChildren", MinimumVersion="3.0.0", ParameterTypeNames=new string[] {
            "_",
            "NUnit.Framework.Interfaces.ResultState",
            "System.String"}, ReturnTypeName="System.Void", TypeName="NUnit.Framework.Internal.Execution.CompositeWorkItem")]
    public class NUnitCompositeWorkItemSkipChildrenIntegration
    {
        public NUnitCompositeWorkItemSkipChildrenIntegration() { }
        public static Datadog.Trace.ClrProfiler.CallTarget.CallTargetState OnMethodBegin<TTarget, TSuite, TResultState>(TTarget instance, TSuite testSuite, TResultState resultState, string message) { }
        public static Datadog.Trace.ClrProfiler.CallTarget.CallTargetReturn OnMethodEnd<TTarget>(TTarget instance, System.Exception exception, Datadog.Trace.ClrProfiler.CallTarget.CallTargetState state) { }
    }
    [Datadog.Trace.ClrProfiler.InstrumentMethod(AssemblyName="nunit.framework", IntegrationName="NUnit", MaximumVersion="3.*.*", MethodName="Execute", MinimumVersion="3.0.0", ParameterTypeNames=new string[] {
            "NUnit.Framework.Internal.TestExecutionContext"}, ReturnTypeName="NUnit.Framework.Internal.TestResult", TypeName="NUnit.Framework.Internal.Commands.SkipCommand")]
    public class NUnitSkipCommandExecuteIntegration
    {
        public NUnitSkipCommandExecuteIntegration() { }
        public static Datadog.Trace.ClrProfiler.CallTarget.CallTargetState OnMethodBegin<TTarget, TContext>(TTarget instance, TContext executionContext)
            where TContext : Datadog.Trace.ClrProfiler.AutoInstrumentation.Testing.NUnit.ITestExecutionContext { }
        public static Datadog.Trace.ClrProfiler.CallTarget.CallTargetReturn<TResult> OnMethodEnd<TTarget, TResult>(TTarget instance, TResult returnValue, System.Exception exception, Datadog.Trace.ClrProfiler.CallTarget.CallTargetState state) { }
    }
    [Datadog.Trace.ClrProfiler.InstrumentMethod(AssemblyName="NUnit3.TestAdapter", IntegrationName="NUnit", MaximumVersion="3.*.*", MethodName="Unload", MinimumVersion="3.0.0", ReturnTypeName="System.Void", TypeName="NUnit.VisualStudio.TestAdapter.NUnitTestAdapter")]
    public class NUnitTestAdapterUnloadIntegration
    {
        public NUnitTestAdapterUnloadIntegration() { }
        public static Datadog.Trace.ClrProfiler.CallTarget.CallTargetReturn OnMethodEnd<TTarget>(TTarget instance, System.Exception exception, Datadog.Trace.ClrProfiler.CallTarget.CallTargetState state) { }
    }
    [Datadog.Trace.ClrProfiler.InstrumentMethod(AssemblyName="nunit.framework", IntegrationName="NUnit", MaximumVersion="3.*.*", MethodName="WaitForCompletion", MinimumVersion="3.0.0", ParameterTypeNames=new string[] {
            "System.Int32"}, ReturnTypeName="System.Boolean", TypeName="NUnit.Framework.Api.NUnitTestAssemblyRunner")]
    public class NUnitTestAssemblyRunnerWaitForCompletionIntegration
    {
        public NUnitTestAssemblyRunnerWaitForCompletionIntegration() { }
        public static Datadog.Trace.ClrProfiler.CallTarget.CallTargetReturn<TResult> OnMethodEnd<TTarget, TResult>(TTarget instance, TResult returnValue, System.Exception exception, Datadog.Trace.ClrProfiler.CallTarget.CallTargetState state) { }
    }
    [Datadog.Trace.ClrProfiler.InstrumentMethod(AssemblyName="nunit.framework", IntegrationName="NUnit", MaximumVersion="3.*.*", MethodName="Execute", MinimumVersion="3.0.0", ParameterTypeNames=new string[] {
            "NUnit.Framework.Internal.TestExecutionContext"}, ReturnTypeName="NUnit.Framework.Internal.TestResult", TypeName="NUnit.Framework.Internal.Commands.TestMethodCommand")]
    public class NUnitTestMethodCommandExecuteIntegration
    {
        public NUnitTestMethodCommandExecuteIntegration() { }
        public static Datadog.Trace.ClrProfiler.CallTarget.CallTargetState OnMethodBegin<TTarget, TContext>(TTarget instance, TContext executionContext)
            where TContext : Datadog.Trace.ClrProfiler.AutoInstrumentation.Testing.NUnit.ITestExecutionContext { }
        public static Datadog.Trace.ClrProfiler.CallTarget.CallTargetReturn<TResult> OnMethodEnd<TTarget, TResult>(TTarget instance, TResult returnValue, System.Exception exception, Datadog.Trace.ClrProfiler.CallTarget.CallTargetState state) { }
    }
    public enum TestStatus
    {
        Inconclusive = 0,
        Skipped = 1,
        Passed = 2,
        Warning = 3,
        Failed = 4,
    }
}
namespace Datadog.Trace.ClrProfiler.AutoInstrumentation.Testing.XUnit
{
    public interface IExceptionAggregator
    {
        System.Exception ToException();
    }
    [Datadog.Trace.DuckTyping.DuckCopy]
    public struct TestCaseStruct
    {
        public string DisplayName;
        public System.Collections.Generic.Dictionary<string, System.Collections.Generic.List<string>> Traits;
    }
    [Datadog.Trace.DuckTyping.DuckCopy]
    public struct TestInvokerStruct
    {
        public Datadog.Trace.ClrProfiler.AutoInstrumentation.Testing.XUnit.IExceptionAggregator Aggregator;
        public Datadog.Trace.ClrProfiler.AutoInstrumentation.Testing.XUnit.TestCaseStruct TestCase;
        public System.Type TestClass;
        public System.Reflection.MethodInfo TestMethod;
        public object[] TestMethodArguments;
    }
    [Datadog.Trace.DuckTyping.DuckCopy]
    public struct TestRunnerStruct
    {
        public Datadog.Trace.ClrProfiler.AutoInstrumentation.Testing.XUnit.IExceptionAggregator Aggregator;
        public string SkipReason;
        public Datadog.Trace.ClrProfiler.AutoInstrumentation.Testing.XUnit.TestCaseStruct TestCase;
        public System.Type TestClass;
        public System.Reflection.MethodInfo TestMethod;
        public object[] TestMethodArguments;
    }
    [Datadog.Trace.ClrProfiler.InstrumentMethod(AssemblyNames=new string[] {
            "xunit.execution.dotnet",
            "xunit.execution.desktop"}, IntegrationName="XUnit", MaximumVersion="2.*.*", MethodName=".ctor", MinimumVersion="2.2.0", ParameterTypeNames=new string[] {
            "_",
            "_",
            "_",
            "_",
            "_",
            "_"}, ReturnTypeName="System.Void", TypeName="Xunit.Sdk.TestAssemblyFinished")]
    public static class XUnitTestAssemblyFinishedCtorIntegration
    {
        public static Datadog.Trace.ClrProfiler.CallTarget.CallTargetState OnMethodBegin<TTarget, TArg1, TArg2, TArg3, TArg4, TArg5, TArg6>(TTarget instance, TArg1 testCases, TArg2 testAssembly, TArg3 executionTime, TArg4 testsRun, TArg5 testsFailed, TArg6 testsSkipped) { }
    }
    [Datadog.Trace.ClrProfiler.InstrumentMethod(AssemblyNames=new string[] {
            "xunit.execution.dotnet",
            "xunit.execution.desktop"}, IntegrationName="XUnit", MaximumVersion="2.*.*", MethodName="RunTestCollectionAsync", MinimumVersion="2.2.0", ParameterTypeNames=new string[] {
            "Xunit.Sdk.IMessageBus",
            "_",
            "_",
            "_"}, ReturnTypeName="System.Threading.Tasks.Task`1<Xunit.Sdk.RunSummary>", TypeName="Xunit.Sdk.TestAssemblyRunner`1")]
    public static class XUnitTestAssemblyRunnerRunTestCollectionAsyncIntegration
    {
        public static TReturn OnAsyncMethodEnd<TTarget, TReturn>(TTarget instance, TReturn returnValue, System.Exception exception, Datadog.Trace.ClrProfiler.CallTarget.CallTargetState state) { }
    }
    [Datadog.Trace.ClrProfiler.InstrumentMethod(AssemblyNames=new string[] {
            "xunit.execution.dotnet",
            "xunit.execution.desktop"}, IntegrationName="XUnit", MaximumVersion="2.*.*", MethodName="RunAsync", MinimumVersion="2.2.0", ParameterTypeNames=new string[0], ReturnTypeName="System.Threading.Tasks.Task`1<System.Decimal>", TypeName="Xunit.Sdk.TestInvoker`1")]
    public static class XUnitTestInvokerRunAsyncIntegration
    {
        public static decimal OnAsyncMethodEnd<TTarget>(TTarget instance, decimal returnValue, System.Exception exception, Datadog.Trace.ClrProfiler.CallTarget.CallTargetState state) { }
        public static Datadog.Trace.ClrProfiler.CallTarget.CallTargetState OnMethodBegin<TTarget>(TTarget instance) { }
    }
    [Datadog.Trace.ClrProfiler.InstrumentMethod(AssemblyNames=new string[] {
            "xunit.execution.dotnet",
            "xunit.execution.desktop"}, IntegrationName="XUnit", MaximumVersion="2.*.*", MethodName="RunAsync", MinimumVersion="2.2.0", ReturnTypeName="System.Threading.Tasks.Task`1<Xunit.Sdk.RunSummary>", TypeName="Xunit.Sdk.TestRunner`1")]
    public static class XUnitTestRunnerRunAsyncIntegration
    {
        public static Datadog.Trace.ClrProfiler.CallTarget.CallTargetState OnMethodBegin<TTarget>(TTarget instance) { }
    }
}
namespace Datadog.Trace.ClrProfiler.AutoInstrumentation.Wcf
{
    [Datadog.Trace.ClrProfiler.InstrumentMethod(AssemblyName="System.ServiceModel", IntegrationName="Wcf", MaximumVersion="4.*.*", MethodName="HandleRequest", MinimumVersion="4.0.0", ParameterTypeNames=new string[] {
            "System.ServiceModel.Channels.RequestContext",
            "System.ServiceModel.OperationContext"}, ReturnTypeName="System.Boolean", TypeName="System.ServiceModel.Dispatcher.ChannelHandler")]
    public class ChannelHandlerIntegration
    {
        public ChannelHandlerIntegration() { }
        public static Datadog.Trace.ClrProfiler.CallTarget.CallTargetState OnMethodBegin<TTarget, TRequestContext, TOperationContext>(TTarget instance, TRequestContext request, TOperationContext currentOperationContext) { }
        public static Datadog.Trace.ClrProfiler.CallTarget.CallTargetReturn<TReturn> OnMethodEnd<TTarget, TReturn>(TTarget instance, TReturn returnValue, System.Exception exception, Datadog.Trace.ClrProfiler.CallTarget.CallTargetState state) { }
    }
}
namespace Datadog.Trace.ClrProfiler.CallTarget
{
    public static class CallTargetInvoker
    {
        public static Datadog.Trace.ClrProfiler.CallTarget.CallTargetState BeginMethod<TIntegration, TTarget>(TTarget instance) { }
        public static Datadog.Trace.ClrProfiler.CallTarget.CallTargetState BeginMethod<TIntegration, TTarget>(TTarget instance, object[] arguments) { }
        public static Datadog.Trace.ClrProfiler.CallTarget.CallTargetState BeginMethod<TIntegration, TTarget, TArg1>(TTarget instance, TArg1 arg1) { }
        public static Datadog.Trace.ClrProfiler.CallTarget.CallTargetState BeginMethod<TIntegration, TTarget, TArg1, TArg2>(TTarget instance, TArg1 arg1, TArg2 arg2) { }
        public static Datadog.Trace.ClrProfiler.CallTarget.CallTargetState BeginMethod<TIntegration, TTarget, TArg1, TArg2, TArg3>(TTarget instance, TArg1 arg1, TArg2 arg2, TArg3 arg3) { }
        public static Datadog.Trace.ClrProfiler.CallTarget.CallTargetState BeginMethod<TIntegration, TTarget, TArg1, TArg2, TArg3, TArg4>(TTarget instance, TArg1 arg1, TArg2 arg2, TArg3 arg3, TArg4 arg4) { }
        public static Datadog.Trace.ClrProfiler.CallTarget.CallTargetState BeginMethod<TIntegration, TTarget, TArg1, TArg2, TArg3, TArg4, TArg5>(TTarget instance, TArg1 arg1, TArg2 arg2, TArg3 arg3, TArg4 arg4, TArg5 arg5) { }
        public static Datadog.Trace.ClrProfiler.CallTarget.CallTargetState BeginMethod<TIntegration, TTarget, TArg1, TArg2, TArg3, TArg4, TArg5, TArg6>(TTarget instance, TArg1 arg1, TArg2 arg2, TArg3 arg3, TArg4 arg4, TArg5 arg5, TArg6 arg6) { }
        public static Datadog.Trace.ClrProfiler.CallTarget.CallTargetState BeginMethod<TIntegration, TTarget, TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7>(TTarget instance, TArg1 arg1, TArg2 arg2, TArg3 arg3, TArg4 arg4, TArg5 arg5, TArg6 arg6, TArg7 arg7) { }
        public static Datadog.Trace.ClrProfiler.CallTarget.CallTargetState BeginMethod<TIntegration, TTarget, TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8>(TTarget instance, TArg1 arg1, TArg2 arg2, TArg3 arg3, TArg4 arg4, TArg5 arg5, TArg6 arg6, TArg7 arg7, TArg8 arg8) { }
        public static Datadog.Trace.ClrProfiler.CallTarget.CallTargetReturn EndMethod<TIntegration, TTarget>(TTarget instance, System.Exception exception, Datadog.Trace.ClrProfiler.CallTarget.CallTargetState state) { }
        public static Datadog.Trace.ClrProfiler.CallTarget.CallTargetReturn<TReturn> EndMethod<TIntegration, TTarget, TReturn>(TTarget instance, TReturn returnValue, System.Exception exception, Datadog.Trace.ClrProfiler.CallTarget.CallTargetState state) { }
        public static T GetDefaultValue<T>() { }
        public static void LogException<TIntegration, TTarget>(System.Exception exception) { }
    }
    public readonly struct CallTargetReturn
    {
        public static Datadog.Trace.ClrProfiler.CallTarget.CallTargetReturn GetDefault() { }
    }
    public readonly struct CallTargetReturn<T>
    {
        public CallTargetReturn(T returnValue) { }
        public T GetReturnValue() { }
        public override string ToString() { }
        public static Datadog.Trace.ClrProfiler.CallTarget.CallTargetReturn<T> GetDefault() { }
    }
    public readonly struct CallTargetState
    {
        public CallTargetState(Datadog.Trace.Scope scope) { }
        public CallTargetState(Datadog.Trace.Scope scope, object state) { }
        public CallTargetState(Datadog.Trace.Scope scope, object state, System.DateTimeOffset? startTime) { }
        public Datadog.Trace.Scope Scope { get; }
        public System.DateTimeOffset? StartTime { get; }
        public object State { get; }
        public override string ToString() { }
        public static Datadog.Trace.ClrProfiler.CallTarget.CallTargetState GetDefault() { }
    }
}
namespace Datadog.Trace.ClrProfiler
{
    [System.Obsolete("This type will be removed in a future version of this library.")]
    public static class DynamicMethodBuilder<TDelegate>
        where TDelegate : System.Delegate
    {
        public static TDelegate CreateMethodCallDelegate(System.Type type, string methodName, System.Type[] methodParameterTypes = null, System.Type[] methodGenericArguments = null) { }
        public static TDelegate GetOrCreateMethodCallDelegate(System.Type type, string methodName, System.Type returnType = null, System.Type[] methodParameterTypes = null, System.Type[] methodGenericArguments = null) { }
    }
    [System.AttributeUsage(System.AttributeTargets.Assembly | System.AttributeTargets.Class | System.AttributeTargets.All, AllowMultiple=true, Inherited=false)]
    public class InstrumentMethodAttribute : System.Attribute
    {
        public InstrumentMethodAttribute() { }
        public string AssemblyName { get; set; }
        public string[] AssemblyNames { get; set; }
        public System.Type CallTargetType { get; set; }
        public string IntegrationName { get; set; }
        public string MaximumVersion { get; set; }
        public string MethodName { get; set; }
        public string MinimumVersion { get; set; }
        public string[] ParameterTypeNames { get; set; }
        public string ReturnTypeName { get; set; }
        public string TypeName { get; set; }
        public Datadog.Trace.ClrProfiler.IntegrationVersionRange VersionRange { get; }
    }
    public static class Instrumentation
    {
        public static readonly string ProfilerClsid;
        public static bool ProfilerAttached { get; }
        public static void Initialize() { }
    }
    public class IntegrationVersionRange
    {
        public IntegrationVersionRange() { }
        public ushort MaximumMajor { get; }
        public ushort MaximumMinor { get; }
        public ushort MaximumPatch { get; }
        public string MaximumVersion { get; }
        public ushort MinimumMajor { get; }
        public ushort MinimumMinor { get; }
        public ushort MinimumPatch { get; }
        public string MinimumVersion { get; }
    }
    [System.AttributeUsage(System.AttributeTargets.Method | System.AttributeTargets.All, AllowMultiple=true, Inherited=false)]
    public class InterceptMethodAttribute : System.Attribute
    {
        public InterceptMethodAttribute() { }
        public string CallerAssembly { get; set; }
        public string CallerMethod { get; set; }
        public string CallerType { get; set; }
        public string Integration { get; set; }
        public Datadog.Trace.ClrProfiler.MethodReplacementActionType MethodReplacementAction { get; set; }
        public string[] TargetAssemblies { get; set; }
        public string TargetAssembly { get; set; }
        public string TargetMaximumVersion { get; set; }
        public string TargetMethod { get; set; }
        public string TargetMinimumVersion { get; set; }
        public string TargetSignature { get; set; }
        public string[] TargetSignatureTypes { get; set; }
        public string TargetType { get; set; }
        public Datadog.Trace.ClrProfiler.IntegrationVersionRange TargetVersionRange { get; }
    }
    [System.Obsolete("This type will be removed in a future version of this library.")]
    public static class MemberAccessor
    {
        public static bool TryCallMethod<TArg1, TResult>(this object source, string methodName, TArg1 arg1, out TResult value) { }
        public static bool TryGetFieldValue<TResult>(this object source, string fieldName, out TResult value) { }
        public static bool TryGetPropertyValue<TResult>(this object source, string propertyName, out TResult value) { }
    }
    public class MetadataNames
    {
        public MetadataNames(string moduleName, string typeName, string methodName) { }
        public string MethodName { get; }
        public string ModuleName { get; }
        public string TypeName { get; }
    }
    public enum MethodReplacementActionType
    {
        ReplaceTargetMethod = 0,
        InsertFirst = 1,
        CallTargetModification = 2,
    }
}
namespace Datadog.Trace.ClrProfiler.Integrations.AdoNet
{
    public static class DbCommandIntegration
    {
        [Datadog.Trace.ClrProfiler.InterceptMethod(TargetAssemblies=new string[] {
                "System.Data"}, TargetMaximumVersion="4", TargetMethod="ExecuteNonQuery", TargetMinimumVersion="2", TargetSignatureTypes=new string[] {
                "System.Int32"}, TargetType="System.Data.Common.DbCommand")]
        [Datadog.Trace.ClrProfiler.InterceptMethod(TargetAssemblies=new string[] {
                "System.Data.Common"}, TargetMaximumVersion="5", TargetMethod="ExecuteNonQuery", TargetMinimumVersion="4", TargetSignatureTypes=new string[] {
                "System.Int32"}, TargetType="System.Data.Common.DbCommand")]
        [Datadog.Trace.ClrProfiler.InterceptMethod(TargetAssemblies=new string[] {
                "netstandard"}, TargetMaximumVersion="2", TargetMethod="ExecuteNonQuery", TargetMinimumVersion="2", TargetSignatureTypes=new string[] {
                "System.Int32"}, TargetType="System.Data.Common.DbCommand")]
        public static int ExecuteNonQuery(object command, int opCode, int mdToken, long moduleVersionPtr) { }
        [Datadog.Trace.ClrProfiler.InterceptMethod(TargetAssemblies=new string[] {
                "System.Data",
                "System.Data.Common"}, TargetMaximumVersion="5", TargetMinimumVersion="4", TargetSignatureTypes=new string[] {
                "System.Threading.Tasks.Task`1<System.Int32>",
                "System.Threading.CancellationToken"}, TargetType="System.Data.Common.DbCommand")]
        [Datadog.Trace.ClrProfiler.InterceptMethod(TargetAssemblies=new string[] {
                "netstandard"}, TargetMaximumVersion="2", TargetMinimumVersion="2", TargetSignatureTypes=new string[] {
                "System.Threading.Tasks.Task`1<System.Int32>",
                "System.Threading.CancellationToken"}, TargetType="System.Data.Common.DbCommand")]
        public static object ExecuteNonQueryAsync(object command, object boxedCancellationToken, int opCode, int mdToken, long moduleVersionPtr) { }
        [Datadog.Trace.ClrProfiler.InterceptMethod(TargetAssemblies=new string[] {
                "System.Data"}, TargetMaximumVersion="4", TargetMethod="ExecuteReader", TargetMinimumVersion="2", TargetSignatureTypes=new string[] {
                "System.Data.Common.DbDataReader"}, TargetType="System.Data.Common.DbCommand")]
        [Datadog.Trace.ClrProfiler.InterceptMethod(TargetAssemblies=new string[] {
                "System.Data.Common"}, TargetMaximumVersion="5", TargetMethod="ExecuteReader", TargetMinimumVersion="4", TargetSignatureTypes=new string[] {
                "System.Data.Common.DbDataReader"}, TargetType="System.Data.Common.DbCommand")]
        [Datadog.Trace.ClrProfiler.InterceptMethod(TargetAssemblies=new string[] {
                "netstandard"}, TargetMaximumVersion="2", TargetMethod="ExecuteReader", TargetMinimumVersion="2", TargetSignatureTypes=new string[] {
                "System.Data.Common.DbDataReader"}, TargetType="System.Data.Common.DbCommand")]
        public static object ExecuteReader(object command, int opCode, int mdToken, long moduleVersionPtr) { }
        [Datadog.Trace.ClrProfiler.InterceptMethod(TargetAssemblies=new string[] {
                "System.Data",
                "System.Data.Common"}, TargetMaximumVersion="5", TargetMinimumVersion="4", TargetSignatureTypes=new string[] {
                "System.Threading.Tasks.Task`1<System.Data.Common.DbDataReader>",
                "System.Data.CommandBehavior",
                "System.Threading.CancellationToken"}, TargetType="System.Data.Common.DbCommand")]
        [Datadog.Trace.ClrProfiler.InterceptMethod(TargetAssemblies=new string[] {
                "netstandard"}, TargetMaximumVersion="2", TargetMinimumVersion="2", TargetSignatureTypes=new string[] {
                "System.Threading.Tasks.Task`1<System.Data.Common.DbDataReader>",
                "System.Data.CommandBehavior",
                "System.Threading.CancellationToken"}, TargetType="System.Data.Common.DbCommand")]
        public static object ExecuteReaderAsync(object command, int behavior, object boxedCancellationToken, int opCode, int mdToken, long moduleVersionPtr) { }
        [Datadog.Trace.ClrProfiler.InterceptMethod(TargetAssemblies=new string[] {
                "System.Data"}, TargetMaximumVersion="4", TargetMethod="ExecuteReader", TargetMinimumVersion="2", TargetSignatureTypes=new string[] {
                "System.Data.Common.DbDataReader",
                "System.Data.CommandBehavior"}, TargetType="System.Data.Common.DbCommand")]
        [Datadog.Trace.ClrProfiler.InterceptMethod(TargetAssemblies=new string[] {
                "System.Data.Common"}, TargetMaximumVersion="5", TargetMethod="ExecuteReader", TargetMinimumVersion="4", TargetSignatureTypes=new string[] {
                "System.Data.Common.DbDataReader",
                "System.Data.CommandBehavior"}, TargetType="System.Data.Common.DbCommand")]
        [Datadog.Trace.ClrProfiler.InterceptMethod(TargetAssemblies=new string[] {
                "netstandard"}, TargetMaximumVersion="2", TargetMethod="ExecuteReader", TargetMinimumVersion="2", TargetSignatureTypes=new string[] {
                "System.Data.Common.DbDataReader",
                "System.Data.CommandBehavior"}, TargetType="System.Data.Common.DbCommand")]
        public static object ExecuteReaderWithBehavior(object command, int behavior, int opCode, int mdToken, long moduleVersionPtr) { }
        [Datadog.Trace.ClrProfiler.InterceptMethod(TargetAssemblies=new string[] {
                "System.Data"}, TargetMaximumVersion="4", TargetMethod="ExecuteScalar", TargetMinimumVersion="2", TargetSignatureTypes=new string[] {
                "System.Object"}, TargetType="System.Data.Common.DbCommand")]
        [Datadog.Trace.ClrProfiler.InterceptMethod(TargetAssemblies=new string[] {
                "System.Data.Common"}, TargetMaximumVersion="5", TargetMethod="ExecuteScalar", TargetMinimumVersion="4", TargetSignatureTypes=new string[] {
                "System.Object"}, TargetType="System.Data.Common.DbCommand")]
        [Datadog.Trace.ClrProfiler.InterceptMethod(TargetAssemblies=new string[] {
                "netstandard"}, TargetMaximumVersion="2", TargetMethod="ExecuteScalar", TargetMinimumVersion="2", TargetSignatureTypes=new string[] {
                "System.Object"}, TargetType="System.Data.Common.DbCommand")]
        public static object ExecuteScalar(object command, int opCode, int mdToken, long moduleVersionPtr) { }
        [Datadog.Trace.ClrProfiler.InterceptMethod(TargetAssemblies=new string[] {
                "System.Data",
                "System.Data.Common"}, TargetMaximumVersion="5", TargetMinimumVersion="4", TargetSignatureTypes=new string[] {
                "System.Threading.Tasks.Task`1<System.Object>",
                "System.Threading.CancellationToken"}, TargetType="System.Data.Common.DbCommand")]
        [Datadog.Trace.ClrProfiler.InterceptMethod(TargetAssemblies=new string[] {
                "netstandard"}, TargetMaximumVersion="2", TargetMinimumVersion="2", TargetSignatureTypes=new string[] {
                "System.Threading.Tasks.Task`1<System.Object>",
                "System.Threading.CancellationToken"}, TargetType="System.Data.Common.DbCommand")]
        public static object ExecuteScalarAsync(object command, object boxedCancellationToken, int opCode, int mdToken, long moduleVersionPtr) { }
    }
    public static class IDbCommandIntegration
    {
        [Datadog.Trace.ClrProfiler.InterceptMethod(TargetAssemblies=new string[] {
                "System.Data"}, TargetMaximumVersion="4", TargetMinimumVersion="2", TargetSignatureTypes=new string[] {
                "System.Int32"}, TargetType="System.Data.IDbCommand")]
        [Datadog.Trace.ClrProfiler.InterceptMethod(TargetAssemblies=new string[] {
                "System.Data.Common"}, TargetMaximumVersion="5", TargetMinimumVersion="4", TargetSignatureTypes=new string[] {
                "System.Int32"}, TargetType="System.Data.IDbCommand")]
        [Datadog.Trace.ClrProfiler.InterceptMethod(TargetAssemblies=new string[] {
                "netstandard"}, TargetMaximumVersion="2", TargetMinimumVersion="2", TargetSignatureTypes=new string[] {
                "System.Int32"}, TargetType="System.Data.IDbCommand")]
        public static int ExecuteNonQuery(object command, int opCode, int mdToken, long moduleVersionPtr) { }
        [Datadog.Trace.ClrProfiler.InterceptMethod(TargetAssemblies=new string[] {
                "System.Data"}, TargetMaximumVersion="4", TargetMinimumVersion="2", TargetSignatureTypes=new string[] {
                "System.Data.IDataReader"}, TargetType="System.Data.IDbCommand")]
        [Datadog.Trace.ClrProfiler.InterceptMethod(TargetAssemblies=new string[] {
                "System.Data.Common"}, TargetMaximumVersion="5", TargetMinimumVersion="4", TargetSignatureTypes=new string[] {
                "System.Data.IDataReader"}, TargetType="System.Data.IDbCommand")]
        [Datadog.Trace.ClrProfiler.InterceptMethod(TargetAssemblies=new string[] {
                "netstandard"}, TargetMaximumVersion="2", TargetMinimumVersion="2", TargetSignatureTypes=new string[] {
                "System.Data.IDataReader"}, TargetType="System.Data.IDbCommand")]
        public static object ExecuteReader(object command, int opCode, int mdToken, long moduleVersionPtr) { }
        [Datadog.Trace.ClrProfiler.InterceptMethod(TargetAssemblies=new string[] {
                "System.Data"}, TargetMaximumVersion="4", TargetMethod="ExecuteReader", TargetMinimumVersion="2", TargetSignatureTypes=new string[] {
                "System.Data.IDataReader",
                "System.Data.CommandBehavior"}, TargetType="System.Data.IDbCommand")]
        [Datadog.Trace.ClrProfiler.InterceptMethod(TargetAssemblies=new string[] {
                "System.Data.Common"}, TargetMaximumVersion="5", TargetMethod="ExecuteReader", TargetMinimumVersion="4", TargetSignatureTypes=new string[] {
                "System.Data.IDataReader",
                "System.Data.CommandBehavior"}, TargetType="System.Data.IDbCommand")]
        [Datadog.Trace.ClrProfiler.InterceptMethod(TargetAssemblies=new string[] {
                "netstandard"}, TargetMaximumVersion="2", TargetMethod="ExecuteReader", TargetMinimumVersion="2", TargetSignatureTypes=new string[] {
                "System.Data.IDataReader",
                "System.Data.CommandBehavior"}, TargetType="System.Data.IDbCommand")]
        public static object ExecuteReaderWithBehavior(object command, int behavior, int opCode, int mdToken, long moduleVersionPtr) { }
        [Datadog.Trace.ClrProfiler.InterceptMethod(TargetAssemblies=new string[] {
                "System.Data"}, TargetMaximumVersion="4", TargetMinimumVersion="2", TargetSignatureTypes=new string[] {
                "System.Object"}, TargetType="System.Data.IDbCommand")]
        [Datadog.Trace.ClrProfiler.InterceptMethod(TargetAssemblies=new string[] {
                "System.Data.Common"}, TargetMaximumVersion="5", TargetMinimumVersion="4", TargetSignatureTypes=new string[] {
                "System.Object"}, TargetType="System.Data.IDbCommand")]
        [Datadog.Trace.ClrProfiler.InterceptMethod(TargetAssemblies=new string[] {
                "netstandard"}, TargetMaximumVersion="2", TargetMinimumVersion="2", TargetSignatureTypes=new string[] {
                "System.Object"}, TargetType="System.Data.IDbCommand")]
        public static object ExecuteScalar(object command, int opCode, int mdToken, long moduleVersionPtr) { }
    }
    public static class NpgsqlCommandIntegration
    {
        [Datadog.Trace.ClrProfiler.InterceptMethod(TargetAssemblies=new string[] {
                "Npgsql"}, TargetMaximumVersion="4", TargetMinimumVersion="4", TargetSignatureTypes=new string[] {
                "System.Int32"}, TargetType="Npgsql.NpgsqlCommand")]
        public static int ExecuteNonQuery(object command, int opCode, int mdToken, long moduleVersionPtr) { }
        [Datadog.Trace.ClrProfiler.InterceptMethod(TargetAssemblies=new string[] {
                "Npgsql"}, TargetMaximumVersion="4", TargetMinimumVersion="4", TargetSignatureTypes=new string[] {
                "System.Threading.Tasks.Task`1<System.Int32>",
                "System.Threading.CancellationToken"}, TargetType="Npgsql.NpgsqlCommand")]
        public static object ExecuteNonQueryAsync(object command, object boxedCancellationToken, int opCode, int mdToken, long moduleVersionPtr) { }
        [Datadog.Trace.ClrProfiler.InterceptMethod(TargetAssemblies=new string[] {
                "Npgsql"}, TargetMaximumVersion="4", TargetMethod="ExecuteReader", TargetMinimumVersion="4", TargetSignatureTypes=new string[] {
                "Npgsql.NpgsqlDataReader"}, TargetType="Npgsql.NpgsqlCommand")]
        public static object ExecuteReader(object command, int opCode, int mdToken, long moduleVersionPtr) { }
        [Datadog.Trace.ClrProfiler.InterceptMethod(TargetAssemblies=new string[] {
                "Npgsql"}, TargetMaximumVersion="4", TargetMinimumVersion="4", TargetSignatureTypes=new string[] {
                "System.Threading.Tasks.Task`1<Npgsql.NpgsqlDataReader>",
                "System.Threading.CancellationToken"}, TargetType="Npgsql.NpgsqlCommand")]
        public static object ExecuteReaderAsync(object command, object boxedCancellationToken, int opCode, int mdToken, long moduleVersionPtr) { }
        [Datadog.Trace.ClrProfiler.InterceptMethod(TargetAssemblies=new string[] {
                "Npgsql"}, TargetMaximumVersion="4", TargetMethod="ExecuteReaderAsync", TargetMinimumVersion="4", TargetSignatureTypes=new string[] {
                "System.Threading.Tasks.Task`1<Npgsql.NpgsqlDataReader>",
                "System.Data.CommandBehavior",
                "System.Threading.CancellationToken"}, TargetType="Npgsql.NpgsqlCommand")]
        public static object ExecuteReaderAsyncWithBehaviorAndCancellation(object command, int behavior, object boxedCancellationToken, int opCode, int mdToken, long moduleVersionPtr) { }
        [Datadog.Trace.ClrProfiler.InterceptMethod(TargetAssemblies=new string[] {
                "Npgsql"}, TargetMaximumVersion="4", TargetMethod="ExecuteReader", TargetMinimumVersion="4", TargetSignatureTypes=new string[] {
                "Npgsql.NpgsqlDataReader",
                "System.Data.CommandBehavior"}, TargetType="Npgsql.NpgsqlCommand")]
        public static object ExecuteReaderWithBehavior(object command, int behavior, int opCode, int mdToken, long moduleVersionPtr) { }
        [Datadog.Trace.ClrProfiler.InterceptMethod(TargetAssemblies=new string[] {
                "Npgsql"}, TargetMaximumVersion="4", TargetMinimumVersion="4", TargetSignatureTypes=new string[] {
                "System.Object"}, TargetType="Npgsql.NpgsqlCommand")]
        public static object ExecuteScalar(object command, int opCode, int mdToken, long moduleVersionPtr) { }
        [Datadog.Trace.ClrProfiler.InterceptMethod(TargetAssemblies=new string[] {
                "Npgsql"}, TargetMaximumVersion="4", TargetMinimumVersion="4", TargetSignatureTypes=new string[] {
                "System.Threading.Tasks.Task`1<System.Object>",
                "System.Threading.CancellationToken"}, TargetType="Npgsql.NpgsqlCommand")]
        public static object ExecuteScalarAsync(object command, object boxedCancellationToken, int opCode, int mdToken, long moduleVersionPtr) { }
    }
    public static class SqlCommandIntegration
    {
        [Datadog.Trace.ClrProfiler.InterceptMethod(TargetAssemblies=new string[] {
                "Microsoft.Data.SqlClient"}, TargetMaximumVersion="2", TargetMethod="ExecuteNonQuery", TargetMinimumVersion="1", TargetSignatureTypes=new string[] {
                "System.Int32"}, TargetType="Microsoft.Data.SqlClient.SqlCommand")]
        public static int MicrosoftSqlClientExecuteNonQuery(object command, int opCode, int mdToken, long moduleVersionPtr) { }
        [Datadog.Trace.ClrProfiler.InterceptMethod(TargetAssemblies=new string[] {
                "Microsoft.Data.SqlClient"}, TargetMaximumVersion="2", TargetMethod="ExecuteNonQueryAsync", TargetMinimumVersion="1", TargetSignatureTypes=new string[] {
                "System.Threading.Tasks.Task`1<System.Int32>",
                "System.Threading.CancellationToken"}, TargetType="Microsoft.Data.SqlClient.SqlCommand")]
        public static object MicrosoftSqlClientExecuteNonQueryAsync(object command, object boxedCancellationToken, int opCode, int mdToken, long moduleVersionPtr) { }
        [Datadog.Trace.ClrProfiler.InterceptMethod(TargetAssemblies=new string[] {
                "Microsoft.Data.SqlClient"}, TargetMaximumVersion="2", TargetMethod="ExecuteReader", TargetMinimumVersion="1", TargetSignatureTypes=new string[] {
                "Microsoft.Data.SqlClient.SqlDataReader"}, TargetType="Microsoft.Data.SqlClient.SqlCommand")]
        public static object MicrosoftSqlClientExecuteReader(object command, int opCode, int mdToken, long moduleVersionPtr) { }
        [Datadog.Trace.ClrProfiler.InterceptMethod(TargetAssemblies=new string[] {
                "Microsoft.Data.SqlClient"}, TargetMaximumVersion="2", TargetMethod="ExecuteReaderAsync", TargetMinimumVersion="1", TargetSignatureTypes=new string[] {
                "System.Threading.Tasks.Task`1<Microsoft.Data.SqlClient.SqlDataReader>",
                "System.Data.CommandBehavior",
                "System.Threading.CancellationToken"}, TargetType="Microsoft.Data.SqlClient.SqlCommand")]
        public static object MicrosoftSqlClientExecuteReaderAsync(object command, int behavior, object boxedCancellationToken, int opCode, int mdToken, long moduleVersionPtr) { }
        [Datadog.Trace.ClrProfiler.InterceptMethod(TargetAssemblies=new string[] {
                "Microsoft.Data.SqlClient"}, TargetMaximumVersion="2", TargetMethod="ExecuteReader", TargetMinimumVersion="1", TargetSignatureTypes=new string[] {
                "Microsoft.Data.SqlClient.SqlDataReader",
                "System.Data.CommandBehavior"}, TargetType="Microsoft.Data.SqlClient.SqlCommand")]
        public static object MicrosoftSqlClientExecuteReaderWithBehavior(object command, int behavior, int opCode, int mdToken, long moduleVersionPtr) { }
        [Datadog.Trace.ClrProfiler.InterceptMethod(TargetAssemblies=new string[] {
                "Microsoft.Data.SqlClient"}, TargetMaximumVersion="2", TargetMethod="ExecuteScalar", TargetMinimumVersion="1", TargetSignatureTypes=new string[] {
                "System.Object"}, TargetType="Microsoft.Data.SqlClient.SqlCommand")]
        public static object MicrosoftSqlClientExecuteScalar(object command, int opCode, int mdToken, long moduleVersionPtr) { }
        [Datadog.Trace.ClrProfiler.InterceptMethod(TargetAssemblies=new string[] {
                "Microsoft.Data.SqlClient"}, TargetMaximumVersion="2", TargetMethod="ExecuteScalarAsync", TargetMinimumVersion="1", TargetSignatureTypes=new string[] {
                "System.Threading.Tasks.Task`1<System.Object>",
                "System.Threading.CancellationToken"}, TargetType="Microsoft.Data.SqlClient.SqlCommand")]
        public static object MicrosoftSqlClientExecuteScalarAsync(object command, object boxedCancellationToken, int opCode, int mdToken, long moduleVersionPtr) { }
        [Datadog.Trace.ClrProfiler.InterceptMethod(TargetAssemblies=new string[] {
                "System.Data"}, TargetMaximumVersion="4", TargetMethod="ExecuteNonQuery", TargetMinimumVersion="2", TargetSignatureTypes=new string[] {
                "System.Int32"}, TargetType="System.Data.SqlClient.SqlCommand")]
        [Datadog.Trace.ClrProfiler.InterceptMethod(TargetAssemblies=new string[] {
                "System.Data.SqlClient"}, TargetMaximumVersion="4", TargetMethod="ExecuteNonQuery", TargetMinimumVersion="4", TargetSignatureTypes=new string[] {
                "System.Int32"}, TargetType="System.Data.SqlClient.SqlCommand")]
        public static int SystemSqlClientExecuteNonQuery(object command, int opCode, int mdToken, long moduleVersionPtr) { }
        [Datadog.Trace.ClrProfiler.InterceptMethod(TargetAssemblies=new string[] {
                "System.Data",
                "System.Data.SqlClient"}, TargetMaximumVersion="4", TargetMethod="ExecuteNonQueryAsync", TargetMinimumVersion="4", TargetSignatureTypes=new string[] {
                "System.Threading.Tasks.Task`1<System.Int32>",
                "System.Threading.CancellationToken"}, TargetType="System.Data.SqlClient.SqlCommand")]
        public static object SystemSqlClientExecuteNonQueryAsync(object command, object boxedCancellationToken, int opCode, int mdToken, long moduleVersionPtr) { }
        [Datadog.Trace.ClrProfiler.InterceptMethod(TargetAssemblies=new string[] {
                "System.Data"}, TargetMaximumVersion="4", TargetMethod="ExecuteReader", TargetMinimumVersion="2", TargetSignatureTypes=new string[] {
                "System.Data.SqlClient.SqlDataReader"}, TargetType="System.Data.SqlClient.SqlCommand")]
        [Datadog.Trace.ClrProfiler.InterceptMethod(TargetAssemblies=new string[] {
                "System.Data.SqlClient"}, TargetMaximumVersion="4", TargetMethod="ExecuteReader", TargetMinimumVersion="4", TargetSignatureTypes=new string[] {
                "System.Data.SqlClient.SqlDataReader"}, TargetType="System.Data.SqlClient.SqlCommand")]
        public static object SystemSqlClientExecuteReader(object command, int opCode, int mdToken, long moduleVersionPtr) { }
        [Datadog.Trace.ClrProfiler.InterceptMethod(TargetAssemblies=new string[] {
                "System.Data",
                "System.Data.SqlClient"}, TargetMaximumVersion="4", TargetMethod="ExecuteReaderAsync", TargetMinimumVersion="4", TargetSignatureTypes=new string[] {
                "System.Threading.Tasks.Task`1<System.Data.SqlClient.SqlDataReader>",
                "System.Data.CommandBehavior",
                "System.Threading.CancellationToken"}, TargetType="System.Data.SqlClient.SqlCommand")]
        public static object SystemSqlClientExecuteReaderAsync(object command, int behavior, object boxedCancellationToken, int opCode, int mdToken, long moduleVersionPtr) { }
        [Datadog.Trace.ClrProfiler.InterceptMethod(TargetAssemblies=new string[] {
                "System.Data"}, TargetMaximumVersion="4", TargetMethod="ExecuteReader", TargetMinimumVersion="2", TargetSignatureTypes=new string[] {
                "System.Data.SqlClient.SqlDataReader",
                "System.Data.CommandBehavior"}, TargetType="System.Data.SqlClient.SqlCommand")]
        [Datadog.Trace.ClrProfiler.InterceptMethod(TargetAssemblies=new string[] {
                "System.Data.SqlClient"}, TargetMaximumVersion="4", TargetMethod="ExecuteReader", TargetMinimumVersion="4", TargetSignatureTypes=new string[] {
                "System.Data.SqlClient.SqlDataReader",
                "System.Data.CommandBehavior"}, TargetType="System.Data.SqlClient.SqlCommand")]
        public static object SystemSqlClientExecuteReaderWithBehavior(object command, int behavior, int opCode, int mdToken, long moduleVersionPtr) { }
        [Datadog.Trace.ClrProfiler.InterceptMethod(TargetAssemblies=new string[] {
                "System.Data"}, TargetMaximumVersion="4", TargetMethod="ExecuteScalar", TargetMinimumVersion="2", TargetSignatureTypes=new string[] {
                "System.Object"}, TargetType="System.Data.SqlClient.SqlCommand")]
        [Datadog.Trace.ClrProfiler.InterceptMethod(TargetAssemblies=new string[] {
                "System.Data.SqlClient"}, TargetMaximumVersion="4", TargetMethod="ExecuteScalar", TargetMinimumVersion="4", TargetSignatureTypes=new string[] {
                "System.Object"}, TargetType="System.Data.SqlClient.SqlCommand")]
        public static object SystemSqlClientExecuteScalar(object command, int opCode, int mdToken, long moduleVersionPtr) { }
        [Datadog.Trace.ClrProfiler.InterceptMethod(TargetAssemblies=new string[] {
                "System.Data",
                "System.Data.SqlClient"}, TargetMaximumVersion="4", TargetMethod="ExecuteScalarAsync", TargetMinimumVersion="4", TargetSignatureTypes=new string[] {
                "System.Threading.Tasks.Task`1<System.Object>",
                "System.Threading.CancellationToken"}, TargetType="System.Data.SqlClient.SqlCommand")]
        public static object SystemSqlClientExecuteScalarAsync(object command, object boxedCancellationToken, int opCode, int mdToken, long moduleVersionPtr) { }
    }
}
namespace Datadog.Trace.ClrProfiler.Integrations.AspNet
{
    public static class AspNetIntegration
    {
        [Datadog.Trace.ClrProfiler.InterceptMethod(CallerAssembly="System.Web", CallerMethod="InvokePreStartInitMethodsCore", CallerType="System.Web.Compilation.BuildManager", Integration="AspNet", MethodReplacementAction=Datadog.Trace.ClrProfiler.MethodReplacementActionType.InsertFirst, TargetAssembly="System.Web", TargetMaximumVersion="4", TargetMethod="InvokePreStartInitMethodsCore", TargetMinimumVersion="4", TargetType="System.Web.Compilation.BuildManager")]
        public static void TryLoadHttpModule() { }
    }
    [Datadog.Trace.DuckTyping.DuckCopy]
    public struct ControllerContextStruct
    {
        public System.Web.HttpContextBase HttpContext;
        public System.Web.Routing.RouteData RouteData;
    }
    [Datadog.Trace.DuckTyping.DuckCopy]
    public struct HttpMethodStruct
    {
        public string Method;
    }
    public interface IHttpControllerContext
    {
        Datadog.Trace.ClrProfiler.Integrations.AspNet.IHttpRequestMessage Request { get; }
        Datadog.Trace.ClrProfiler.Integrations.AspNet.IHttpRouteData RouteData { get; }
    }
    public interface IHttpRequestMessage
    {
        Datadog.Trace.ClrProfiler.Integrations.AspNet.IRequestHeaders Headers { get; }
        Datadog.Trace.ClrProfiler.Integrations.AspNet.HttpMethodStruct Method { get; }
        System.Uri RequestUri { get; }
    }
    public interface IHttpRoute
    {
        string RouteTemplate { get; }
    }
    public interface IHttpRouteData
    {
        Datadog.Trace.ClrProfiler.Integrations.AspNet.IHttpRoute Route { get; }
        System.Collections.Generic.IDictionary<string, object> Values { get; }
    }
    public interface IRequestHeaders
    {
        string Host { get; }
        void Add(string name, string value);
        bool Remove(string name);
        bool TryGetValues(string name, out System.Collections.Generic.IEnumerable<string> values);
    }
}
namespace Datadog.Trace.ClrProfiler.Integrations
{
    public static class AspNetMvcIntegration
    {
        [Datadog.Trace.ClrProfiler.InterceptMethod(CallerAssembly="System.Web.Mvc", TargetAssembly="System.Web.Mvc", TargetMaximumVersion="5", TargetMinimumVersion="4", TargetSignatureTypes=new string[] {
                "System.IAsyncResult",
                "System.Web.Mvc.ControllerContext",
                "System.String",
                "System.AsyncCallback",
                "System.Object"}, TargetType="System.Web.Mvc.Async.IAsyncActionInvoker")]
        public static object BeginInvokeAction(object asyncControllerActionInvoker, object controllerContext, object actionName, object callback, object state, int opCode, int mdToken, long moduleVersionPtr) { }
        public static Datadog.Trace.Scope CreateScope(Datadog.Trace.ClrProfiler.Integrations.AspNet.ControllerContextStruct controllerContext) { }
        [Datadog.Trace.ClrProfiler.InterceptMethod(CallerAssembly="System.Web.Mvc", TargetAssembly="System.Web.Mvc", TargetMaximumVersion="5", TargetMinimumVersion="4", TargetSignatureTypes=new string[] {
                "System.Boolean",
                "System.IAsyncResult"}, TargetType="System.Web.Mvc.Async.IAsyncActionInvoker")]
        public static bool EndInvokeAction(object asyncControllerActionInvoker, object asyncResult, int opCode, int mdToken, long moduleVersionPtr) { }
    }
    public static class AspNetWebApi2Integration
    {
        [Datadog.Trace.ClrProfiler.InterceptMethod(TargetAssembly="System.Web.Http", TargetMaximumVersion="5", TargetMinimumVersion="5.1", TargetSignatureTypes=new string[] {
                "System.Threading.Tasks.Task`1<System.Net.Http.HttpResponseMessage>",
                "System.Web.Http.Controllers.HttpControllerContext",
                "System.Threading.CancellationToken"}, TargetType="System.Web.Http.Controllers.IHttpController")]
        public static object ExecuteAsync(object apiController, object controllerContext, object boxedCancellationToken, int opCode, int mdToken, long moduleVersionPtr) { }
    }
    public static class ElasticsearchNet5Integration
    {
        [Datadog.Trace.ClrProfiler.InterceptMethod(CallerAssembly="Elasticsearch.Net", TargetAssembly="Elasticsearch.Net", TargetMaximumVersion="5", TargetMinimumVersion="5", TargetSignatureTypes=new string[] {
                "Elasticsearch.Net.ElasticsearchResponse`1<T>",
                "Elasticsearch.Net.RequestData"}, TargetType="Elasticsearch.Net.IRequestPipeline")]
        public static object CallElasticsearch<TResponse>(object pipeline, object requestData, int opCode, int mdToken, long moduleVersionPtr) { }
        [Datadog.Trace.ClrProfiler.InterceptMethod(CallerAssembly="Elasticsearch.Net", TargetAssembly="Elasticsearch.Net", TargetMaximumVersion="5", TargetMinimumVersion="5", TargetSignatureTypes=new string[] {
                "System.Threading.Tasks.Task`1<Elasticsearch.Net.ElasticsearchResponse`1<T>>",
                "Elasticsearch.Net.RequestData",
                "System.Threading.CancellationToken"}, TargetType="Elasticsearch.Net.IRequestPipeline")]
        public static object CallElasticsearchAsync<TResponse>(object pipeline, object requestData, object boxedCancellationToken, int opCode, int mdToken, long moduleVersionPtr) { }
    }
    public static class ElasticsearchNet6Integration
    {
        [Datadog.Trace.ClrProfiler.InterceptMethod(CallerAssembly="Elasticsearch.Net", TargetAssembly="Elasticsearch.Net", TargetMaximumVersion="6", TargetMinimumVersion="6", TargetSignatureTypes=new string[] {
                "T",
                "Elasticsearch.Net.RequestData"}, TargetType="Elasticsearch.Net.IRequestPipeline")]
        public static object CallElasticsearch<TResponse>(object pipeline, object requestData, int opCode, int mdToken, long moduleVersionPtr) { }
        [Datadog.Trace.ClrProfiler.InterceptMethod(CallerAssembly="Elasticsearch.Net", TargetAssembly="Elasticsearch.Net", TargetMaximumVersion="6", TargetMinimumVersion="6", TargetSignatureTypes=new string[] {
                "System.Threading.Tasks.Task`1<T>",
                "Elasticsearch.Net.RequestData",
                "System.Threading.CancellationToken"}, TargetType="Elasticsearch.Net.IRequestPipeline")]
        public static object CallElasticsearchAsync<TResponse>(object pipeline, object requestData, object boxedCancellationToken, int opCode, int mdToken, long moduleVersionPtr) { }
    }
    public static class GraphQLIntegration
    {
        [Datadog.Trace.ClrProfiler.InterceptMethod(TargetAssembly="GraphQL", TargetMaximumVersion="2", TargetMinimumVersion="2.3", TargetSignatureTypes=new string[] {
                "System.Threading.Tasks.Task`1<GraphQL.ExecutionResult>",
                "GraphQL.Execution.ExecutionContext"}, TargetType="GraphQL.Execution.IExecutionStrategy")]
        public static object ExecuteAsync(object executionStrategy, object context, int opCode, int mdToken, long moduleVersionPtr) { }
        [Datadog.Trace.ClrProfiler.InterceptMethod(TargetAssembly="GraphQL", TargetMaximumVersion="2", TargetMinimumVersion="2.3", TargetSignatureTypes=new string[] {
                "GraphQL.Validation.IValidationResult",
                "System.String",
                "GraphQL.Types.ISchema",
                "GraphQL.Language.AST.Document",
                "System.Collections.Generic.IEnumerable`1<GraphQL.Validation.IValidationRule>",
                "_",
                "GraphQL.Inputs"}, TargetType="GraphQL.Validation.IDocumentValidator")]
        public static object Validate(object documentValidator, object originalQuery, object schema, object document, object rules, object userContext, object inputs, int opCode, int mdToken, long moduleVersionPtr) { }
    }
    public static class HttpMessageHandlerIntegration
    {
        [Datadog.Trace.ClrProfiler.InterceptMethod(TargetAssembly="System.Net.Http", TargetMaximumVersion="5", TargetMethod="Send", TargetMinimumVersion="5", TargetSignatureTypes=new string[] {
                "System.Net.Http.HttpResponseMessage",
                "System.Net.Http.HttpRequestMessage",
                "System.Threading.CancellationToken"}, TargetType="System.Net.Http.HttpClientHandler")]
        public static object HttpClientHandler_Send(object handler, object request, object boxedCancellationToken, int opCode, int mdToken, long moduleVersionPtr) { }
        [Datadog.Trace.ClrProfiler.InterceptMethod(TargetAssembly="System.Net.Http", TargetMaximumVersion="5", TargetMethod="SendAsync", TargetMinimumVersion="4", TargetSignatureTypes=new string[] {
                "System.Threading.Tasks.Task`1<System.Net.Http.HttpResponseMessage>",
                "System.Net.Http.HttpRequestMessage",
                "System.Threading.CancellationToken"}, TargetType="System.Net.Http.HttpClientHandler")]
        public static object HttpClientHandler_SendAsync(object handler, object request, object boxedCancellationToken, int opCode, int mdToken, long moduleVersionPtr) { }
        [Datadog.Trace.ClrProfiler.InterceptMethod(TargetAssembly="System.Net.Http", TargetMaximumVersion="5", TargetMethod="Send", TargetMinimumVersion="5", TargetSignatureTypes=new string[] {
                "System.Net.Http.HttpResponseMessage",
                "System.Net.Http.HttpRequestMessage",
                "System.Threading.CancellationToken"}, TargetType="System.Net.Http.HttpMessageHandler")]
        public static object HttpMessageHandler_Send(object handler, object request, object boxedCancellationToken, int opCode, int mdToken, long moduleVersionPtr) { }
        [Datadog.Trace.ClrProfiler.InterceptMethod(TargetAssembly="System.Net.Http", TargetMaximumVersion="5", TargetMethod="SendAsync", TargetMinimumVersion="4", TargetSignatureTypes=new string[] {
                "System.Threading.Tasks.Task`1<System.Net.Http.HttpResponseMessage>",
                "System.Net.Http.HttpRequestMessage",
                "System.Threading.CancellationToken"}, TargetType="System.Net.Http.HttpMessageHandler")]
        public static object HttpMessageHandler_SendAsync(object handler, object request, object boxedCancellationToken, int opCode, int mdToken, long moduleVersionPtr) { }
        [Datadog.Trace.DuckTyping.DuckCopy]
        public struct HttpMethodStruct
        {
            public string Method;
        }
        [Datadog.Trace.DuckTyping.DuckCopy]
        public struct HttpRequestMessageStruct
        {
            public Datadog.Trace.ClrProfiler.Integrations.HttpMessageHandlerIntegration.IRequestHeaders Headers;
            public Datadog.Trace.ClrProfiler.Integrations.HttpMessageHandlerIntegration.HttpMethodStruct Method;
            public System.Uri RequestUri;
        }
        [Datadog.Trace.DuckTyping.DuckCopy]
        public struct HttpResponseMessageStruct
        {
            public int StatusCode;
        }
        public interface IRequestHeaders
        {
            void Add(string name, string value);
            bool Remove(string name);
            bool TryGetValues(string name, out System.Collections.Generic.IEnumerable<string> values);
        }
        [Datadog.Trace.DuckTyping.DuckCopy]
        public struct TaskObjectStruct
        {
            public object Result;
        }
    }
    public static class MongoDbIntegration
    {
        [Datadog.Trace.ClrProfiler.InterceptMethod(TargetAssembly="MongoDB.Driver.Core", TargetMaximumVersion="2", TargetMinimumVersion="2.2", TargetSignatureTypes=new string[] {
                "System.Void",
                "MongoDB.Driver.Core.Connections.IConnection",
                "System.Threading.CancellationToken"}, TargetType="MongoDB.Driver.Core.WireProtocol.IWireProtocol")]
        public static void Execute(object wireProtocol, object connection, object boxedCancellationToken, int opCode, int mdToken, long moduleVersionPtr) { }
        [Datadog.Trace.ClrProfiler.InterceptMethod(TargetAssembly="MongoDB.Driver.Core", TargetMaximumVersion="2", TargetMethod="ExecuteAsync", TargetMinimumVersion="2.1", TargetSignatureTypes=new string[] {
                "System.Threading.Tasks.Task",
                "MongoDB.Driver.Core.Connections.IConnection",
                "System.Threading.CancellationToken"}, TargetType="MongoDB.Driver.Core.WireProtocol.IWireProtocol")]
        public static object ExecuteAsync(object wireProtocol, object connection, object boxedCancellationToken, int opCode, int mdToken, long moduleVersionPtr) { }
        [Datadog.Trace.ClrProfiler.InterceptMethod(TargetAssembly="MongoDB.Driver.Core", TargetMaximumVersion="2", TargetMethod="ExecuteAsync", TargetMinimumVersion="2.1", TargetSignatureTypes=new string[] {
                "System.Threading.Tasks.Task`1<T>",
                "MongoDB.Driver.Core.Connections.IConnection",
                "System.Threading.CancellationToken"}, TargetType="MongoDB.Driver.Core.WireProtocol.IWireProtocol`1")]
        public static object ExecuteAsyncGeneric(object wireProtocol, object connection, object boxedCancellationToken, int opCode, int mdToken, long moduleVersionPtr) { }
        [Datadog.Trace.ClrProfiler.InterceptMethod(TargetAssembly="MongoDB.Driver.Core", TargetMaximumVersion="2", TargetMethod="Execute", TargetMinimumVersion="2.2", TargetSignatureTypes=new string[] {
                "T",
                "MongoDB.Driver.Core.Connections.IConnection",
                "System.Threading.CancellationToken"}, TargetType="MongoDB.Driver.Core.WireProtocol.IWireProtocol`1")]
        public static object ExecuteGeneric(object wireProtocol, object connection, object boxedCancellationToken, int opCode, int mdToken, long moduleVersionPtr) { }
    }
    public static class RabbitMQIntegration
    {
        [Datadog.Trace.ClrProfiler.InterceptMethod(TargetAssembly="RabbitMQ.Client", TargetMaximumVersion="5", TargetMethod="HandleBasicDeliver", TargetMinimumVersion="3.6.9", TargetSignatureTypes=new string[] {
                "System.Void",
                "System.String",
                "System.UInt64",
                "System.Boolean",
                "System.String",
                "System.String",
                "_",
                "_"}, TargetType="RabbitMQ.Client.DefaultBasicConsumer")]
        public static void BasicDeliver(object model, string consumerTag, ulong deliveryTag, bool redelivered, string exchange, string routingKey, object basicProperties, byte[] body, int opCode, int mdToken, long moduleVersionPtr) { }
        [Datadog.Trace.ClrProfiler.InterceptMethod(TargetAssembly="RabbitMQ.Client", TargetMaximumVersion="6", TargetMethod="HandleBasicDeliver", TargetMinimumVersion="6", TargetSignatureTypes=new string[] {
                "System.Void",
                "System.String",
                "System.UInt64",
                "System.Boolean",
                "System.String",
                "System.String",
                "_",
                "_"}, TargetType="RabbitMQ.Client.DefaultBasicConsumer")]
        public static void BasicDeliverV6(object model, string consumerTag, ulong deliveryTag, bool redelivered, string exchange, string routingKey, object basicProperties, object body, int opCode, int mdToken, long moduleVersionPtr) { }
        [Datadog.Trace.ClrProfiler.InterceptMethod(TargetAssembly="RabbitMQ.Client", TargetMaximumVersion="6", TargetMethod="BasicGet", TargetMinimumVersion="3.6.9", TargetSignatureTypes=new string[] {
                "_",
                "System.String",
                "System.Boolean"}, TargetType="RabbitMQ.Client.IModel")]
        public static object BasicGet(object model, string queue, bool autoAck, int opCode, int mdToken, long moduleVersionPtr) { }
        [Datadog.Trace.ClrProfiler.InterceptMethod(TargetAssembly="RabbitMQ.Client", TargetMaximumVersion="5", TargetMethod="_Private_BasicPublish", TargetMinimumVersion="3.6.9", TargetSignatureTypes=new string[] {
                "System.Void",
                "System.String",
                "System.String",
                "System.Boolean",
                "_",
                "_"}, TargetType="RabbitMQ.Client.Impl.ModelBase")]
        public static void BasicPublish(object model, string exchange, string routingKey, bool mandatory, object basicProperties, byte[] body, int opCode, int mdToken, long moduleVersionPtr) { }
        [Datadog.Trace.ClrProfiler.InterceptMethod(TargetAssembly="RabbitMQ.Client", TargetMaximumVersion="6", TargetMethod="_Private_BasicPublish", TargetMinimumVersion="6", TargetSignatureTypes=new string[] {
                "System.Void",
                "System.String",
                "System.String",
                "System.Boolean",
                "_",
                "_"}, TargetType="RabbitMQ.Client.Impl.ModelBase")]
        public static void BasicPublishV6(object model, string exchange, string routingKey, bool mandatory, object basicProperties, object body, int opCode, int mdToken, long moduleVersionPtr) { }
        [Datadog.Trace.ClrProfiler.InterceptMethod(TargetAssembly="RabbitMQ.Client", TargetMaximumVersion="6", TargetMethod="_Private_ExchangeDeclare", TargetMinimumVersion="3.6.9", TargetSignatureTypes=new string[] {
                "System.Void",
                "System.String",
                "System.String",
                "System.Boolean",
                "System.Boolean",
                "System.Boolean",
                "System.Boolean",
                "System.Boolean",
                "_"}, TargetType="RabbitMQ.Client.Impl.ModelBase")]
        public static void ExchangeDeclare(object model, string exchange, string type, bool passive, bool durable, bool autoDelete, bool @internal, bool nowait, object arguments, int opCode, int mdToken, long moduleVersionPtr) { }
        [Datadog.Trace.ClrProfiler.InterceptMethod(TargetAssembly="RabbitMQ.Client", TargetMaximumVersion="6", TargetMethod="_Private_QueueBind", TargetMinimumVersion="3.6.9", TargetSignatureTypes=new string[] {
                "System.Void",
                "System.String",
                "System.String",
                "System.String",
                "System.Boolean",
                "_"}, TargetType="RabbitMQ.Client.Impl.ModelBase")]
        public static void QueueBind(object model, string queue, string exchange, string routingKey, bool nowait, object arguments, int opCode, int mdToken, long moduleVersionPtr) { }
        [Datadog.Trace.ClrProfiler.InterceptMethod(TargetAssembly="RabbitMQ.Client", TargetMaximumVersion="6", TargetMethod="_Private_QueueDeclare", TargetMinimumVersion="3.6.9", TargetSignatureTypes=new string[] {
                "System.Void",
                "System.String",
                "System.Boolean",
                "System.Boolean",
                "System.Boolean",
                "System.Boolean",
                "System.Boolean",
                "_"}, TargetType="RabbitMQ.Client.Impl.ModelBase")]
        public static void QueueDeclare(object model, string queue, bool passive, bool durable, bool exclusive, bool autoDelete, bool nowait, object arguments, int opCode, int mdToken, long moduleVersionPtr) { }
        [Datadog.Trace.DuckTyping.DuckCopy]
        public struct BasicGetResultStruct
        {
            public Datadog.Trace.ClrProfiler.Integrations.RabbitMQIntegration.IBasicProperties BasicProperties;
            public Datadog.Trace.ClrProfiler.Integrations.RabbitMQIntegration.BodyStruct Body;
        }
        [Datadog.Trace.DuckTyping.DuckCopy]
        public struct BodyStruct
        {
            public int Length;
        }
        public interface IBasicProperties
        {
            byte DeliveryMode { get; }
            System.Collections.Generic.IDictionary<string, object> Headers { get; set; }
            bool IsDeliveryModePresent();
        }
    }
    public static class ServiceStackRedisIntegration
    {
        [Datadog.Trace.ClrProfiler.InterceptMethod(CallerAssembly="ServiceStack.Redis", TargetAssembly="ServiceStack.Redis", TargetMaximumVersion="5", TargetMinimumVersion="4", TargetSignatureTypes=new string[] {
                "T",
                "System.Byte[][]",
                "System.Func`1<T>",
                "System.Action`1<System.Func`1<T>>",
                "System.Boolean"}, TargetType="ServiceStack.Redis.RedisNativeClient")]
        public static T SendReceive<T>(object redisNativeClient, byte[][] cmdWithBinaryArgs, object fn, object completePipelineFn, bool sendWithoutRead, int opCode, int mdToken, long moduleVersionPtr) { }
        [Datadog.Trace.DuckTyping.DuckCopy]
        public struct RedisNativeClientData
        {
            public string Host;
            public int Port;
        }
    }
    public static class WcfIntegration
    {
        [Datadog.Trace.ClrProfiler.InterceptMethod(TargetAssembly="System.ServiceModel", TargetMaximumVersion="4", TargetMinimumVersion="4", TargetSignatureTypes=new string[] {
                "System.Boolean",
                "System.ServiceModel.Channels.RequestContext",
                "System.ServiceModel.OperationContext"}, TargetType="System.ServiceModel.Dispatcher.ChannelHandler")]
        public static bool HandleRequest(object channelHandler, object requestContext, object currentOperationContext, int opCode, int mdToken, long moduleVersionPtr) { }
    }
    public static class WebRequestIntegration
    {
        [Datadog.Trace.ClrProfiler.InterceptMethod(TargetAssembly="System", TargetMaximumVersion="4", TargetMinimumVersion="2", TargetSignatureTypes=new string[] {
                "System.IO.Stream"}, TargetType="System.Net.WebRequest")]
        [Datadog.Trace.ClrProfiler.InterceptMethod(TargetAssembly="System.Net.Requests", TargetMaximumVersion="5", TargetMinimumVersion="4", TargetSignatureTypes=new string[] {
                "System.IO.Stream"}, TargetType="System.Net.WebRequest")]
        public static object GetRequestStream(object webRequest, int opCode, int mdToken, long moduleVersionPtr) { }
        [Datadog.Trace.ClrProfiler.InterceptMethod(TargetAssembly="System", TargetMaximumVersion="4", TargetMinimumVersion="2", TargetSignatureTypes=new string[] {
                "System.Net.WebResponse"}, TargetType="System.Net.WebRequest")]
        [Datadog.Trace.ClrProfiler.InterceptMethod(TargetAssembly="System.Net.Requests", TargetMaximumVersion="5", TargetMinimumVersion="4", TargetSignatureTypes=new string[] {
                "System.Net.WebResponse"}, TargetType="System.Net.WebRequest")]
        public static object GetResponse(object webRequest, int opCode, int mdToken, long moduleVersionPtr) { }
        [Datadog.Trace.ClrProfiler.InterceptMethod(TargetAssembly="System", TargetMaximumVersion="4", TargetMinimumVersion="4", TargetSignatureTypes=new string[] {
                "System.Threading.Tasks.Task`1<System.Net.WebResponse>"}, TargetType="System.Net.WebRequest")]
        [Datadog.Trace.ClrProfiler.InterceptMethod(TargetAssembly="System.Net.Requests", TargetMaximumVersion="5", TargetMinimumVersion="4", TargetSignatureTypes=new string[] {
                "System.Threading.Tasks.Task`1<System.Net.WebResponse>"}, TargetType="System.Net.WebRequest")]
        public static object GetResponseAsync(object webRequest, int opCode, int mdToken, long moduleVersionPtr) { }
    }
}
namespace Datadog.Trace.ClrProfiler.Integrations.StackExchange.Redis
{
    public static class ConnectionMultiplexer
    {
        [Datadog.Trace.ClrProfiler.InterceptMethod(CallerAssembly="StackExchange.Redis", Integration="StackExchangeRedis", TargetAssembly="StackExchange.Redis", TargetMaximumVersion="2", TargetMinimumVersion="1", TargetSignatureTypes=new string[] {
                "System.Threading.Tasks.Task`1<T>",
                "StackExchange.Redis.Message",
                "StackExchange.Redis.ResultProcessor`1<T>",
                "System.Object",
                "StackExchange.Redis.ServerEndPoint"}, TargetType="StackExchange.Redis.ConnectionMultiplexer")]
        [Datadog.Trace.ClrProfiler.InterceptMethod(CallerAssembly="StackExchange.Redis.StrongName", Integration="StackExchangeRedis", TargetAssembly="StackExchange.Redis.StrongName", TargetMaximumVersion="2", TargetMinimumVersion="1", TargetSignatureTypes=new string[] {
                "System.Threading.Tasks.Task`1<T>",
                "StackExchange.Redis.Message",
                "StackExchange.Redis.ResultProcessor`1<T>",
                "System.Object",
                "StackExchange.Redis.ServerEndPoint"}, TargetType="StackExchange.Redis.ConnectionMultiplexer")]
        public static object ExecuteAsyncImpl<T>(object multiplexer, object message, object processor, object state, object server, int opCode, int mdToken, long moduleVersionPtr) { }
        [Datadog.Trace.ClrProfiler.InterceptMethod(CallerAssembly="StackExchange.Redis", Integration="StackExchangeRedis", TargetAssembly="StackExchange.Redis", TargetMaximumVersion="2", TargetMinimumVersion="1", TargetSignatureTypes=new string[] {
                "T",
                "StackExchange.Redis.Message",
                "StackExchange.Redis.ResultProcessor`1<T>",
                "StackExchange.Redis.ServerEndPoint"}, TargetType="StackExchange.Redis.ConnectionMultiplexer")]
        [Datadog.Trace.ClrProfiler.InterceptMethod(CallerAssembly="StackExchange.Redis.StrongName", Integration="StackExchangeRedis", TargetAssembly="StackExchange.Redis.StrongName", TargetMaximumVersion="2", TargetMinimumVersion="1", TargetSignatureTypes=new string[] {
                "T",
                "StackExchange.Redis.Message",
                "StackExchange.Redis.ResultProcessor`1<T>",
                "StackExchange.Redis.ServerEndPoint"}, TargetType="StackExchange.Redis.ConnectionMultiplexer")]
        public static T ExecuteSyncImpl<T>(object multiplexer, object message, object processor, object server, int opCode, int mdToken, long moduleVersionPtr) { }
        [Datadog.Trace.DuckTyping.DuckCopy]
        public struct MessageData
        {
            public string CommandAndKey;
        }
        [Datadog.Trace.DuckTyping.DuckCopy]
        public struct MultiplexerData
        {
            public string Configuration;
        }
    }
    public static class RedisBatch
    {
        [Datadog.Trace.ClrProfiler.InterceptMethod(CallerAssembly="StackExchange.Redis", Integration="StackExchangeRedis", TargetAssembly="StackExchange.Redis", TargetMaximumVersion="2", TargetMinimumVersion="1", TargetSignatureTypes=new string[] {
                "System.Threading.Tasks.Task`1<T>",
                "StackExchange.Redis.Message",
                "StackExchange.Redis.ResultProcessor`1<T>",
                "StackExchange.Redis.ServerEndPoint"}, TargetType="StackExchange.Redis.RedisBase")]
        [Datadog.Trace.ClrProfiler.InterceptMethod(CallerAssembly="StackExchange.Redis.StrongName", Integration="StackExchangeRedis", TargetAssembly="StackExchange.Redis.StrongName", TargetMaximumVersion="2", TargetMinimumVersion="1", TargetSignatureTypes=new string[] {
                "System.Threading.Tasks.Task`1<T>",
                "StackExchange.Redis.Message",
                "StackExchange.Redis.ResultProcessor`1<T>",
                "StackExchange.Redis.ServerEndPoint"}, TargetType="StackExchange.Redis.RedisBase")]
        public static object ExecuteAsync<T>(object redisBase, object message, object processor, object server, int opCode, int mdToken, long moduleVersionPtr) { }
        [Datadog.Trace.DuckTyping.DuckCopy]
        public struct BatchData
        {
            [Datadog.Trace.DuckTyping.Duck(Kind=Datadog.Trace.DuckTyping.DuckKind.Field, Name="multiplexer")]
            public Datadog.Trace.ClrProfiler.Integrations.StackExchange.Redis.RedisBatch.MultiplexerData Multiplexer;
        }
        [Datadog.Trace.DuckTyping.DuckCopy]
        public struct MessageData
        {
            public string CommandAndKey;
        }
        [Datadog.Trace.DuckTyping.DuckCopy]
        public struct MultiplexerData
        {
            public string Configuration;
        }
    }
}
namespace Datadog.Trace.ClrProfiler.Integrations.Testing
{
    public static class NUnitIntegration
    {
        [Datadog.Trace.ClrProfiler.InterceptMethod(TargetAssembly="nunit.framework", TargetMaximumVersion="3", TargetMethod="SkipChildren", TargetMinimumVersion="3.0", TargetSignatureTypes=new string[] {
                "System.Void",
                "_",
                "NUnit.Framework.Interfaces.ResultState",
                "System.String"}, TargetType="NUnit.Framework.Internal.Execution.CompositeWorkItem")]
        public static void CompositeWorkItem_SkipChildren(object compositeWorkItem, object testSuiteOrCompositeWorkItem, object resultState, object message, int opCode, int mdToken, long moduleVersionPtr) { }
        [Datadog.Trace.ClrProfiler.InterceptMethod(TargetAssembly="nunit.framework", TargetMaximumVersion="3", TargetMethod="WaitForCompletion", TargetMinimumVersion="3.0", TargetSignatureTypes=new string[] {
                "System.Boolean",
                "System.Int32"}, TargetType="NUnit.Framework.Api.NUnitTestAssemblyRunner")]
        public static object NUnitTestAssemblyRunner_WaitForCompletion(object testAssemblyRunner, int timeout, int opCode, int mdToken, long moduleVersionPtr) { }
        [Datadog.Trace.ClrProfiler.InterceptMethod(TargetAssembly="nunit.framework", TargetMaximumVersion="3", TargetMethod="Execute", TargetMinimumVersion="3.0", TargetSignatureTypes=new string[] {
                "NUnit.Framework.Internal.TestResult",
                "NUnit.Framework.Internal.TestExecutionContext"}, TargetType="NUnit.Framework.Internal.Commands.TestCommand")]
        public static object TestCommand_Execute(object testMethodCommand, object testExecutionContext, int opCode, int mdToken, long moduleVersionPtr) { }
        [Datadog.Trace.ClrProfiler.InterceptMethod(TargetAssembly="nunit.framework", TargetMaximumVersion="3", TargetMethod="ShutDown", TargetMinimumVersion="3.0", TargetSignatureTypes=new string[] {
                "System.Void"}, TargetType="NUnit.Framework.Internal.Execution.WorkShift")]
        public static void WorkShift_ShutDown(object workShift, int opCode, int mdToken, long moduleVersionPtr) { }
    }
    public static class XUnitIntegration
    {
        [Datadog.Trace.ClrProfiler.InterceptMethod(TargetAssemblies=new string[] {
                "xunit.execution.dotnet",
                "xunit.execution.desktop"}, TargetMaximumVersion="2", TargetMethod="RunTestCollectionAsync", TargetMinimumVersion="2.2", TargetSignatureTypes=new string[] {
                "System.Threading.Tasks.Task`1<Xunit.Sdk.RunSummary>",
                "Xunit.Sdk.IMessageBus",
                "Xunit.Abstractions.ITestCollection",
                "System.Collections.Generic.IEnumerable`1<T>",
                "System.Threading.CancellationTokenSource"}, TargetType="Xunit.Sdk.TestAssemblyRunner`1")]
        public static object AssemblyRunner_RunAsync(object xunitTestAssemblyRunner, object messageBus, object testCollection, object testCases, object cancellationTokenSource, int opCode, int mdToken, long moduleVersionPtr) { }
        [Datadog.Trace.ClrProfiler.InterceptMethod(TargetAssemblies=new string[] {
                "xunit.execution.dotnet",
                "xunit.execution.desktop"}, TargetMaximumVersion="2", TargetMethod="RunAsync", TargetMinimumVersion="2.2", TargetSignatureTypes=new string[] {
                "System.Threading.Tasks.Task`1<System.Decimal>"}, TargetType="Xunit.Sdk.TestInvoker`1")]
        public static object TestInvoker_RunAsync(object testInvoker, int opCode, int mdToken, long moduleVersionPtr) { }
        [Datadog.Trace.ClrProfiler.InterceptMethod(TargetAssemblies=new string[] {
                "xunit.execution.dotnet",
                "xunit.execution.desktop"}, TargetMaximumVersion="2", TargetMethod="QueueTestOutput", TargetMinimumVersion="2.2", TargetSignatureTypes=new string[] {
                "System.Void",
                "System.String"}, TargetType="Xunit.Sdk.TestOutputHelper")]
        public static void TestOutputHelper_QueueTestOutput(object testOutputHelper, object output, int opCode, int mdToken, long moduleVersionPtr) { }
        [Datadog.Trace.ClrProfiler.InterceptMethod(TargetAssemblies=new string[] {
                "xunit.execution.dotnet",
                "xunit.execution.desktop"}, TargetMaximumVersion="2", TargetMethod="RunAsync", TargetMinimumVersion="2.2", TargetSignatureTypes=new string[] {
                "System.Threading.Tasks.Task`1<Xunit.Sdk.RunSummary>"}, TargetType="Xunit.Sdk.TestRunner`1")]
        public static object TestRunner_RunAsync(object testRunner, int opCode, int mdToken, long moduleVersionPtr) { }
    }
}
namespace Datadog.Trace.Configuration
{
    public class CompositeConfigurationSource : Datadog.Trace.Configuration.IConfigurationSource, System.Collections.Generic.IEnumerable<Datadog.Trace.Configuration.IConfigurationSource>, System.Collections.IEnumerable
    {
        public CompositeConfigurationSource() { }
        public void Add(Datadog.Trace.Configuration.IConfigurationSource source) { }
        public bool? GetBool(string key) { }
        public System.Collections.Generic.IDictionary<string, string> GetDictionary(string key) { }
        public System.Collections.Generic.IDictionary<string, string> GetDictionary(string key, bool allowOptionalMappings) { }
        public double? GetDouble(string key) { }
        public int? GetInt32(string key) { }
        public string GetString(string key) { }
        public void Insert(int index, Datadog.Trace.Configuration.IConfigurationSource item) { }
    }
    public static class ConfigurationKeys
    {
        public const string AdoNetExcludedTypes = "DD_TRACE_ADONET_EXCLUDED_TYPES";
        public const string AgentHost = "DD_AGENT_HOST";
        public const string AgentPort = "DD_TRACE_AGENT_PORT";
        public const string AgentUri = "DD_TRACE_AGENT_URL";
        public const string ApiKey = "DD_API_KEY";
        public const string AppSecBlockingEnabled = "DD_APPSEC_BLOCKING_ENABLED";
        public const string AppSecEnabled = "DD_APPSEC_ENABLED";
        public const string BufferSize = "DD_TRACE_BUFFER_SIZE";
        public const string ConfigurationFileName = "DD_TRACE_CONFIG_FILE";
        public const string CustomSamplingRules = "DD_TRACE_SAMPLING_RULES";
        public const string DebugEnabled = "DD_TRACE_DEBUG";
        public const string DiagnosticSourceEnabled = "DD_DIAGNOSTIC_SOURCE_ENABLED";
        public const string DisabledIntegrations = "DD_DISABLED_INTEGRATIONS";
        public const string DogStatsDArgs = "DD_DOGSTATSD_ARGS";
        public const string DogStatsDPath = "DD_DOGSTATSD_PATH";
        public const string DogStatsdPort = "DD_DOGSTATSD_PORT";
        public const string Environment = "DD_ENV";
        public const string GlobalAnalyticsEnabled = "DD_TRACE_ANALYTICS_ENABLED";
        public const string GlobalSamplingRate = "DD_TRACE_SAMPLE_RATE";
        public const string GlobalTags = "DD_TAGS";
        public const string HeaderTags = "DD_TRACE_HEADER_TAGS";
        public const string HttpClientErrorStatusCodes = "DD_HTTP_CLIENT_ERROR_STATUSES";
        public const string HttpClientExcludedUrlSubstrings = "DD_TRACE_HTTP_CLIENT_EXCLUDED_URL_SUBSTRINGS";
        public const string HttpServerErrorStatusCodes = "DD_HTTP_SERVER_ERROR_STATUSES";
        public const string KafkaCreateConsumerScopeEnabled = "DD_TRACE_KAFKA_CREATE_CONSUMER_SCOPE_ENABLED";
        public const string LogDirectory = "DD_TRACE_LOG_DIRECTORY";
        public const string LogRateLimit = "DD_TRACE_LOGGING_RATE";
        public const string LogsInjectionEnabled = "DD_LOGS_INJECTION";
        public const string MaxLogFileSize = "DD_MAX_LOGFILE_SIZE";
        public const string MaxTracesSubmittedPerSecond = "DD_MAX_TRACES_PER_SECOND";
        public const string MetricsPipeName = "DD_DOGSTATSD_PIPE_NAME";
        public const string PartialFlushEnabled = "DD_TRACE_PARTIAL_FLUSH_ENABLED";
        public const string PartialFlushMinSpans = "DD_TRACE_PARTIAL_FLUSH_MIN_SPANS";
        public const string ProfilerLogPath = "DD_TRACE_LOG_PATH";
        public const string RuntimeMetricsEnabled = "DD_RUNTIME_METRICS_ENABLED";
        public const string SerializationBatchInterval = "DD_TRACE_BATCH_INTERVAL";
        public const string ServiceName = "DD_SERVICE";
        public const string ServiceNameMappings = "DD_TRACE_SERVICE_MAPPING";
        public const string ServiceVersion = "DD_VERSION";
        public const string StartupDiagnosticLogEnabled = "DD_TRACE_STARTUP_LOGS";
        public const string TraceAgentArgs = "DD_TRACE_AGENT_ARGS";
        public const string TraceAgentPath = "DD_TRACE_AGENT_PATH";
        public const string TraceAgentPortKey = "DD_APM_RECEIVER_PORT";
        public const string TraceEnabled = "DD_TRACE_ENABLED";
        public const string TracerMetricsEnabled = "DD_TRACE_METRICS_ENABLED";
        public const string TracesPipeName = "DD_TRACE_PIPE_NAME";
        public const string TracesPipeTimeoutMs = "DD_TRACE_PIPE_TIMEOUT_MS";
        public const string TracesTransport = "DD_TRACE_TRANSPORT";
        public static class Integrations
        {
            public const string AnalyticsEnabled = "DD_TRACE_{0}_ANALYTICS_ENABLED";
            public const string AnalyticsSampleRate = "DD_TRACE_{0}_ANALYTICS_SAMPLE_RATE";
            public const string Enabled = "DD_TRACE_{0}_ENABLED";
        }
    }
    public class EnvironmentConfigurationSource : Datadog.Trace.Configuration.StringConfigurationSource
    {
        public EnvironmentConfigurationSource() { }
        public override string GetString(string key) { }
    }
    public class GlobalSettings
    {
        public bool DebugEnabled { get; }
        public static Datadog.Trace.Configuration.GlobalSettings FromDefaultSources() { }
        public static void Reload() { }
        public static void SetDebugEnabled(bool enabled) { }
    }
    public interface IConfigurationSource
    {
        bool? GetBool(string key);
        System.Collections.Generic.IDictionary<string, string> GetDictionary(string key);
        System.Collections.Generic.IDictionary<string, string> GetDictionary(string key, bool allowOptionalMappings);
        double? GetDouble(string key);
        int? GetInt32(string key);
        string GetString(string key);
    }
    public class IntegrationSettings
    {
        public IntegrationSettings(string integrationName, Datadog.Trace.Configuration.IConfigurationSource source) { }
        public bool? AnalyticsEnabled { get; set; }
        public double AnalyticsSampleRate { get; set; }
        public bool? Enabled { get; set; }
        public string IntegrationName { get; }
    }
    public class IntegrationSettingsCollection
    {
        public IntegrationSettingsCollection(Datadog.Trace.Configuration.IConfigurationSource source) { }
        public Datadog.Trace.Configuration.IntegrationSettings this[string integrationName] { get; }
    }
    public class JsonConfigurationSource : Datadog.Trace.Configuration.IConfigurationSource
    {
        public JsonConfigurationSource(string json) { }
        public System.Collections.Generic.IDictionary<string, string> GetDictionary(string key) { }
        public System.Collections.Generic.IDictionary<string, string> GetDictionary(string key, bool allowOptionalMappings) { }
        public T GetValue<T>(string key) { }
        public static Datadog.Trace.Configuration.JsonConfigurationSource FromFile(string filename) { }
    }
    public class NameValueConfigurationSource : Datadog.Trace.Configuration.StringConfigurationSource
    {
        public NameValueConfigurationSource(System.Collections.Specialized.NameValueCollection nameValueCollection) { }
        public override string GetString(string key) { }
    }
    public abstract class StringConfigurationSource : Datadog.Trace.Configuration.IConfigurationSource
    {
        protected StringConfigurationSource() { }
        public virtual bool? GetBool(string key) { }
        public System.Collections.Generic.IDictionary<string, string> GetDictionary(string key) { }
        public System.Collections.Generic.IDictionary<string, string> GetDictionary(string key, bool allowOptionalMappings) { }
        public double? GetDouble(string key) { }
        public virtual int? GetInt32(string key) { }
        public abstract string GetString(string key);
        public static System.Collections.Generic.IDictionary<string, string> ParseCustomKeyValues(string data) { }
        public static System.Collections.Generic.IDictionary<string, string> ParseCustomKeyValues(string data, bool allowOptionalMappings) { }
    }
    public class TracerSettings
    {
        public const string DefaultAgentHost = "localhost";
        public const int DefaultAgentPort = 8126;
        public TracerSettings() { }
        public TracerSettings(Datadog.Trace.Configuration.IConfigurationSource source) { }
        public System.Collections.Generic.HashSet<string> AdoNetExcludedTypes { get; set; }
        public System.Uri AgentUri { get; set; }
        public bool AnalyticsEnabled { get; set; }
        public string CustomSamplingRules { get; set; }
        [System.Obsolete]
        public bool DebugEnabled { get; set; }
        public bool DiagnosticSourceEnabled { get; set; }
        public System.Collections.Generic.HashSet<string> DisabledIntegrationNames { get; set; }
        public int DogStatsdPort { get; set; }
        public string Environment { get; set; }
        public double? GlobalSamplingRate { get; set; }
        public System.Collections.Generic.IDictionary<string, string> GlobalTags { get; set; }
        public System.Collections.Generic.IDictionary<string, string> HeaderTags { get; set; }
        public Datadog.Trace.Configuration.IntegrationSettingsCollection Integrations { get; }
        public bool KafkaCreateConsumerScopeEnabled { get; set; }
        public bool LogsInjectionEnabled { get; set; }
        public int MaxTracesSubmittedPerSecond { get; set; }
        public string MetricsPipeName { get; set; }
        public bool PartialFlushEnabled { get; set; }
        public int PartialFlushMinSpans { get; set; }
        public bool RuntimeMetricsEnabled { get; set; }
        public string ServiceName { get; set; }
        public string ServiceVersion { get; set; }
        public bool StartupDiagnosticLogEnabled { get; set; }
        public bool TraceEnabled { get; set; }
        public bool TracerMetricsEnabled { get; set; }
        public string TracesPipeName { get; set; }
        public int TracesPipeTimeoutMs { get; set; }
        public string TracesTransport { get; set; }
        public void SetHttpClientErrorStatusCodes(System.Collections.Generic.IEnumerable<int> statusCodes) { }
        public void SetHttpServerErrorStatusCodes(System.Collections.Generic.IEnumerable<int> statusCodes) { }
        public void SetServiceNameMappings(System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<string, string>> mappings) { }
        public static Datadog.Trace.Configuration.CompositeConfigurationSource CreateDefaultConfigurationSource() { }
        public static Datadog.Trace.Configuration.TracerSettings FromDefaultSources() { }
    }
}
namespace Datadog.Trace
{
    public static class CorrelationIdentifier
    {
        public static string Env { get; }
        public static string Service { get; }
        public static ulong SpanId { get; }
        public static ulong TraceId { get; }
        public static string Version { get; }
    }
    public static class HttpHeaderNames
    {
        public const string Origin = "x-datadog-origin";
        public const string ParentId = "x-datadog-parent-id";
        public const string SamplingPriority = "x-datadog-sampling-priority";
        public const string TraceId = "x-datadog-trace-id";
        public const string TracingEnabled = "x-datadog-tracing-enabled";
    }
    public interface ISpanContext
    {
        string ServiceName { get; }
        ulong SpanId { get; }
        ulong TraceId { get; }
    }
    public enum SamplingPriority
    {
        UserReject = -1,
        AutoReject = 0,
        AutoKeep = 1,
        UserKeep = 2,
    }
    public class Scope : System.IDisposable
    {
        public Datadog.Trace.Span Span { get; }
        public void Close() { }
        public void Dispose() { }
    }
    public class Span : System.IDisposable
    {
        public bool Error { get; set; }
        public string OperationName { get; set; }
        public string ResourceName { get; set; }
        public string ServiceName { get; set; }
        public ulong SpanId { get; }
        public ulong TraceId { get; }
        public string Type { get; set; }
        public void Dispose() { }
        public void Finish() { }
        public void Finish(System.DateTimeOffset finishTimestamp) { }
        public string GetTag(string key) { }
        public void SetException(System.Exception exception) { }
        public Datadog.Trace.Span SetTag(string key, string value) { }
        public override string ToString() { }
    }
    public class SpanContext : Datadog.Trace.ISpanContext
    {
        public SpanContext(ulong? traceId, ulong spanId, Datadog.Trace.SamplingPriority? samplingPriority = default, string serviceName = null) { }
        public Datadog.Trace.ISpanContext Parent { get; }
        public ulong? ParentId { get; }
        public string ServiceName { get; set; }
        public ulong SpanId { get; }
        public ulong TraceId { get; }
    }
    public static class SpanKinds
    {
        public const string Client = "client";
        public const string Consumer = "consumer";
        public const string Producer = "producer";
        public const string Server = "server";
    }
    public static class SpanTypes
    {
        public const string Benchmark = "benchmark";
        public const string Build = "build";
        public const string Custom = "custom";
        public const string GraphQL = "graphql";
        public const string Http = "http";
        public const string MongoDb = "mongodb";
        public const string Queue = "queue";
        public const string Redis = "redis";
        public const string Sql = "sql";
        public const string Test = "test";
        public const string Web = "web";
    }
    public static class Tags
    {
        public const string AmqpCommand = "amqp.command";
        public const string AmqpDeliveryMode = "amqp.delivery_mode";
        public const string AmqpExchange = "amqp.exchange";
        public const string AmqpQueue = "amqp.queue";
        public const string AmqpRoutingKey = "amqp.routing_key";
        public const string Analytics = "_dd1.sr.eausr";
        public const string AspNetAction = "aspnet.action";
        public const string AspNetArea = "aspnet.area";
        public const string AspNetController = "aspnet.controller";
        public const string AspNetCoreAction = "aspnet_core.action";
        public const string AspNetCoreArea = "aspnet_core.area";
        public const string AspNetCoreController = "aspnet_core.controller";
        public const string AspNetCoreEndpoint = "aspnet_core.endpoint";
        public const string AspNetCorePage = "aspnet_core.page";
        public const string AspNetCoreRoute = "aspnet_core.route";
        public const string AspNetRoute = "aspnet.route";
        public const string AwsAgentName = "aws.agent";
        public const string AwsOperationName = "aws.operation";
        public const string AwsQueueName = "aws.queue.name";
        public const string AwsQueueUrl = "aws.queue.url";
        public const string AwsRegion = "aws.region";
        public const string AwsRequestId = "aws.requestId";
        public const string AwsServiceName = "aws.service";
        public const string AzureAppServicesExtensionVersion = "aas.environment.extension_version";
        public const string AzureAppServicesInstanceId = "aas.environment.instance_id";
        public const string AzureAppServicesInstanceName = "aas.environment.instance_name";
        public const string AzureAppServicesOperatingSystem = "aas.environment.os";
        public const string AzureAppServicesResourceGroup = "aas.resource.group";
        public const string AzureAppServicesResourceId = "aas.resource.id";
        public const string AzureAppServicesRuntime = "aas.environment.runtime";
        public const string AzureAppServicesSiteKind = "aas.site.kind";
        public const string AzureAppServicesSiteName = "aas.site.name";
        public const string AzureAppServicesSiteType = "aas.site.type";
        public const string AzureAppServicesSubscriptionId = "aas.subscription.id";
        public const string CosmosDbContainer = "cosmosdb.container";
        public const string DbName = "db.name";
        public const string DbType = "db.type";
        public const string DbUser = "db.user";
        public const string Env = "env";
        public const string ErrorMsg = "error.msg";
        public const string ErrorStack = "error.stack";
        public const string ErrorType = "error.type";
        [System.Obsolete("This field will be removed in futures versions of this library. Use ManualDrop in" +
            "stead.")]
        public const string ForceDrop = "force.drop";
        [System.Obsolete("This field will be removed in futures versions of this library. Use ManualKeep in" +
            "stead.")]
        public const string ForceKeep = "force.keep";
        public const string GraphQLOperationName = "graphql.operation.name";
        public const string GraphQLOperationType = "graphql.operation.type";
        public const string GraphQLSource = "graphql.source";
        public const string HttpMethod = "http.method";
        public const string HttpRequestHeadersHost = "http.request.headers.host";
        public const string HttpStatusCode = "http.status_code";
        public const string HttpUrl = "http.url";
        public const string InstrumentationName = "component";
        public const string InstrumentedMethod = "instrumented.method";
        public const string KafkaOffset = "kafka.offset";
        public const string KafkaPartition = "kafka.partition";
        public const string KafkaTombstone = "kafka.tombstone";
        public const string Language = "language";
        public const string ManualDrop = "manual.drop";
        public const string ManualKeep = "manual.keep";
        public const string Measured = "_dd.measured";
        public const string MessageSize = "message.size";
        public const string MongoDbCollection = "mongodb.collection";
        public const string MongoDbQuery = "mongodb.query";
        public const string MsmqCommand = "msmq.command";
        public const string MsmqIsTransactionalQueue = "msmq.queue.transactional";
        public const string MsmqMessageWithTransaction = "msmq.message.transactional";
        public const string MsmqQueuePath = "msmq.queue.path";
        public const string Origin = "_dd.origin";
        public const string OutHost = "out.host";
        public const string OutPort = "out.port";
        public const string RedisRawCommand = "redis.raw_command";
        public const string SamplingPriority = "sampling.priority";
        public const string SpanKind = "span.kind";
        public const string SqlQuery = "sql.query";
        public const string SqlRows = "sql.rows";
        public const string Version = "version";
    }
    public class Tracer
    {
        public Tracer() { }
        public Tracer(Datadog.Trace.Configuration.TracerSettings settings) { }
        public Datadog.Trace.Scope ActiveScope { get; }
        public string DefaultServiceName { get; }
        public Datadog.Trace.Configuration.TracerSettings Settings { get; }
        public static Datadog.Trace.Tracer Instance { get; set; }
        public Datadog.Trace.Scope ActivateSpan(Datadog.Trace.Span span, bool finishOnClose = true) { }
        protected override void Finalize() { }
        public System.Threading.Tasks.Task ForceFlushAsync() { }
        public Datadog.Trace.Scope StartActive(string operationName, Datadog.Trace.ISpanContext parent = null, string serviceName = null, System.DateTimeOffset? startTime = default, bool ignoreActiveScope = false, bool finishOnClose = true) { }
        public Datadog.Trace.Span StartSpan(string operationName, Datadog.Trace.ISpanContext parent = null, string serviceName = null, System.DateTimeOffset? startTime = default, bool ignoreActiveScope = false) { }
        public static Datadog.Trace.Tracer Create(System.Uri agentEndpoint = null, string defaultServiceName = null, bool isDebugEnabled = false) { }
    }
}
namespace Datadog.Trace.DiagnosticListeners
{
    public interface IEndpointFeature
    {
        [Datadog.Trace.DuckTyping.Duck(Name="Microsoft.AspNetCore.Http.Features.IEndpointFeature.get_Endpoint")]
        Datadog.Trace.DiagnosticListeners.RouteEndpoint GetEndpoint();
    }
    [Datadog.Trace.DuckTyping.DuckCopy]
    public struct RouteEndpoint
    {
        public string DisplayName;
        public Datadog.Trace.DiagnosticListeners.RoutePattern RoutePattern;
    }
    [Datadog.Trace.DuckTyping.DuckCopy]
    public struct RoutePattern
    {
        public System.Collections.IEnumerable PathSegments;
        public string RawText;
    }
}
namespace Datadog.Trace.DuckTyping
{
    public delegate T CreateProxyInstance<T>(object instance);
    [System.AttributeUsage(System.AttributeTargets.Method | System.AttributeTargets.Property | System.AttributeTargets.Field | System.AttributeTargets.All, AllowMultiple=false)]
    public class DuckAttribute : System.Attribute
    {
        public const System.Reflection.BindingFlags DefaultFlags = 124;
        public DuckAttribute() { }
        public System.Reflection.BindingFlags BindingFlags { get; set; }
        public string ExplicitInterfaceTypeName { get; set; }
        public string[] GenericParameterTypeNames { get; set; }
        public Datadog.Trace.DuckTyping.DuckKind Kind { get; set; }
        public string Name { get; set; }
        public string[] ParameterTypeNames { get; set; }
    }
    [System.AttributeUsage(System.AttributeTargets.Struct | System.AttributeTargets.All, AllowMultiple=false)]
    public class DuckCopyAttribute : System.Attribute
    {
        public DuckCopyAttribute() { }
    }
    [System.AttributeUsage(System.AttributeTargets.Method | System.AttributeTargets.Property | System.AttributeTargets.Field | System.AttributeTargets.All, AllowMultiple=false)]
    public class DuckIgnoreAttribute : System.Attribute
    {
        public DuckIgnoreAttribute() { }
    }
    [System.AttributeUsage(System.AttributeTargets.Method | System.AttributeTargets.All, AllowMultiple=false)]
    public class DuckIncludeAttribute : System.Attribute
    {
        public DuckIncludeAttribute() { }
    }
    public enum DuckKind
    {
        Property = 0,
        Field = 1,
    }
    [System.AttributeUsage(System.AttributeTargets.Method | System.AttributeTargets.All)]
    public class DuckReverseMethodAttribute : System.Attribute
    {
        public DuckReverseMethodAttribute() { }
        public DuckReverseMethodAttribute(params string[] arguments) { }
        public string[] Arguments { get; }
    }
    public static class DuckType
    {
        public static readonly System.Reflection.MethodInfo EnumToObjectMethodInfo;
        public static readonly System.Reflection.MethodInfo GetTypeFromHandleMethodInfo;
        public static bool CanCreate(System.Type proxyType, object instance) { }
        public static bool CanCreate<T>(object instance) { }
        public static Datadog.Trace.DuckTyping.IDuckType Create(System.Type proxyType, object instance) { }
        public static T Create<T>(object instance) { }
        public static Datadog.Trace.DuckTyping.DuckType.CreateTypeResult GetOrCreateProxyType(System.Type proxyType, System.Type targetType) { }
        public readonly struct CreateTypeResult
        {
            public readonly bool Success;
            public readonly System.Type TargetType;
            public System.Type ProxyType { get; }
            public bool CanCreate() { }
            public T CreateInstance<T>(object instance) { }
        }
        public static class CreateCache<T>
        {
            public static readonly bool IsVisible;
            public static readonly System.Type Type;
            public static bool CanCreate(object instance) { }
            public static T Create(object instance) { }
            public static Datadog.Trace.DuckTyping.DuckType.CreateTypeResult GetProxy(System.Type targetType) { }
        }
        public static class DelegateCache<TProxyDelegate>
            where TProxyDelegate : System.Delegate
        {
            public static TProxyDelegate GetDelegate() { }
        }
    }
    public class DuckTypeException : System.Exception { }
    public static class DuckTypeExtensions
    {
        public static object DuckAs(this object instance, System.Type targetType) { }
        public static T DuckAs<T>(this object instance)
            where T :  class { }
        public static object DuckCast(this object instance, System.Type targetType) { }
        public static T DuckCast<T>(this object instance) { }
        public static bool DuckIs(this object instance, System.Type targetType) { }
        public static bool DuckIs<T>(this object instance) { }
        public static bool TryDuckCast(this object instance, System.Type targetType, out object value) { }
        public static bool TryDuckCast<T>(this object instance, out T value) { }
    }
    public class DuckTypeFieldIsReadonlyException : Datadog.Trace.DuckTyping.DuckTypeException { }
    public class DuckTypeInvalidTypeConversionException : Datadog.Trace.DuckTyping.DuckTypeException { }
    public class DuckTypePropertyArgumentsLengthException : Datadog.Trace.DuckTyping.DuckTypeException { }
    public class DuckTypePropertyCantBeReadException : Datadog.Trace.DuckTyping.DuckTypeException { }
    public class DuckTypePropertyCantBeWrittenException : Datadog.Trace.DuckTyping.DuckTypeException { }
    public class DuckTypePropertyOrFieldNotFoundException : Datadog.Trace.DuckTyping.DuckTypeException { }
    public class DuckTypeProxyAndTargetMethodParameterSignatureMismatchException : Datadog.Trace.DuckTyping.DuckTypeException { }
    public class DuckTypeProxyMethodParameterIsMissingException : Datadog.Trace.DuckTyping.DuckTypeException { }
    public class DuckTypeProxyMethodsWithGenericParametersNotSupportedInNonPublicInstancesException : Datadog.Trace.DuckTyping.DuckTypeException { }
    public class DuckTypeProxyTypeDefinitionIsNull : Datadog.Trace.DuckTyping.DuckTypeException { }
    public class DuckTypeStructMembersCannotBeChangedException : Datadog.Trace.DuckTyping.DuckTypeException { }
    public class DuckTypeTargetMethodAmbiguousMatchException : Datadog.Trace.DuckTyping.DuckTypeException { }
    public class DuckTypeTargetMethodNotFoundException : Datadog.Trace.DuckTyping.DuckTypeException { }
    public class DuckTypeTargetObjectInstanceIsNull : Datadog.Trace.DuckTyping.DuckTypeException { }
    public class DuckTypeTypeIsNotPublicException : Datadog.Trace.DuckTyping.DuckTypeException { }
    public interface IDuckType
    {
        object Instance { get; }
        System.Type Type { get; }
    }
}
namespace Datadog.Trace.ExtensionMethods
{
    public static class SpanExtensions
    {
        public static void AddTagsFromDbCommand(this Datadog.Trace.Span span, System.Data.IDbCommand command) { }
        public static void SetTraceSamplingPriority(this Datadog.Trace.Span span, Datadog.Trace.SamplingPriority samplingPriority) { }
    }
}
namespace Datadog.Trace.Logging
{
    public interface ILogProvider
    {
        Datadog.Trace.Logging.Logger GetLogger(string name);
        System.IDisposable OpenMappedContext(string key, object value, bool destructure = false);
        System.IDisposable OpenNestedContext(string message);
    }
    public enum LogLevel
    {
        Trace = 0,
        Debug = 1,
        Info = 2,
        Warn = 3,
        Error = 4,
        Fatal = 5,
    }
    public static class LogProvider
    {
        public static bool IsDisabled { get; set; }
        public static void SetCurrentLogProvider(Datadog.Trace.Logging.ILogProvider logProvider) { }
    }
    public delegate bool Logger(Datadog.Trace.Logging.LogLevel logLevel, System.Func<string> messageFunc, System.Exception exception = null, params object[] formatParameters);
}
namespace Datadog.Trace.Logging.LogProviders
{
    public class LibLogException : System.Exception
    {
        public LibLogException(string message) { }
        public LibLogException(string message, System.Exception inner) { }
    }
}
namespace Datadog.Trace.ServiceFabric
{
    public interface IServiceRemotingFailedResponseEventArgs
    {
        System.Exception? Error { get; }
    }
    public interface IServiceRemotingRequestEventArgs
    {
        string? MethodName { get; }
        Datadog.Trace.ServiceFabric.IServiceRemotingRequestMessage? Request { get; }
        System.Uri? ServiceUri { get; }
    }
    public interface IServiceRemotingRequestMessage
    {
        Datadog.Trace.ServiceFabric.IServiceRemotingRequestMessageHeader GetHeader();
    }
    public interface IServiceRemotingRequestMessageHeader
    {
        int InterfaceId { get; }
        string? InvocationId { get; }
        int MethodId { get; }
        string? MethodName { get; }
        void AddHeader(string headerName, byte[] headerValue);
        bool TryGetHeaderValue(string headerName, out byte[]? headerValue);
    }
}
namespace System.Runtime.CompilerServices
{
    [System.AttributeUsage(System.AttributeTargets.Assembly | System.AttributeTargets.All, AllowMultiple=true)]
    public class IgnoresAccessChecksToAttribute : System.Attribute { }
}