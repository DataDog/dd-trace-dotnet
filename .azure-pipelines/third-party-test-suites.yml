trigger: none
pr: none

schedules:
- cron: "0 3 * * *"
  displayName: Daily 3am (UTC) build
  branches:
    include:
    - master
  always: true

# Global variables
variables:
  buildConfiguration: Release
  dotnetCoreSdk5Version: 5.0.103
  ddApiKey: $(DD_API_KEY)
  DD_DOTNET_TRACER_MSBUILD:
  NugetPackageDirectory: $(System.DefaultWorkingDirectory)/packages
  relativeNugetPackageDirectory: packages
  dotnetToolTag: build-dotnet-tool
  testServiceName: dd-trace-dotnet-third-party

# Declare the datadog agent as a resource to be used as a pipeline service
resources:
  containers:
  - container: dd_agent
    image: datadog/agent
    ports:
    - 8126:8126
    env:
      DD_API_KEY: $(ddApiKey)
      DD_INSIDE_CI: true

stages:
- stage: run_tests
  dependsOn: []
  jobs:
  - job: Postgres
    strategy:
      matrix:
        Ubuntu_Major5:
          imageName: ubuntu-20.04
          os: ubuntu
          tagName: v5.0.7
        Windows_Major5:
          imageName: windows-2019
          os: windows
          tagName: v5.0.7
          serverDirectory: npgsql/.build
        Ubuntu_Major4:
          imageName: ubuntu-20.04
          os: ubuntu
          tagName: v4.1.9
        Windows_Major4:
          imageName: windows-2019
          os: windows
          tagName: v4.1.9
          serverDirectory: npgsql/.build

    variables:
      pg_major: 13
      postgis_version: 3

    pool:
      vmImage: $(imageName)

    # Enable the Datadog Agent service for this job
    services:
      dd_agent: dd_agent

    steps:

    - checkout: none

    # Download the latest runner tool from the 'consolidated-pipeline' pipeline, from the master branch
    - task: DownloadPipelineArtifact@2
      inputs:
        source: 'specific'
        project: 'dd-trace-dotnet'
        pipeline: 54
        runVersion: 'latestFromBranch'
        runBranch: 'refs/heads/master'
        tags: '$(dotnetToolTag)'
        allowFailedBuilds: true # The consolidated pipeline may fail on test runs. Maybe we could break them up into a cascading set of jobs?

        artifact: runner-dotnet-tool
        patterns: '**/*.nupkg'
        path: $(Pipeline.Workspace)/runner-dotnet-tool

    - script: dotnet tool install --global --add-source $(Pipeline.Workspace)/runner-dotnet-tool dd-trace
      displayName: Install dd-trace tool

    - script: |
        git clone https://github.com/npgsql/npgsql.git
        cd $(System.DefaultWorkingDirectory)/npgsql
        git checkout $(tagName)
      displayName: Checkout npgsql at tag $(tagName)

    - bash: |
        # Sourced from https://github.com/npgsql/npgsql/blob/v5.0.4/.github/workflows/build.yml

        # First uninstall any PostgreSQL installed on the image
        dpkg-query -W --showformat='${Package}\n' 'postgresql-*' | xargs sudo dpkg -P postgresql

        wget --quiet -O - https://www.postgresql.org/media/keys/ACCC4CF8.asc | sudo apt-key add -
        sudo sh -c 'echo "deb http://apt.postgresql.org/pub/repos/apt/ focal-pgdg main 13" >> /etc/apt/sources.list.d/pgdg.list'
        sudo apt-get update -qq
        sudo apt-get install -qq postgresql-${{ variables.pg_major }}
        sudo -u postgres psql -c "CREATE USER npgsql_tests SUPERUSER PASSWORD 'npgsql_tests'"
        sudo -u postgres psql -c "CREATE DATABASE npgsql_tests OWNER npgsql_tests"
        sudo -u postgres psql -c "CREATE EXTENSION citext" npgsql_tests
        sudo -u postgres psql -c "CREATE EXTENSION hstore" npgsql_tests
        sudo -u postgres psql -c "CREATE EXTENSION ltree" npgsql_tests

        # To disable PostGIS for prereleases (because it usually isn't available until late), surround with the following:
        # if [ -z "${{ variables.pg_prerelease }}" ]; then
          sudo apt-get install -qq postgresql-${{ variables.pg_major }}-postgis-${{ variables.postgis_version }}
          sudo -u postgres psql -c "CREATE EXTENSION postgis" npgsql_tests

        export PGDATA=/etc/postgresql/${{ variables.pg_major }}/main
        sudo sed -i 's/#ssl = off/ssl = on/' $PGDATA/postgresql.conf
        sudo sed -i 's/#max_prepared_transactions = 0/max_prepared_transactions = 10/' $PGDATA/postgresql.conf
        sudo sed -i 's/#password_encryption = md5/password_encryption = scram-sha-256/' $PGDATA/postgresql.conf
        sudo sed -i 's/#wal_level =/wal_level = logical #/' $PGDATA/postgresql.conf
        sudo sed -i 's/#max_wal_senders =/max_wal_senders = 50 #/' $PGDATA/postgresql.conf
        sudo sed -i 's/#wal_sender_timeout =/wal_sender_timeout = 3s #/' $PGDATA/postgresql.conf
        sudo sed -i "s/#synchronous_standby_names =/synchronous_standby_names = 'npgsql_test_sync_standby' #/" $PGDATA/postgresql.conf
        sudo sed -i "s/#synchronous_commit =/synchronous_commit = local #/" $PGDATA/postgresql.conf
        # Disable trust authentication, requiring MD5 passwords - some tests must fail if a password isn't provided.
        sudo sh -c "echo 'local all all trust' > $PGDATA/pg_hba.conf"
        sudo sh -c "echo 'host all npgsql_tests_scram all scram-sha-256' >> $PGDATA/pg_hba.conf"
        sudo sh -c "echo 'host all all all md5' >> $PGDATA/pg_hba.conf"
        sudo sh -c "echo 'host replication all all md5' >> $PGDATA/pg_hba.conf"
        sudo pg_ctlcluster ${{ variables.pg_major }} main restart

        # user 'npgsql_tests_scram' must be created with password encrypted as scram-sha-256 (which only applies after restart)
        sudo -u postgres psql -c "CREATE USER npgsql_tests_scram SUPERUSER PASSWORD 'npgsql_tests_scram'"
      displayName: Start PostgreSQL ${{ variables.pg_major }} (Linux)
      condition: startsWith(variables['imageName'], 'ubuntu')

    - bash: |
        # Sourced from https://github.com/npgsql/npgsql/blob/v5.0.4/.github/workflows/build.yml

        # Find EnterpriseDB version number
        EDB_VERSION=$(pwsh -c "
            \$global:progressPreference='silentlyContinue';
            Invoke-WebRequest -URI https://www.postgresql.org/applications-v2.xml |
                Select-Object -ExpandProperty Content |
                Select-Xml -XPath '/applications/application[id=\"postgresql_${{ variables.pg_major }}\" and platform=\"windows-x64\"]/version/text()' |
                Select-Object -First 1 -ExpandProperty Node |
                Select-Object -ExpandProperty Value")

        # Install PostgreSQL
        echo "Installing PostgreSQL (version: ${EDB_VERSION})"
        curl -o pgsql.zip -L https://get.enterprisedb.com/postgresql/postgresql-${EDB_VERSION}-windows-x64-binaries.zip
        unzip pgsql.zip -x 'pgsql/include/**' 'pgsql/doc/**' 'pgsql/pgAdmin 4/**' 'pgsql/StackBuilder/**'

        # Match Npgsql CI Docker image and stash one level up
        cp {$(serverDirectory),pgsql}/server.crt
        cp {$(serverDirectory),pgsql}/server.key

        # Find OSGEO version number
        OSGEO_VERSION=$(\
          curl -Ls https://download.osgeo.org/postgis/windows/pg${{ variables.pg_major }} |
          sed -n 's/.*>postgis-bundle-pg${{ variables.pg_major }}-\(${{ variables.postgis_version }}.[0-9]*.[0-9]*\)x64.zip<.*/\1/p' |
          tail -n 1)

        # Install PostGIS
        echo "Installing PostGIS (version: ${OSGEO_VERSION})"
        POSTGIS_FILE="postgis-bundle-pg${{ variables.pg_major }}-${OSGEO_VERSION}x64"
        curl -o postgis.zip -L https://download.osgeo.org/postgis/windows/pg${{ variables.pg_major }}/${POSTGIS_FILE}.zip
        unzip postgis.zip -d postgis
        cp -a postgis/$POSTGIS_FILE/. pgsql/

        # Start PostgreSQL
        pgsql/bin/initdb -D pgsql/PGDATA -E UTF8 -U postgres
        SOCKET_DIR=$(echo "$LOCALAPPDATA\Temp" | sed 's|\\|/|g')
        sed -i "s|#unix_socket_directories = ''|unix_socket_directories = '$SOCKET_DIR'|" pgsql/PGDATA/postgresql.conf
        sed -i "s|#wal_level =|wal_level = logical #|" pgsql/PGDATA/postgresql.conf
        sed -i "s|#max_wal_senders =|max_wal_senders = 50 #|" pgsql/PGDATA/postgresql.conf
        sed -i "s|#wal_sender_timeout =|wal_sender_timeout = 3s #|" pgsql/PGDATA/postgresql.conf
        sed -i "s|#synchronous_standby_names =|synchronous_standby_names = 'npgsql_test_sync_standby' #|" pgsql/PGDATA/postgresql.conf
        sed -i "s|#synchronous_commit =|synchronous_commit = local #|" pgsql/PGDATA/postgresql.conf
        pgsql/bin/pg_ctl -D pgsql/PGDATA -l logfile -o '-c max_prepared_transactions=10 -c ssl=true -c ssl_cert_file=../server.crt -c ssl_key_file=../server.key' start

        # Configure test account
        pgsql/bin/psql -U postgres -c "CREATE ROLE npgsql_tests SUPERUSER LOGIN PASSWORD 'npgsql_tests'"
        pgsql/bin/psql -U postgres -c "CREATE DATABASE npgsql_tests OWNER npgsql_tests"
        pgsql/bin/psql -U postgres -c "CREATE EXTENSION citext" npgsql_tests
        pgsql/bin/psql -U postgres -c "CREATE EXTENSION hstore" npgsql_tests
        pgsql/bin/psql -U postgres -c "CREATE EXTENSION ltree" npgsql_tests
        pgsql/bin/psql -U postgres -c "CREATE EXTENSION postgis" npgsql_tests

        # user 'npgsql_tests_scram' must be created with password encrypted as scram-sha-256 (which only applies after restart)
        sed -i "s|#password_encryption = md5|password_encryption = scram-sha-256|" pgsql/PGDATA/postgresql.conf

        pgsql/bin/pg_ctl -D pgsql/PGDATA -l logfile -o '-c max_prepared_transactions=10 -c ssl=true -c ssl_cert_file=../server.crt -c ssl_key_file=../server.key' restart

        pgsql/bin/psql -U postgres -c "CREATE ROLE npgsql_tests_scram SUPERUSER LOGIN PASSWORD 'npgsql_tests_scram'"

        # Disable trust authentication except for unix domain sockets, requiring MD5
        # passwords - some tests must fail if a password isn't provided.
        if [ ${{ variables.pg_major }} -ge 13 ]; then
              echo "local all all trust" > pgsql/PGDATA/pg_hba.conf
              echo "host all npgsql_tests_scram all scram-sha-256" >> pgsql/PGDATA/pg_hba.conf
        else
              echo "host all npgsql_tests_scram all scram-sha-256" > pgsql/PGDATA/pg_hba.conf
        fi
        echo "host all all all md5" >> pgsql/PGDATA/pg_hba.conf
        echo "host replication all all md5" >> pgsql/PGDATA/pg_hba.conf
      displayName: Start PostgreSQL ${{ variables.pg_major }} (Windows)
      condition: startsWith(variables['imageName'], 'windows')

    - script: |
        dd-trace --dd-env=CI --dd-service=$(testServiceName) --dd-version=$(tagName) -- dotnet "test npgsql/test/Npgsql.Tests --logger trx;LogFileName=npgsql.tests.$(tagName).trx --results-directory npgsql/test/results"
      env:
        DOTNET_SKIP_FIRST_TIME_EXPERIENCE: true
      displayName: Test

    - script: |
        dd-trace --dd-env=CI --dd-service=$(testServiceName) --dd-version=$(tagName) -- dotnet "test npgsql/test/Npgsql.PluginTests --logger trx;LogFileName=npgsql.plugintests.$(os).$(tagName).trx --results-directory npgsql/test/results"
      env:
        DOTNET_SKIP_FIRST_TIME_EXPERIENCE: true
      displayName: Test Plugins

    - task: PublishTestResults@2
      displayName: publish test results
      inputs:
        testResultsFormat: VSTest
        testResultsFiles: npgsql/test/**/*.trx
        testRunTitle: Postgres-$(os)-$(tagName)
        failTaskOnFailedTests: true
      condition: succeededOrFailed()