parameters:
  - name: groupNumber
    type: string

steps:
- template: clone-repo.yml
  parameters:
    targetShaId: $(targetShaId)
    targetBranch: $(targetBranch)

- template: restore-working-directory-for-tests.yml
  parameters:
    artifactSuffix: $(artifactSuffix)

- template: download-samples.yml
  parameters:
    framework: $(publishTargetFramework)

- template: run-in-docker.yml
  parameters:
    build: true
    baseImage: $(baseImage)
    command: "BuildLinuxIntegrationTests CompileTrimmingSamples --framework $(publishTargetFramework) --IncludeTestsRequiringDocker true --Filter $(IntegrationTestFilter) --SampleName $(IntegrationTestSampleName)"
    apiKey: $(DD_LOGGER_DD_API_KEY)
    retryCountForRunCommand: 3

- script: |
    export COMPOSE_PROFILES=group${{ parameters.groupNumber }}
    docker-compose -p $(DockerComposeProjectName)-g${{ parameters.groupNumber }} build --build-arg baseImage=$(baseImage) --build-arg framework=$(publishTargetFramework) --build-arg CodeCoverageEnabled=$(CodeCoverageEnabled) --build-arg Filter=$(IntegrationTestFilter) --build-arg SampleName=$(IntegrationTestSampleName) IntegrationTests
    docker-compose -p $(DockerComposeProjectName)-g${{ parameters.groupNumber }} run --rm StartDependencies.Group${{ parameters.groupNumber }}
  env:
    baseImage: $(baseImage)
    framework: $(publishTargetFramework)
    Filter: $(IntegrationTestFilter)
    SampleName: $(IntegrationTestSampleName)
    DD_LOGGER_DD_API_KEY: $(ddApiKey)
    COMPOSE_PROFILES: group${{ parameters.groupNumber }}
  displayName: docker-compose build IntegrationTests and run StartDependencies (Group ${{ parameters.groupNumber }})
  retryCountOnTaskFailure: 5

- script: |
    export COMPOSE_PROFILES=group${{ parameters.groupNumber }}
    docker-compose -f docker-compose.yml -p $(DockerComposeProjectName)-g${{ parameters.groupNumber }} \
      run --rm \
      -e baseImage=$(baseImage) \
      -e framework=$(publishTargetFramework) \
      -e CodeCoverageEnabled=$(CodeCoverageEnabled) \
      -e IncludeTestsRequiringDocker=true \
      -e Filter=$(IntegrationTestFilter) \
      -e SampleName=$(IntegrationTestSampleName) \
      -e Area=$(area) \
      IntegrationTests
  displayName: docker-compose run IntegrationTests (Group ${{ parameters.groupNumber }})
  env:
    DD_LOGGER_DD_API_KEY: $(ddApiKey)
    baseImage: $(baseImage)
    COMPOSE_PROFILES: group${{ parameters.groupNumber }}

- script: docker-compose -f docker-compose.yml -p $(DockerComposeProjectName)-g${{ parameters.groupNumber }} logs
  displayName: docker-compose logs
  env:
    DD_LOGGER_DD_API_KEY: $(ddApiKey)
    COMPOSE_PROFILES: group${{ parameters.groupNumber }}
  condition: succeededOrFailed()
  continueOnError: true

- script: docker-compose -f docker-compose.yml -p $(DockerComposeProjectName)-g${{ parameters.groupNumber }} down
  displayName: docker-compose stop services
  env:
    DD_LOGGER_DD_API_KEY: $(ddApiKey)
    COMPOSE_PROFILES: group${{ parameters.groupNumber }}
  condition: succeededOrFailed()
  continueOnError: true

- template: make-artifacts-uploadable.yml

- publish: artifacts/build_data
  artifact: _$(System.StageName)_$(Agent.JobName)_logs_$(System.JobAttempt)
  condition: always()
  continueOnError: true

- task: PublishTestResults@2
  displayName: publish test results
  inputs:
    testResultsFormat: VSTest
    testResultsFiles: artifacts/build_data/results/**/*.trx
  condition: succeededOrFailed()

- publish: tracer/test/snapshots
  displayName: Uploading snapshots
  artifact: _$(System.StageName)_$(Agent.JobName)_snapshots_$(System.JobAttempt)
  condition: always()
  continueOnError: true

- template: run-in-docker.yml
  parameters:
    baseImage: $(baseImage)
    command: "CheckBuildLogsForErrors"
    apiKey: $(DD_LOGGER_DD_API_KEY)
