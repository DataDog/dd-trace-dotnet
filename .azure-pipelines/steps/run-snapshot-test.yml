parameters:
  - name: 'target'
    type: 'string'

  - name: 'snapshotPrefix'
    type: 'string'
    
  - name: isLinux
    type: boolean
    default: true

  - name: isNoop
    type: boolean
    default: false

  - name: 'apiKey'
    type: string
    default: ''
  
  - name: 'dockerComposePath'
    type: string
    default: 'docker-compose'

steps:
- template: ./clean-docker-containers.yml

- bash: |
    echo "##vso[task.setvariable variable=TOKEN]$(System.JobId)"
    echo "##vso[task.setvariable variable=START_ENDPOINT]/test/session/start?test_session_token=$(System.JobId)"
    echo "##vso[task.setvariable variable=TRACE_DUMP_ENDPOINT]/test/session/traces?test_session_token=$(System.JobId)"
    echo "##vso[task.setvariable variable=STATS_DUMP_ENDPOINT]/test/session/stats?test_session_token=$(System.JobId)"
    echo "##vso[task.setvariable variable=REQUESTS_DUMP_ENDPOINT]/test/session/requests?test_session_token=$(System.JobId)"
    
    if [ "$(publishFramework)" = "netcoreapp2.1" ]; then
      snapshotfile="${{ parameters.snapshotPrefix }}_snapshots_2_1"
    else
      snapshotfile="${{ parameters.snapshotPrefix }}_snapshots"
    fi
    
    echo "##vso[task.setvariable variable=VERIFY_ENDPOINT]/test/session/snapshot?test_session_token=$(System.JobId)&file=/snapshots/$snapshotfile"
  displayName: Set endpoints

- ${{ if eq(parameters.isLinux, true) }}:
  - bash: |
      echo "##vso[task.setvariable variable=CURL_COMMAND]/usr/bin/curl"
      echo "##vso[task.setvariable variable=TEST_AGENT_TARGET]test-agent"
      echo "##vso[task.setvariable variable=START_TEST_AGENT_TARGET]start-test-agent"
      echo "##vso[task.setvariable variable=COMPOSE_PATH]docker-compose.yml"
    displayName: Set env-specific variables

  - script: |
      mkdir -p artifacts/build_data/snapshots
      mkdir -p artifacts/build_data/logs
      mkdir -p artifacts/build_data/dumps
      # make sure that the container have enough rights to write in this folder
      sudo chmod -R 777 artifacts/build_data/ || true
    displayName: create test data directories
- ${{ else }}:
  - bash: |
      echo "##vso[task.setvariable variable=CURL_COMMAND]curl"
      echo "##vso[task.setvariable variable=TEST_AGENT_TARGET]test-agent.windows"
      echo "##vso[task.setvariable variable=START_TEST_AGENT_TARGET]start-test-agent.windows"
      echo "##vso[task.setvariable variable=COMPOSE_PATH]docker-compose.windows.yml"
    displayName: Set env-specific  variables

- bash: |
    ${{ parameters.dockerComposePath }} -f $(COMPOSE_PATH) -p ddtrace_$(Build.BuildNumber) run --rm $(START_TEST_AGENT_TARGET)
  env:
    dockerTag: $(dockerTag)
    DD_LOGGER_DD_API_KEY: ${{ parameters.apiKey }}
  displayName: docker-compose run start-test-agent
  retryCountOnTaskFailure: 3

- script: |
    echo "Starting snapshot session"
    ${{ parameters.dockerComposePath }} -f $(COMPOSE_PATH) -p ddtrace_$(Build.BuildNumber) exec -T $(TEST_AGENT_TARGET) $(CURL_COMMAND) --fail "http://localhost:8126$(START_ENDPOINT)"
  displayName: start snapshot session
  env:
    DD_LOGGER_DD_API_KEY: ${{ parameters.apiKey }}

- bash: |
    ${{ parameters.dockerComposePath }} -f $(COMPOSE_PATH) -p ddtrace_$(Build.BuildNumber) run -e dockerTag=$(dockerTag) -e PROFILER_IS_NOT_REQUIRED=${{ parameters.isNoop }} ${{ parameters.target }}
  env:
    dockerTag: $(dockerTag)
    DD_LOGGER_DD_API_KEY: ${{ parameters.apiKey }}
  displayName: ${{ parameters.dockerComposePath }} run ${{ parameters.target }}

- script: |
    echo "Dumping traces"
    ${{ parameters.dockerComposePath }} -f $(COMPOSE_PATH) -p ddtrace_$(Build.BuildNumber) exec -T $(TEST_AGENT_TARGET) $(CURL_COMMAND) -o /debug_snapshots/${{ parameters.snapshotPrefix }}_traces.json "http://localhost:8126$(TRACE_DUMP_ENDPOINT)"
    
    echo "Dumping stats"
    ${{ parameters.dockerComposePath }} -f $(COMPOSE_PATH) -p ddtrace_$(Build.BuildNumber) exec -T $(TEST_AGENT_TARGET) $(CURL_COMMAND) -o /debug_snapshots/${{ parameters.snapshotPrefix }}_stats.json "http://localhost:8126$(STATS_DUMP_ENDPOINT)"
    
    echo "Dumping all requests"
    ${{ parameters.dockerComposePath }} -f $(COMPOSE_PATH) -p ddtrace_$(Build.BuildNumber) exec -T $(TEST_AGENT_TARGET) $(CURL_COMMAND) -o /debug_snapshots/${{ parameters.snapshotPrefix }}_requests.json "http://localhost:8126$(REQUESTS_DUMP_ENDPOINT)"
  displayName: dump snapshots
  env:
    DD_LOGGER_DD_API_KEY: ${{ parameters.apiKey }}

- ${{ if and(eq(parameters.isLinux, true), eq(parameters.isNoop, false)) }}:
  - bash: |
      echo "Verifying snapshot session (fail on mis-match)"
      ${{ parameters.dockerComposePath }} -f $(COMPOSE_PATH) -p ddtrace_$(Build.BuildNumber) exec -T $(TEST_AGENT_TARGET) $(CURL_COMMAND) --w '\nGetting a 400 means there is a diff in snapshots. You can diff the files with the artifacts generated. You can also run the tests locally. Follow the doc in /docs/development/CI/RunSmokeTestsLocally\n' --fail "http://localhost:8126$(VERIFY_ENDPOINT)"
    displayName: check snapshots
    env:
      DD_LOGGER_DD_API_KEY: ${{ parameters.apiKey }}
- ${{ elseif and(eq(parameters.isLinux, true), eq(parameters.isNoop, true)) }}:
    - bash: |
        path="/debug_snapshots/${{ parameters.snapshotPrefix }}_requests.json"
        echo "Verifying noop snapshot session (requests should be empty)"
        if [ -s $path ]; then
          echo "$path is not empty"
          if [ "$(cat "$path" | tr -d '\n')" = "[]" ]; then
            echo "$path contains no requests[]"
          else
            echo "The file unexpectedly contained requests"
          exit 1
          fi
        else
          echo "$path was empty"
        fi
      displayName: check noop snapshots
- ${{ else }}:
  - bash: |
      echo "Verifying snapshot session (fail on mis-match)"
      ${{ parameters.dockerComposePath }} -f $(COMPOSE_PATH) -p ddtrace_$(Build.BuildNumber) exec -T $(TEST_AGENT_TARGET) $(CURL_COMMAND) --fail "http://localhost:8126$(VERIFY_ENDPOINT)"
    displayName: check snapshots
    env:
      DD_LOGGER_DD_API_KEY: ${{ parameters.apiKey }}

- script: ${{ parameters.dockerComposePath }} -f $(COMPOSE_PATH) -p ddtrace_$(Build.BuildNumber) logs $(TEST_AGENT_TARGET)
  displayName: dump docker-compose logs for $(TEST_AGENT_TARGET)
  env:
    DD_LOGGER_DD_API_KEY: ${{ parameters.apiKey }}
  condition: succeededOrFailed()
  continueOnError: true

- script: ${{ parameters.dockerComposePath }} -f $(COMPOSE_PATH) -p ddtrace_$(Build.BuildNumber) down
  displayName: docker-compose stop services
  env:
    DD_LOGGER_DD_API_KEY: ${{ parameters.apiKey }}
  condition: succeededOrFailed()
  continueOnError: true

# Run crash tests
- ${{ if and(eq(parameters.isLinux, true), eq(parameters.isNoop, false)) }}:
  - bash: |
      LOGS=$(${{ parameters.dockerComposePath }} -f $(COMPOSE_PATH) -p ddtrace_$(Build.BuildNumber) run -e dockerTag=$(dockerTag) -e CRASH_APP_ON_STARTUP=1 -e COMPlus_DbgEnableMiniDump=0 ${{ parameters.target }})
      echo $LOGS

      # check logs for evidence of crash detection in the output
      expected="The crash may have been caused by automatic instrumentation"
      if [[ $LOGS == *"$expected"* ]]; then
        echo "Correctly found evidence of crash detection"
      else
        echo "Did not find required evidence of crash detection running"
        exit 1;
      fi

    env:
      dockerTag: $(dockerTag)
      DD_LOGGER_DD_API_KEY: ${{ parameters.apiKey }}
    displayName: Check logs for evidence of crash output
    condition: eq(variables['runCrashTest'], 'true')

- ${{ if eq(parameters.isLinux, true) }}:
    - script: |
        sudo chmod -R 644 artifacts/build_data/dumps/* || true
      displayName: Make dumps uploadable to AzDo
      condition: succeededOrFailed()

- script: |
    docker network prune -f
  displayName: Clean up docker networks
  condition: succeededOrFailed()
  continueOnError: true

    