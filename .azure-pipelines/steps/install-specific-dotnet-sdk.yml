parameters:
  - name: frameworkVersion
    type: string
    default: ''
  
  - name: includeX86
    type: boolean
    default: false

steps:

# Always installing the latest version as I think it is necessary for build scripts
- ${{ if eq(variables['Agent.OS'], 'Windows_NT') }}:
  - ${{ if eq(parameters.includeX86, true) }}:
    - template: install-dotnet-sdk-manually.yml
      parameters:
        sdkVersion: $(dotnetCoreSdkLatestVersion)
        is64bit: false
  - ${{ else }}:
    - template: install-dotnet-sdk-manually.yml
      parameters:
        sdkVersion: $(dotnetCoreSdkLatestVersion)
        is64bit: true

- ${{ else }}:
  # For non-Windows, just install the latest SDK
  - task: UseDotNet@2
    displayName: install latest dotnet SDK
    inputs:
      packageType: sdk
      version: $(dotnetCoreSdkLatestVersion)
    retryCountOnTaskFailure: 5

- bash: |
    # check if the framework version starts with 'net4'
    FRAMEWORK=$(echo "${{ parameters.frameworkVersion }}" | tr '[:upper:]' '[:lower:]')
    if [[ $FRAMEWORK == net4* ]]; then
      echo "##vso[task.setvariable variable=isNetFx]true"
      echo "Framework is .NET Framework ${{ parameters.frameworkVersion }} - no specific SDK needed beyond the latest"
    else
      echo "##vso[task.setvariable variable=isNetFx]false"
    fi
  displayName: Check if .NET Framework
  failOnStderr: true

# skip .NET Framewrok
- bash: |
    # convert it to lowercase just in case
    FRAMEWORK=$(echo "${{ parameters.frameworkVersion }}" | tr '[:upper:]' '[:lower:]')

    # Extract the version number from framework
    if [[ $FRAMEWORK == netcoreapp* ]]; then
      VERSION=${FRAMEWORK#netcoreapp} # "netcoreapp3.1" -> "3.1"
      echo "Detected .NET Core version: $VERSION"
    elif [[ $FRAMEWORK == net[56789]* ]]; then
      VERSION=${FRAMEWORK#net} # "net6.0" -> "6.0"
      echo "Detected .NET version: $VERSION"
    else
      echo "Detected .NET Framework - skipping: $FRAMEWORK"
      exit 0
    fi

    # Set SDK version based on framework version
    # 9.0 is in here, but don't think it gets hit
    case "$VERSION" in
      2.1)
        SDK_VERSION="2.1.x"
        CHANNEL="2.1"
        ;;
      3.0)
        SDK_VERSION="3.0.x"
        CHANNEL="3.0"
        ;;
      3.1)
        SDK_VERSION="3.1.x"
        CHANNEL="3.1"
        ;;
      5.0)
        SDK_VERSION="5.0.x"
        CHANNEL="5.0"
        ;;
      6.0)
        SDK_VERSION="6.0.x"
        CHANNEL="6.0"
        ;;
      7.0)
        SDK_VERSION="7.0.x"
        CHANNEL="7.0"
        ;;
      8.0)
        SDK_VERSION="8.0.x"
        CHANNEL="8.0"
        ;;
      9.0)
        SDK_VERSION="9.0.x"
        CHANNEL="9.0"
        ;;
      *)
        echo "Unknown framework version: $VERSION"
        exit 1
        ;;
    esac

    echo "Framework: $FRAMEWORK, Version: $VERSION, SDK Version: $SDK_VERSION, Channel: $CHANNEL"
    # set the necessary pipeline variables
    echo "##vso[task.setvariable variable=sdkVersion]$SDK_VERSION"
    echo "##vso[task.setvariable variable=sdkChannel]$CHANNEL"
    echo "##vso[task.setvariable variable=installSpecificSdk]true"
  displayName: Determine SDK version
  failOnStderr: true
  condition: eq(variables['isNetFx'], 'false')

# Install the specific SDK version needed for this test
- bash: |
    if [[ "$AGENT_OS" == "Windows_NT" ]]; then
      echo "##vso[task.setvariable variable=isWindows]true"
    else
      echo "##vso[task.setvariable variable=isWindows]false"
    fi
  displayName: Determine agent OS

- ${{ if eq(variables['Agent.OS'], 'Windows_NT') }}:
  - ${{ if eq(variables['installSpecificSdk'], 'true') }}:
    - template: install-dotnet-sdk-manually.yml
      parameters:
        channel: $(sdkChannel)

  - ${{ if and(eq(parameters.includeX86, true), eq(variables['installSpecificSdk'], 'true')) }}:
    - template: install-dotnet-sdk-manually.yml
      parameters:
        channel: $(sdkChannel)
        is64bit: false

# Linux/macOS-specific steps
- ${{ else }}:
  - task: UseDotNet@2
    displayName: install dotnet SDK $(sdkVersion)
    inputs:
      packageType: sdk
      version: $(sdkVersion)
    retryCountOnTaskFailure: 5
    condition: eq(variables['installSpecificSdk'], 'true')
