parameters:
  - name: targetShaId
    type: string

  - name: targetBranch
    type: string

steps:
- ${{ if endsWith(variables['build.sourceBranch'], '/merge') }}:
  - checkout: none
  - bash: |
      # Azure devops _doesn't_ clean up the contents of the repo after the pipeline has finished
      # So we do it manually
      echo "Cleaning up source directories ..."
      sudo rm -rf $BUILD_REPOSITORY_LOCALPATH/*
      
      # As this is a pull request, we need to do a fake merge
      # uses similar process to existing checkout task
      prBranch=$SYSTEM_PULLREQUEST_SOURCEBRANCH
      echo "Checking out merge commit for ${{ parameters.targetShaId }} and $prBranch"
      git version
      git lfs version
      echo "Initializing repository at $BUILD_REPOSITORY_LOCALPATH ..."
      git init "$BUILD_REPOSITORY_LOCALPATH"
      echo "Adding remote $BUILD_REPOSITORY_URI ..."
      git remote add origin "$BUILD_REPOSITORY_URI"
      git config gc.auto 0
      git config --get-all http.$BUILD_REPOSITORY_URI.extraheader
      git config --get-all http.extraheader
      git config --get-regexp .*extraheader
      git config --get-all http.proxy
      git config http.version HTTP/1.1
      echo "Force fetching ${{ parameters.targetBranch }} and $prBranch ..."
      git fetch --force --tags --prune --prune-tags --progress --no-recurse-submodules origin +refs/heads/${{ parameters.targetBranch }}:refs/remotes/origin/${{ parameters.targetBranch }} +refs/heads/$prBranch:refs/remotes/origin/$prBranch
      echo "Checking out $prBranch..."
      git checkout --force $prBranch
      echo "Resetting $prBranch to origin/$prBranch ..."
      git reset origin/$prBranch --hard
      echo "Running git clean -ffdx ..."
      git clean -ffdx
    displayName: checkout
    condition: and(succeeded(), not(eq(variables['Agent.OS'], 'Windows_NT')))

  - bash: |
      echo "Updating credentials ..."
      git config user.email "gitfun@example.com"
      git config user.name "Automatic Merge"

      prBranch=$SYSTEM_PULLREQUEST_SOURCEBRANCH
      echo "Merging $prBranch with ${{ parameters.targetShaId }} ..."
      git merge ${{ parameters.targetShaId }}
      
      mergeInProgress=$?
      if [ $mergeInProgress -ne 0 ]
      then
        echo "Merge failed, rolling back ..."
        git merge --abort
        exit 1;
      fi

      echo "Merge successful"
      git status
    displayName: merge
    condition: and(succeeded(), not(eq(variables['Agent.OS'], 'Windows_NT')))

  - powershell: |
      echo "Cleaning up source directories ..."
      $localPath=$env:BUILD_REPOSITORY_LOCALPATH
      rm $localPath/* -r -fo

      # As this is a pull request, we need to do a fake merge
      # uses similar process to existing checkout task
      $prBranch=$env:SYSTEM_PULLREQUEST_SOURCEBRANCH
      echo "Checking out merge commit for ${{ parameters.targetShaId }} and $prBranch"
      echo "Checking out merge commit for ${{ parameters.targetShaId }} and $prBranch"
      git version
      # Disabled in the windows version
      # git lfs version 

      echo "Initializing repository at $localPath ..."
      git init --initial-branch=${{ parameters.targetBranch }} "$localPath"

      cd $localPath

      $repoUri=$env:BUILD_REPOSITORY_URI
      echo "Adding remote $repoUri ..."
      git remote add origin "$repoUri"

      git config gc.auto 0
      git config --get-all http.$repoUri.extraheader
      git config --get-all http.extraheader
      git config --get-regexp .*extraheader
      git config --get-all http.proxy
      git config http.version HTTP/1.1

      echo "Force fetching ${{ parameters.targetBranch }} and $prBranch ..."
      echo "git fetch --force --tags --prune --prune-tags --progress --no-recurse-submodules origin +refs/heads/${{ parameters.targetBranch }}:refs/remotes/origin/${{ parameters.targetBranch }} +refs/heads/${prBranch}:refs/remotes/origin/${prBranch}"
      git fetch --force --tags --prune --prune-tags --progress --no-recurse-submodules origin +refs/heads/${{ parameters.targetBranch }}:refs/remotes/origin/${{ parameters.targetBranch }} +refs/heads/${prBranch}:refs/remotes/origin/${prBranch}

      echo "Checking out $prBranch..."
      git checkout --force $prBranch

      echo "Resetting $prBranch to origin/$prBranch ..."
      git reset origin/$prBranch --hard
      echo "Running git clean -ffdx ..."
      git clean -ffdx
    displayName: checkout
    condition: and(succeeded(), eq(variables['Agent.OS'], 'Windows_NT'))

  - powershell: |
      echo "Updating credentials ..."
      git config user.email "gitfun@example.com"
      git config user.name "Automatic Merge"
      $prBranch=$env:SYSTEM_PULLREQUEST_SOURCEBRANCH

      echo "Merging $prBranch with ${{ parameters.targetShaId }} ..."
      git merge ${{ parameters.targetShaId }}

      $mergeInProgress=$LASTEXITCODE
      if("$mergeInProgress" -ne "0") {
        echo "Merge failed, rolling back ..."
        git merge --abort
        exit 1;
      }

      echo "Merge successful"
      git status
    displayName: merge
    condition: and(succeeded(), eq(variables['Agent.OS'], 'Windows_NT'))

- ${{ else }}:
    # The clean doesn't always work, so sudo rm -rf it
  - bash: sudo rm -rf $BUILD_REPOSITORY_LOCALPATH/*
    displayName: clean
    condition: and(succeeded(), not(eq(variables['Agent.OS'], 'Windows_NT')))

  - powershell: rm "$env:BUILD_REPOSITORY_LOCALPATH/*" -r -fo
    displayName: clean
    condition: and(succeeded(), eq(variables['Agent.OS'], 'Windows_NT'))

  - checkout: self
    clean: true
