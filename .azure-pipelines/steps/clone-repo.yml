parameters:
  - name: masterCommitId
    type: string
    default: stageDependencies.master_commit_id.fetch.outputs['$MASTER_SHA']

steps:
- bash: |
    printenv
    echo "SYSTEM_PULLREQUEST_SOURCEBRANCH=" $SYSTEM_PULLREQUEST_SOURCEBRANCH 
    echo "variables.system.pullRequest.sourceCommitId=" ${{ variables['system.pullRequest.sourceCommitId'] }} 
    echo "System.PullRequest.SourceCommitId=" ${{ variables['System.PullRequest.SourceCommitId'] }} 
    echo "coalesce=" ${{ coalesce(variables['System.PullRequest.SourceCommitId'], 0) }} 
    echo "eq=" ${{ eq(coalesce(variables['System.PullRequest.SourceCommitId'], 0), 0) }}
    echo "masterCommitId= ${{ parameters.masterCommitId }}"
    echo "variables= ${{ convertToJson(variables) }} "
- ${{ if endsWith(variables['build.sourceBranch'], '/merge') }}:
  - checkout: none
  - bash: |
      # As this is a pull request, we need to do a fake merge
      # uses similar process to existing checkout task
      prBranch=$SYSTEM_PULLREQUEST_SOURCEBRANCH
      echo "Checking out merge commit for ${{ parameters.masterCommitId }} and $prBranch"
      git version
      git lfs version
      git config --global init.defaultBranch master
      git init "$BUILD_REPOSITORY_LOCALPATH"
      git remote add origin "$BUILD_REPOSITORY_URI"
      git config gc.auto 0
      git config --get-all http.$BUILD_REPOSITORY_URI.extraheader
      git config --get-all http.extraheader
      git config --get-regexp .*extraheader
      git config --get-all http.proxy
      git config http.version HTTP/1.1
      git fetch --force --tags --prune --prune-tags --quiet --no-recurse-submodules origin +refs/heads/master:refs/remotes/origin/master +refs/heads/$prBranch:refs/remotes/origin/$prBranch
      git checkout --force $prBranch
      git merge ${{ parameters.masterCommitId }}
    displayName: checkout and merge
    failOnStderr: true
- ${{ else }}:
  - checkout: self
