name: "Lib Injection Test"
on:
  workflow_call:
    secrets:
      DOCKER_REGISTRY_GITHUB_TOKEN:
        required: true
    inputs:
      commit_id:
        description: 'The commit ID to run the test against'
        required: true
        type: string
      runtime:
        description: 'The runtime to use to run the tests (e.g. bullseye-slim, alpine)'
        required: true
        type: string

jobs:
  test-image:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    env:
      TEST_LIBRARY: dotnet
      WEBLOG_VARIANT: 'dd-lib-dotnet-init-test-app'
      DOCKER_REGISTRY_IMAGES_PATH: ghcr.io/datadog
      DOCKER_IMAGE_TAG: ${{ inputs.commit_id }}${{ inputs.runtime == 'alpine' && '-musl' || '' }}
      DOCKER_IMAGE_WEBLOG_TAG: ${{ inputs.commit_id }}-${{ inputs.runtime }}
      RUNTIME: ${{ inputs.runtime }}
      BUILDX_PLATFORMS: linux/amd64
    steps:
      - name: Checkout system tests
        uses: actions/checkout@v2
        with:
            repository: 'DataDog/system-tests'

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2
    
      - name: Set up Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@v2
        with:
          install: true
          config-inline: |
            [worker.oci]
              max-parallelism = 1

      - name: Log in to the Container registry
        uses: docker/login-action@343f7c4344506bcbf9b4de18042ae17996df046d # 3.0.0
        with:
          registry: ghcr.io/datadog
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
          
      - name: Install runner
        uses: ./.github/actions/install_runner 

      - name: Build weblog base images
        env:
          APP_DOCKER_IMAGE_REPO: ghcr.io/datadog/system-tests/${{ env.WEBLOG_VARIANT }}
        run: |
          cd lib-injection/build/docker/$TEST_LIBRARY/$WEBLOG_VARIANT 
          LIBRARY_INJECTION_TEST_APP_IMAGE=$APP_DOCKER_IMAGE_REPO:$DOCKER_IMAGE_WEBLOG_TAG ./build.sh
          cd ..

      - name: Run K8s Lib Injection Tests
        run: ./run.sh K8S_LIB_INJECTION_BASIC

      - name: Compress logs
        id: compress_logs
        if: always()
        run: tar -czvf artifact.tar.gz $(ls | grep logs)

      - name: Upload artifact
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: logs_k8s_lib_injection_${{ env.WEBLOG_VARIANT }}_${{ env.RUNTIME }}
          path: artifact.tar.gz
