name: "Lib Injection Test"
on:
  # This GitHub Action will be invoked automatically from the main Azure DevOps build
  workflow_dispatch:
    inputs:
      azdo_build_id:
        description: 'The specific AzDo build from which the release artifacts will be downloaded.'
        required: true

jobs:
  build-and-publish-init-image:
    runs-on: ubuntu-latest
    env:
      AZURE_DEVOPS_TOKEN: "${{ secrets.AZURE_DEVOPS_TOKEN }}"
    steps:
    - name: Checkout
      uses: actions/checkout@v3
      with:
        fetch-depth: 0

    - uses: actions/setup-dotnet@v1
      with:
        dotnet-version: '7.0.101'

    - name: "Get current version"
      id: versions
      run: ./tracer/build.sh OutputCurrentVersionToGitHub

    - name: "Download build assets from Azure Pipelines"
      id: assets
      run: ./tracer/build.sh DownloadAzurePipelineFromBuild
      env:
        AzureDevopsBuildId: "${{ github.event.inputs.azdo_build_id }}"

    - name: Copy ./lib-injection files to artifacts path
      shell: bash
      run: |
        cp ./lib-injection/* ${{steps.assets.outputs.artifacts_path}}

        # Temporarily create a placeholder linux-musl-arm directory
        mkdir -p ${{steps.assets.outputs.artifacts_path}}/linux-musl-arm
        touch ${{steps.assets.outputs.artifacts_path}}/linux-musl-arm/placeholder.txt

    - name: Set up QEMU
      uses: docker/setup-qemu-action@v2

    - name: Set up Docker Buildx
      id: buildx
      uses: docker/setup-buildx-action@v2

    - name: Generate libc image tags
      id: lib-injection-tags
      uses: DataDog/system-tests/lib-injection/docker-tags@main
      with:
        init-image-name: 'dd-lib-dotnet-init'
        main-branch-name: 'master'

    - name: Generate musl image tags
      id: generate-musl-tags
      shell: pwsh
      run: |
        $input = "${{ steps.lib-injection-tags.outputs.tag-names }}"
        $muslTagNames = @($input.Split(",") | ForEach-Object { $_ + "-musl" }) -join ","

        echo "Generated musl tag names '$muslTagNames'"
        echo "::set-output name=musl-tag-names::$muslTagNames"

    - name: Login to Docker
      run: docker login -u publisher -p ${{ secrets.GITHUB_TOKEN }} ghcr.io

    - name: Docker Build linux-x64 image
      uses: docker/build-push-action@v3
      with:
        push: true
        tags: ${{ steps.lib-injection-tags.outputs.tag-names }}
        platforms: 'linux/amd64' # for windows, we can run windows/amd64,windows/386,windows/arm64
        context: ${{steps.assets.outputs.artifacts_path}}
        build-args: |
          LINUX_PACKAGE=datadog-dotnet-apm-${{steps.versions.outputs.version}}.tar.gz

    - name: Docker Build linux-arm64 image
      uses: docker/build-push-action@v3
      with:
        push: true
        tags: ${{ steps.lib-injection-tags.outputs.tag-names }}
        platforms: 'linux/arm64/v8'
        context: ${{steps.assets.outputs.artifacts_path}}
        build-args: |
          LINUX_PACKAGE=datadog-dotnet-apm-${{steps.versions.outputs.version}}.arm64.tar.gz

    - name: Docker Build linux-musl-x64 image
      uses: docker/build-push-action@v3
      with:
        push: true
        tags: ${{ steps.generate-musl-tags.outputs.musl-tag-names }}
        platforms: 'linux/amd64'
        context: ${{steps.assets.outputs.artifacts_path}}
        build-args: |
          LINUX_PACKAGE=datadog-dotnet-apm-${{steps.versions.outputs.version}}-musl.tar.gz

    - name: Docker Build linux-musl-arm64 image
      uses: docker/build-push-action@v3
      with:
        push: true
        tags: ${{ steps.generate-musl-tags.outputs.musl-tag-names }}
        platforms: 'linux/arm64/v8'
        context: ${{steps.assets.outputs.artifacts_path}}
        # When we actually produce linux-musl-arm64 binaries, use that instead of the placeholder 'linux-musl-arm' directory
        build-args: |
          LINUX_PACKAGE=linux-musl-arm
