name: "Lib Injection Test"
on:
  # This GitHub Action will be invoked automatically from the main Azure DevOps build
  workflow_dispatch:
    inputs:
      azdo_build_id:
        description: 'The specific AzDo build from which the release artifacts will be downloaded.'
        required: true

jobs:
  build-and-publish-init-image:
    runs-on: ubuntu-latest
    env:
      AZURE_DEVOPS_TOKEN: "${{ secrets.AZURE_DEVOPS_TOKEN }}"
    steps:
    - name: Checkout
      uses: actions/checkout@v3
      with:
        fetch-depth: 0

    - uses: actions/setup-dotnet@v1
      with:
        dotnet-version: '7.0.101'

    - name: "Get current version"
      id: versions
      run: ./tracer/build.sh OutputCurrentVersionToGitHub

    - name: "Download build assets from Azure Pipelines"
      id: assets
      run: ./tracer/build.sh DownloadAzurePipelineFromBuild
      env:
        AzureDevopsBuildId: "${{ github.event.inputs.azdo_build_id }}"

    - name: Copy ./lib-injection files to artifacts path
      shell: bash
      run: |
        cp ./lib-injection/* ${{steps.assets.outputs.artifacts_path}}

        # Temporarily create a placeholder linux-musl-arm directory
        mkdir -p ${{steps.assets.outputs.artifacts_path}}/linux-musl-arm
        touch ${{steps.assets.outputs.artifacts_path}}/linux-musl-arm/placeholder.txt

    - name: Set up QEMU
      uses: docker/setup-qemu-action@v2

    - name: Set up Docker Buildx
      id: buildx
      uses: docker/setup-buildx-action@v2

    - name: Login to Docker
      run: docker login -u publisher -p ${{ secrets.GITHUB_TOKEN }} ghcr.io

    - name: Build and push dd-lib-dotnet-init:<SHA>-amd64
      id: build-image-amd64
      uses: docker/build-push-action@v3
      with:
        push: true
        tags: 'ghcr.io/datadog/dd-trace-dotnet/dd-lib-dotnet-init:${{ github.sha }}'
        platforms: 'linux/amd64' # for windows, we can run windows/amd64,windows/386,windows/arm64
        context: ${{steps.assets.outputs.artifacts_path}}
        build-args: |
          LINUX_PACKAGE=datadog-dotnet-apm-${{steps.versions.outputs.version}}.tar.gz

    - name: Build and push dd-lib-dotnet-init:<SHA>-arm64v8
      id: build-image-arm64v8
      uses: docker/build-push-action@v3
      with:
        push: true
        tags: 'ghcr.io/datadog/dd-trace-dotnet/dd-lib-dotnet-init:${{ github.sha }}'
        platforms: 'linux/arm64/v8'
        context: ${{steps.assets.outputs.artifacts_path}}
        build-args: |
          LINUX_PACKAGE=datadog-dotnet-apm-${{steps.versions.outputs.version}}.arm64.tar.gz

    - name: Build and push dd-lib-dotnet-init:<SHA>-musl-amd64
      id: build-image-musl-amd64
      uses: docker/build-push-action@v3
      with:
        push: true
        tags: 'ghcr.io/datadog/dd-trace-dotnet/dd-lib-dotnet-init:${{ github.sha }}-musl'
        platforms: 'linux/amd64'
        context: ${{steps.assets.outputs.artifacts_path}}
        build-args: |
          LINUX_PACKAGE=datadog-dotnet-apm-${{steps.versions.outputs.version}}-musl.tar.gz

    - name: Build and push dd-lib-dotnet-init:<SHA>-musl-arm64v8
      id: build-image-musl-arm64v8
      uses: docker/build-push-action@v3
      with:
        push: true
        tags: 'ghcr.io/datadog/dd-trace-dotnet/dd-lib-dotnet-init:${{ github.sha }}-musl'
        platforms: 'linux/arm64/v8'
        context: ${{steps.assets.outputs.artifacts_path}}
        # When we actually produce linux-musl-arm64 binaries, use that instead of the placeholder 'linux-musl-arm' directory
        build-args: |
          LINUX_PACKAGE=linux-musl-arm

    - name: Publish multiarch images with all platforms
      shell: bash
      run: |
        # Issue: The above 'docker buildx build' commands only create an image for one platform at a time because we have different build-args for each invocation.
        # This results in the 'dd-lib-dotnet-init:<SHA>[-musl]' tag being overwritten by the latest build command, so the result is not a multiarch image

        # Fix: The following lines create and publish a new manifest to overwrite the 'dd-lib-dotnet-init:<SHA>[-musl]' tag.
        # In the new manifest we directly reference each platform-specific image, so the tag becomes a multiarch image.
        
        docker manifest create \
          ghcr.io/datadog/dd-trace-dotnet/dd-lib-dotnet-init:${{ github.sha }} \
          --amend "ghcr.io/datadog/dd-trace-dotnet/dd-lib-dotnet-init@${{steps.build-image-amd64.outputs.digest}}" \
          --amend "ghcr.io/datadog/dd-trace-dotnet/dd-lib-dotnet-init@${{steps.build-image-arm64v8.outputs.digest}}"
        docker manifest push ghcr.io/datadog/dd-trace-dotnet/dd-lib-dotnet-init:${{ github.sha }}

        docker manifest create \
          ghcr.io/datadog/dd-trace-dotnet/dd-lib-dotnet-init:${{ github.sha }}-musl \
          --amend "ghcr.io/datadog/dd-trace-dotnet/dd-lib-dotnet-init@${{steps.build-image-musl-amd64.outputs.digest}}" \
          --amend "ghcr.io/datadog/dd-trace-dotnet/dd-lib-dotnet-init@${{steps.build-image-musl-arm64v8.outputs.digest}}"
        docker manifest push ghcr.io/datadog/dd-trace-dotnet/dd-lib-dotnet-init:${{ github.sha }}-musl

  test:
    needs:
      - build-and-publish-init-image
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    strategy:
      matrix:
        lib-injection-connection: ['network','uds']
        lib-injection-use-admission-controller: ['', 'use-admission-controller']
        weblog-variant: ['dd-lib-dotnet-init-test-app']
        runtime: ['bullseye-slim','alpine']
        include:
          - runtime: 'bullseye-slim'
            init-tag-suffix: ''
          - runtime: 'alpine'
            init-tag-suffix: '-musl'
      fail-fast: false
    env:
      TEST_LIBRARY: dotnet
      WEBLOG_VARIANT: ${{ matrix.weblog-variant }}
      LIBRARY_INJECTION_CONNECTION: ${{ matrix.lib-injection-connection }}
      LIBRARY_INJECTION_ADMISSION_CONTROLLER: ${{ matrix.lib-injection-use-admission-controller }}
      DOCKER_REGISTRY_IMAGES_PATH: ghcr.io/datadog
      DOCKER_IMAGE_TAG: ${{ github.sha }}${{ matrix.init-tag-suffix }}
      DOCKER_IMAGE_WEBLOG_TAG: ${{ github.sha }}-${{ matrix.runtime }}
      RUNTIME: ${{ matrix.runtime }}
      BUILDX_PLATFORMS: linux/amd64
    steps:
      - name: lib-injection test runner
        id: lib-injection-test-runner
        uses: DataDog/system-tests/lib-injection/runner@main
        with:
          docker-registry: ghcr.io
          docker-registry-username: ${{ github.repository_owner }}
          docker-registry-password: ${{ secrets.GITHUB_TOKEN }}
          test-script: ./lib-injection/run-manual-lib-injection.sh
