name: profiler pipeline
'on':
  push:
    branches:
      - master
      - profiler-vnext
      - release/**/*
      - hotfix/**/*

  pull_request:
    types:
      - opened
      - synchronize
      - reopened
    branches:
      - master
      - profiler-vnext
      - release/**
      - hotfix/**
    paths-ignore:
      - docs/**
      - LICENCE
      - LICENSE-3rdparty.csv
      - NOTICE
      - Datadog.Trace*
      - tracer/**
      - .azure-pipelines/**
      - .vsconfig

  workflow_dispatch:

env:
  DD_TRACE_DEBUG: 1
  NugetPackageDirectory: ./packages

jobs:

  build_linux_release_x64:
    name: Build Linux Profiler (x64, Release)
    runs-on: ubuntu-latest

    steps:
      - name: Clone dd-trace-dotnet repository
        uses: actions/checkout@v3

      - uses: ./.github/actions/run-in-docker
        name: Build Monitoring Home in Docker
        with:
          command: "Clean BuildTracerHome BuildNativeLoader BuildProfilerHome ZipMonitoringHome --TracerHome /project/shared/bin/monitoring-home"

      - uses: ./.github/actions/run-in-docker
        name: Run Native Unit tests
        with:
          command: "RunProfilerNativeUnitTestsLinux"

      - name: Publish artifact
        uses: actions/upload-artifact@v3
        with:
          if-no-files-found: error
          name: monitoring-home.Linux.Release.x64
          path: '${{ github.workspace }}/shared/bin/monitoring-home'
          retention-days: 7

  benchmark_linux_x64:
    name: BMark Linux Profiler (x64, Release)
    runs-on: ubuntu-latest
    needs: build_linux_release_x64
    strategy:
      fail-fast: false
      matrix:
        framework:
          - netcoreapp31
          - net60
        scenario:
          - PiComputation
          - Exceptions
    services:
      dd-agent:
        image: 'datadog/agent:latest'
        ports:
          - '8126:8126'
        env:
          DD_API_KEY: '${{ secrets.DD_API_KEY }}'
          DD_INSIDE_CI: true
          DD_HOSTNAME: dd-profiler-dotnet
          DD_SERVICE: dd-profiler-dotnet

    steps:
      - name: Clone dd-trace-dotnet repository
        uses: actions/checkout@v3

      - uses: actions/setup-dotnet@v3
        with:
          dotnet-version: |
            3.1.x
            6.0.100
            7.0.101

      - name: Download profiler artifact
        uses: actions/download-artifact@v3
        with:
          name: monitoring-home.Linux.Release.x64
          path: shared/bin/monitoring-home

      - name: Setup Go 1.16.8
        uses: actions/setup-go@v3
        with:
          go-version: 1.16.8

      - name: Prepare environment to run the application
        run: |
          #
          # set profiler deployment and test output dir folder path for the test
          #
          go_tool_dir=$(realpath .)/tools
          mkdir $go_tool_dir
          echo "GOPATH=$go_tool_dir" >> $GITHUB_ENV
          sudo mkdir -p /var/log/datadog/dotnet
          sudo chmod 777 /var/log/datadog/dotnet

      - name: Install timeit
        run: go install github.com/tonyredondo/timeit@latest

      - name: Restore sample applications
        run: dotnet restore profiler/src/Demos/Datadog.Demos.sln /p:Configuration="Release" /p:CheckEolTargetFramework=false

      - name: Build sample applications
        run: dotnet build -c Release profiler/src/Demos/Datadog.Demos.sln -p:Platform=x64 -p:CheckEolTargetFramework=false

      - name: Execute PiComputation benchmark
        run: |
          cd profiler/build
          ./run.sh  ${{ matrix.scenario }} ${{ matrix.framework }}

      - name: Wait 20 seconds to agent flush before finishing pipeline
        run: sleep 20

      - name: Publish artifact
        uses: actions/upload-artifact@v3
        with:
          if-no-files-found: error
          name: Benchmark.tests.linux.${{ matrix.framework }}.logs
          path: '/var/log/datadog/dotnet'
          retention-days: 7

  benchmark_ClrEvents_linux_x64:
    name: BMark ClrEvents Linux Profiler (x64, Release)
    runs-on: ubuntu-latest
    needs: build_linux_release_x64
    strategy:
    # add scenarios when new profilers based on CLR events are added
      fail-fast: false
      matrix:
        framework:
          - net60
          - net70
        scenario:
          - Allocations
          - Contention
          - LiveHeap
        exclude:
          - framework: net60
            scenario: LiveHeap
    services:
      dd-agent:
        image: 'datadog/agent:latest'
        ports:
          - '8126:8126'
        env:
          DD_API_KEY: '${{ secrets.DD_API_KEY }}'
          DD_INSIDE_CI: true
          DD_HOSTNAME: dd-profiler-dotnet
          DD_SERVICE: dd-profiler-dotnet

    steps:
      - name: Clone dd-trace-dotnet repository
        uses: actions/checkout@v3

      - uses: actions/setup-dotnet@v3
        with:
          dotnet-version: |
            6.0.100
            7.0.101

      - name: Download profiler artifact
        uses: actions/download-artifact@v3
        with:
          name: monitoring-home.Linux.Release.x64
          path: shared/bin/monitoring-home

      - name: Setup Go 1.16.8
        uses: actions/setup-go@v3
        with:
          go-version: 1.16.8

      - name: Prepare environment to run the application
        run: |
          #
          # set profiler deployment and test output dir folder path for the test
          #
          go_tool_dir=$(realpath .)/tools
          mkdir $go_tool_dir
          echo "GOPATH=$go_tool_dir" >> $GITHUB_ENV
          sudo mkdir -p /var/log/datadog/dotnet
          sudo chmod 777 /var/log/datadog/dotnet

      - name: Install timeit
        run: go install github.com/tonyredondo/timeit@latest

      - name: Restore sample applications
        run: dotnet restore profiler/src/Demos/Datadog.Demos.sln /p:Configuration="Release" /p:CheckEolTargetFramework=false

      - name: Build sample applications
        run: dotnet build -c Release profiler/src/Demos/Datadog.Demos.sln -p:Platform=x64 -p:CheckEolTargetFramework=false

      - name: Execute CLR events benchmark
        run: |
          cd profiler/build
          ./run.sh  ${{ matrix.scenario }} ${{ matrix.framework }}

      - name: Wait 20 seconds to agent flush before finishing pipeline
        run: sleep 20

      - name: Publish artifact
        uses: actions/upload-artifact@v3
        with:
          if-no-files-found: error
          name: Benchmark.clrevents.linux.${{ matrix.framework }}.logs
          path: '/var/log/datadog/dotnet'
          retention-days: 7

  build_linux_asan:
    name: Build Linux Profiler ASAN
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false

    steps:
      - uses: actions/setup-dotnet@v3
        with:
          dotnet-version: |
            6.0.100
            7.0.101

      - name: Clone dd-trace-dotnet repository
        uses: actions/checkout@v3

      - uses: ./.github/actions/run-in-docker
        name: Build profiler with ASAN and run Computer01
        with:
          command: "RunProfilerAsanTest --Framework net7.0"

      - name: 'Publish Test results, Logs and PProf files'
        uses: actions/upload-artifact@v3
        if: '${{ always() }}'
        with:
          if-no-files-found: error
          name: Asan_Tests_result_logs_and_pprofs_files.Linux.Release.x64
          path: profiler/build_data
          retention-days: 1

  build_linux_ubsan:
    name: Build Linux Profiler UBSAN
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false

    steps:

      - uses: actions/setup-dotnet@v3
        with:
          dotnet-version: |
            6.0.100
            7.0.101

      - name: Clone dd-trace-dotnet repository
        uses: actions/checkout@v3

      - uses: ./.github/actions/run-in-docker
        name: Build profiler with UBSAN and run Computer01
        with:
          command: "RunProfilerUbsanTest --Framework net7.0"

      - name: 'Publish Test results, Logs and PProf files'
        uses: actions/upload-artifact@v3
        if: '${{ always() }}'
        with:
          if-no-files-found: error
          name: Ubsan_Tests_result_logs_and_pprofs_files.Linux.Release.x64
          path: profiler/build_data
          retention-days: 1

  build_windows:
    name: Build Windows Profiler and Tracer
    runs-on: windows-2022
    env:
      NugetPackageDirectory: ./packages
    strategy:
      fail-fast: false
      matrix:
        configuration:
          - Release
          - Debug

    steps:
    
      - uses: actions/setup-dotnet@v3
        with:
          dotnet-version: |
            3.1.x
            6.0.100
            7.0.101
        
      - name: Support longpaths
        run: git config --system core.longpaths true

      - name: Clone dd-trace-dotnet repository
        uses: actions/checkout@v3

      - name: Build Monitoring home
        run: .\tracer\build.cmd BuildTracerHome BuildNativeLoader BuildProfilerHome PublishNativeSymbolsWindows CompileProfilerNativeTestsWindows --build-configuration ${{matrix.configuration}}

      - name: Run Native Unit tests (x64-${{matrix.configuration}})
        run: .\tracer\build.cmd RunProfilerNativeUnitTestsWindows --build-configuration ${{matrix.configuration}} --TargetPlatform x64

      - name: Run Native Unit tests (x86-${{matrix.configuration}})
        run: .\tracer\build.cmd RunProfilerNativeUnitTestsWindows --build-configuration ${{matrix.configuration}} --TargetPlatform x86

      - name: Publish artifact monitoring-home
        uses: actions/upload-artifact@v3
        with:
          if-no-files-found: error
          name: 'monitoring-home.Windows.${{matrix.configuration}}'
          path: 'shared\bin\monitoring-home'
          retention-days: 7

      - name: Publish monitoring-home symbols
        uses: actions/upload-artifact@v3
        with:
          if-no-files-found: error
          name: 'monitoring-home.Windows.Symbols.${{matrix.configuration}}'
          path: 'tracer\bin\symbols'
          retention-days: 7


  test_windows_profiler:
    name: STests Windows Profiler
    runs-on: windows-2022
    needs: build_windows
    strategy:
      fail-fast: false
      matrix:
        platform:
          - x64
          - x86
        configuration:
          - Release
          - Debug

    steps:
    
      - uses: Datadog/setup-dotnet@v2
        with:
          architecture: ${{ matrix.platform }}
          dotnet-version: |
            3.1.x
            6.0.100
            7.0.101
    
      - name: Support longpaths
        run: git config --system core.longpaths true

      - name: Clone dd-trace-dotnet repository
        uses: actions/checkout@v3

      - name: Download profiler artifact
        uses: actions/download-artifact@v3
        with:
          name: monitoring-home.Windows.${{matrix.configuration}}
          path: shared/bin/monitoring-home

      - name: Restore sample applications
        run: dotnet restore profiler/src/Demos/Datadog.Demos.sln /p:Configuration="${{matrix.configuration}}" /p:CheckEolTargetFramework=false

      - name: Build sample applications
        run: dotnet build -c ${{matrix.configuration}} profiler/src/Demos/Datadog.Demos.sln -p:Platform=${{matrix.platform}} -p:CheckEolTargetFramework=false

      - name: Prepare environment to run the application
        shell: pwsh
        run: |
          # Donwload Procdump and add it to PATH environment variable
          curl.exe --output Procdump.zip --url https://download.sysinternals.com/files/Procdump.zip
          7z x Procdump.zip -oProcdump
          echo "$(Join-Path -Path $(Resolve-Path .) -ChildPath Procdump)" | Out-File -FilePath $Env:GITHUB_PATH -Encoding utf8 -Append

          #
          # set profiler deployment and test output dir folder path for the test
          #
          echo "MonitoringHomeDirectory=$(Join-Path -Path $(Resolve-Path .) -ChildPath shared/bin/monitoring-home)" | Out-File -FilePath $Env:GITHUB_ENV -Encoding utf8 -Append
          $tests_output=$(Join-Path -Path $(Resolve-Path .) -ChildPath tests_output)
          echo "DD_TESTING_OUPUT_DIR=${tests_output}" | Out-File -FilePath $Env:GITHUB_ENV -Encoding utf8 -Append
          New-Item ${tests_output} -Type Directory
          .\Procdump\procdump.exe -accepteula -ma -i ${tests_output}

      - name: Run Integration tests
        shell: cmd
        run: >
          cd profiler/test/Datadog.Profiler.IntegrationTests &&
          dotnet test -c ${{matrix.configuration}} -p:Platform=${{matrix.platform}} --filter "Category!=LinuxOnly" --logger "console;verbosity=detailed" --logger "trx" -- RunConfiguration.TreatNoTestsAsError=true

      - name: Cleanup environment
        shell: pwsh
        run: |
          # Uninstall Procdump
          .\Procdump\procdump.exe -u

      - name: Generate tests report
        uses: dorny/test-reporter@v1
        if: '${{ always() }}'
        with:
          name: STests Windows (${{ matrix.platform }}, ${{ matrix.configuration }}) report
          path: profiler/test/Datadog.Profiler.IntegrationTests/TestResults/*.trx
          reporter: dotnet-trx

      - name: 'Publish Test results, Logs and PProf files'
        uses: actions/upload-artifact@v3
        if: '${{ always() }}'
        with:
          if-no-files-found: error
          name: Tests_result_logs_and_pprofs_files.Windows.${{matrix.configuration}}.${{matrix.platform}}
          path: |
            ${{ env.DD_TESTING_OUPUT_DIR }}
          retention-days: 7

  benchmark_windows_x64:
    name: BMark Windows Profiler x64
    runs-on: windows-2022
    needs: build_windows
    strategy:
      fail-fast: false
      matrix:
        framework:
          - net45
          - netcoreapp31
          - net60
        scenario:
          - PiComputation
          - Exceptions
    steps:
    
      - uses: actions/setup-dotnet@v3
        with:
          dotnet-version: |
            3.1.x
            6.0.100
            7.0.101
    
      - name: Install Datadog agent
        continue-on-error: false
        shell: pwsh
        run: |
          curl.exe --output datadog-agent-7-latest.amd64.msi --url https://s3.amazonaws.com/ddagent-windows-stable/datadog-agent-7-latest.amd64.msi

          Start-Process -Wait msiexec -ArgumentList '/qn /i datadog-agent-7-latest.amd64.msi APIKEY=${{ secrets.DD_API_KEY }} SITE="datadoghq.com"'
        env:
          DD_INSIDE_CI: true
          DD_HOSTNAME: dd-profiler-dotnet
          DD_SERVICE: dd-profiler-dotnet

      - name: Support longpaths
        run: git config --system core.longpaths true

      - name: Clone dd-trace-dotnet repository
        uses: actions/checkout@v3

      - name: Download profiler artifact
        uses: actions/download-artifact@v3
        with:
          name: monitoring-home.Windows.Release
          path: shared/bin/monitoring-home

      - name: Setup Go 1.16.8
        uses: actions/setup-go@v3
        with:
          go-version: 1.16.8

      - name: Prepare environment to run the application
        shell: pwsh
        run: |
          $tools_dir=(Join-Path -Path $(Resolve-Path .) -ChildPath tools)
          mkdir $tools_dir
          echo "GOPATH=$tools_dir" | Out-File -FilePath $Env:GITHUB_ENV -Encoding utf8 -Append

      - name: Install timeit
        run: go install github.com/tonyredondo/timeit@latest

      - name: Restore sample applications
        run: dotnet restore profiler/src/Demos/Datadog.Demos.sln /p:Configuration="Release" /p:CheckEolTargetFramework=false

      - name: Build sample applications
        run: dotnet build -c Release profiler/src/Demos/Datadog.Demos.sln -p:Platform=x64 -p:CheckEolTargetFramework=false

      - name: Execute PiComputation benchmark
        env:
          DD_PROFILING_LOG_DIR: '${{ github.workspace }}/tests_output_dir/${{ matrix.framework }}'
          DD_TRACE_LOG_DIRECTORY: '${{ github.workspace }}/tests_output_dir/${{ matrix.framework }}' # for the loader
        run: |
          cd profiler\build
          .\run.cmd  ${{ matrix.scenario }} ${{ matrix.framework }}

      - name: Wait 20 seconds to agent flush before finishing pipeline
        run: Start-Sleep -s 20

      - name: 'Publish Benchmark log files'
        uses: actions/upload-artifact@v3
        if: '${{ always() }}'
        with:
          if-no-files-found: error
          name: Benchmark.tests.windows.x64.${{ matrix.framework }}.logs
          path: '${{ github.workspace }}/tests_output_dir'
          retention-days: 7

  benchmark_ClrEvents_windows_x64:
    name: BMark ClrEvents Windows Profiler x64
    runs-on: windows-2022
    needs: build_windows
    strategy:
    # add scenarios when new profilers based on CLR events are added
      fail-fast: false
      matrix:
        framework:
          - net60
          - net70
        scenario:
          - Allocations
          - Contention
          - LiveHeap
        exclude:
          - framework: net60
            scenario: LiveHeap
    steps:

      - uses: actions/setup-dotnet@v3
        with:
          dotnet-version: |
            6.0.100
            7.0.101

      - name: Install Datadog agent
        continue-on-error: false
        shell: pwsh
        run: |
          curl.exe --output datadog-agent-7-latest.amd64.msi --url https://s3.amazonaws.com/ddagent-windows-stable/datadog-agent-7-latest.amd64.msi

          Start-Process -Wait msiexec -ArgumentList '/qn /i datadog-agent-7-latest.amd64.msi APIKEY=${{ secrets.DD_API_KEY }} SITE="datadoghq.com"'
        env:
          DD_INSIDE_CI: true
          DD_HOSTNAME: dd-profiler-dotnet
          DD_SERVICE: dd-profiler-dotnet

      - name: Support longpaths
        run: git config --system core.longpaths true

      - name: Clone dd-trace-dotnet repository
        uses: actions/checkout@v3

      - name: Download profiler artifact
        uses: actions/download-artifact@v3
        with:
          name: monitoring-home.Windows.Release
          path: shared/bin/monitoring-home

      - name: Setup Go 1.16.8
        uses: actions/setup-go@v3
        with:
          go-version: 1.16.8

      - name: Prepare environment to run the application
        shell: pwsh
        run: |
          $tools_dir=(Join-Path -Path $(Resolve-Path .) -ChildPath tools)
          mkdir $tools_dir
          echo "GOPATH=$tools_dir" | Out-File -FilePath $Env:GITHUB_ENV -Encoding utf8 -Append

      - name: Install timeit
        run: go install github.com/tonyredondo/timeit@latest

      - name: Restore sample applications
        run: dotnet restore profiler/src/Demos/Datadog.Demos.sln /p:Configuration="Release" /p:CheckEolTargetFramework=false

      - name: Build sample applications
        run: dotnet build -c Release profiler/src/Demos/Datadog.Demos.sln -p:Platform=x64 -p:CheckEolTargetFramework=false

      - name: Execute Clr Events benchmark
        env:
          DD_PROFILING_LOG_DIR: '${{ github.workspace }}/tests_output_dir/${{ matrix.framework }}'
          DD_TRACE_LOG_DIRECTORY: '${{ github.workspace }}/tests_output_dir/${{ matrix.framework }}' # for the loader
        run: |
          cd profiler\build
          .\run.cmd  ${{ matrix.scenario }} ${{ matrix.framework }}

      - name: Wait 20 seconds to agent flush before finishing pipeline
        run: Start-Sleep -s 20

      - name: 'Publish Benchmark log files'
        uses: actions/upload-artifact@v3
        if: '${{ always() }}'
        with:
          if-no-files-found: error
          name: Benchmark.clrevents.windows.x64.${{ matrix.framework }}.logs
          path: '${{ github.workspace }}/tests_output_dir'
          retention-days: 7

  deploy_windows_profiler:
    name: Deploying Windows Profiler to AWS S3 bucket
    needs: test_windows_profiler
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/master'

    steps:
      - name: Clone dd-trace-dotnet repository
        uses: actions/checkout@v3

      - name: Download profiler artifact
        uses: actions/download-artifact@v3
        with:
          name: monitoring-home.Windows.Release
          path: DDProf-Deploy

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: '${{ secrets.AWS_ACCESS_KEY_ID }}'
          aws-secret-access-key: '${{ secrets.AWS_SECRET_ACCESS_KEY }}'
          aws-region: '${{ secrets.AWS_REGION }}'

      - name: Package and deploy artifacts to S3
        run: ./.github/scripts/package_and_deploy.sh "DDProf-Deploy" ${GITHUB_SHA} ${GITHUB_ACTOR}

  build_windows_asan_release:
    name: Build Windows Profiler ASAN
    runs-on: windows-2022
    strategy:
      fail-fast: false

    steps:
    
      - name: Support longpaths
        run: git config --system core.longpaths true

      - name: Clone dd-trace-dotnet repository
        uses: actions/checkout@v3

      - uses: Datadog/setup-dotnet@v2
        with:
          dotnet-version: |
            6.0.100
            7.0.101

      - uses: Datadog/setup-dotnet@v2
        with:
          architecture: x86
          dotnet-version: |
            6.0.100
            7.0.101

      - name: Build profiler with ASAN and run Computer01
        run: tracer\build.cmd RunProfilerAsanTest --Framework net7.0

      - name: Check Address sanitizer test results for error(s)
        run: tracer\build.cmd CheckTestResultForProfilerWithSanitizer

      - name: 'Publish Test results, Logs and PProf files'
        uses: actions/upload-artifact@v3
        if: '${{ always() }}'
        with:
          if-no-files-found: error
          name: Asan_Tests_result_logs_and_pprofs_files.Windows.${{matrix.configuration}}.${{matrix.platform}}
          path: profiler/build_data
          retention-days: 1

  run_static_analysis_linux:
    name: Analyze Linux Profiler code
    runs-on: ubuntu-latest
    steps:
      - uses: actions/setup-dotnet@v3
        with:
          dotnet-version: |
            6.0.100
            7.0.101

      - name: Clone dd-trace-dotnet repository
        uses: actions/checkout@v3

      - uses: ./.github/actions/run-in-docker
        name: Run CppCheck and Clang-Tidy on Profiler
        with:
          command: "Clean RunCppCheckProfiler RunClangTidyProfiler"

      - uses: ./.github/actions/run-in-docker
        name: Check static analyzers results for errors
        with:
          command: "CheckProfilerStaticAnalysisResults"

      - name: Publish Analyzers Results
        uses: actions/upload-artifact@v3
        if: '${{ always() }}'
        with:
          if-no-files-found: error
          name: Analyzers-Results-Linux
          path: profiler/build_data
          retention-days: 7

  run_static_analysis_windows:
    name: Analyze Windows Profiler code
    runs-on: windows-2022
    strategy:
      fail-fast: false
    steps:
      - name: Install CppCheck
        shell: pwsh
        run: |
          choco install cppcheck -y
          refreshenv
          echo "C:\Program Files\Cppcheck" | Out-File -FilePath $Env:GITHUB_PATH -Encoding utf8 -Append

      - name: Support longpaths
        run: git config --system core.longpaths true

      - name: Clone dd-trace-dotnet repository
        uses: actions/checkout@v3

      - name: Add MSBuild to PATH
        uses: microsoft/setup-msbuild@v1.1

      - uses: actions/setup-dotnet@v3
        with:
          dotnet-version: |
            6.0.100
            7.0.101

      - name: Run CppCheck and Clang-Tidy on Profiler
        run: tracer\build.cmd RunCppCheckProfiler RunClangTidyProfiler

      - name: Check static analyzers results for errors
        run: tracer\build.cmd CheckProfilerStaticAnalysisResults

      - name: Publish Analyzers Results
        uses: actions/upload-artifact@v3
        if: '${{ always() }}'
        with:
          if-no-files-found: error
          name: 'Analyzers-Results-Windows'
          path: profiler/build_data
          retention-days: 7

  throughput_linux:
    name: Throughput tests Linux
    runs-on: [self-hosted, throughput, profiler]
    needs: [build_windows, build_linux_release_x64]
    steps:
      - name: Clone dd-trace-dotnet repository
        uses: actions/checkout@v3
         
      - name: Download profiler artifact
        uses: actions/download-artifact@v3
        with:
          name: monitoring-home.Linux.Release.x64
          path: monitoring-home-linux
          
      - name: Run throughput tests
        shell: bash
        run: |
          cd profiler/build/crank
          chmod +x ./run.sh
          ./run.sh "linux"

  throughput_windows:
    name: Throughput tests Windows
    runs-on: [self-hosted, throughput, profiler]
    needs: [build_windows, build_linux_release_x64]
    steps:
      - name: Clone dd-trace-dotnet repository
        uses: actions/checkout@v3

      - name: Download profiler artifact
        uses: actions/download-artifact@v3
        with:
          name: monitoring-home.Windows.Release
          path: monitoring-home-windows
                   
      - name: Run throughput tests
        shell: bash
        run: |
          cd profiler/build/crank
          chmod +x ./run.sh
          ./run.sh "windows"
          
    
