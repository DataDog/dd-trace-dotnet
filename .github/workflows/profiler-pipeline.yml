name: profiler pipeline
'on':
  push:
    branches:
      - master
      - profiler-vnext
      - release/**/*
      - hotfix/**/*

  pull_request:
    types:
      - opened
      - synchronize
      - reopened
    branches:
      - master
      - profiler-vnext
      - release/**
      - hotfix/**
    paths-ignore:
      - docs/**
      - LICENCE
      - LICENSE-3rdparty.csv
      - NOTICE
      - Datadog.Trace*
      - tracer/**
      - .azure-pipelines/**
      - .vsconfig

  workflow_dispatch:

env:
  DD_TRACE_DEBUG: 1

jobs:

  build_linux_release_x64:
    name: Build Linux Profiler (x64, Release)
    runs-on: ubuntu-18.04

    steps:
      - name: Install uuid-dev
        run: sudo apt-get install -y uuid-dev

      - name: Clone dd-trace-dotnet repository
        uses: actions/checkout@v2

      - name: Build Managed Loader
        run: dotnet build -c Release shared/src/managed-lib/ManagedLoader/Datadog.AutoInstrumentation.ManagedLoader.csproj

      - name: Build Managed Profiler Engine
        run: dotnet build -c Release profiler/src/ProfilerEngine/Datadog.Profiler.Managed/Datadog.Profiler.Managed.csproj

      - name: Build Native Profiler Engine and Tests
        run: |
          CXX=clang++ CC=clang cmake -S profiler -B __build
          cd __build
          make

      - name: Run Managed Unit tests
        shell: bash
        run: ./.github/scripts/run-managed-unit-tests.sh profiler/test Release

      - name: Run Native Unit tests
        shell: bash
        run: |
          sudo mkdir /var/log/datadog
          sudo chmod 777 /var/log/datadog 
          cd __build
          ctest --output-on-failure

      - name: Prepare environment to run the application
        run: |
          echo "PROFILER_OUTPUT_DIR=$(realpath ./profiler)/_build" >> $GITHUB_ENV

      - name: Publish artifact
        uses: actions/upload-artifact@v2
        with:
          if-no-files-found: error
          name: DDProf-Deploy.Linux.Release.x64
          path: '${{ env.PROFILER_OUTPUT_DIR }}/DDProf-Deploy'
          retention-days: 7

  test_linux_profiler_x64:
    name: STests Linux Profiler (x64, Release)
    runs-on: ubuntu-latest
    needs: build_linux_release_x64

    steps:
      - name: Clone dd-trace-dotnet repository
        uses: actions/checkout@v2

      - name: Download profiler artifact
        uses: actions/download-artifact@v2
        with:
          name: DDProf-Deploy.Linux.Release.x64
          path: DDProf-Deploy

      - name: Build sample applications
        run: dotnet build -c Release profiler/src/Demos/Datadog.Demos.sln -p:Platform=x64

      - name: Prepare environment to run the application
        run: |
          # download and setup dotnet-dump
          mkdir tools
          curl -o tools/dotnet-dump -L https://aka.ms/dotnet-dump/linux-x64
          chmod +x tools/dotnet-dump

          echo "$(realpath .)/tools" >> $GITHUB_PATH

          #
          # set profiler deployment and test output dir folder path for the test
          #
          echo "DD_TESTING_PROFILER_FOLDER=$(realpath .)/DDProf-Deploy" >> $GITHUB_ENV
          # create
          tests_output_dir=$(realpath .)/tests_output
          mkdir $tests_output_dir
          echo "DD_TESTING_OUPUT_DIR=$tests_output_dir" >> $GITHUB_ENV

      - name: Run Integration tests
        env:
          DD_API_KEY: '${{ secrets.DD_API_KEY }}'
        run: |
          cd profiler/test/Datadog.Profiler.IntegrationTests &&
          LD_PRELOAD=${DD_TESTING_PROFILER_FOLDER}/Datadog.Linux.ApiWrapper.x64.so dotnet test -c Release -p:Platform=x64 --logger "trx" -- RunConfiguration.TreatNoTestsAsError=true

      - name: Generate tests report
        uses: dorny/test-reporter@v1
        if: '${{ always() }}'
        with:
          name: STests Linux x64 report
          path: profiler/test/Datadog.Profiler.IntegrationTests/TestResults/*.trx
          reporter: dotnet-trx

      - name: 'Publish Tests result, Logs and PProf files'
        uses: actions/upload-artifact@v2
        if: '${{ always() }}'
        with:
          if-no-files-found: error
          name: Tests_result_logs_and_pprofs_files.Linux.Release.x64
          path: |
            ${{ env.DD_TESTING_OUPUT_DIR }}
          retention-days: 7

  benchmark_linux_x64:
    name: BMmark Linux Profiler (x64, Release)
    runs-on: ubuntu-latest
    needs: build_linux_release_x64
    strategy:
      fail-fast: false
      matrix:
        framework:
          - netcoreapp31
          - net50
    services:
      dd-agent:
        image: 'datadog/agent:latest'
        ports:
          - '8126:8126'
        env:
          DD_API_KEY: '${{ secrets.DD_API_KEY }}'
          DD_INSIDE_CI: true
          DD_HOSTNAME: dd-profiler-dotnet
          DD_SERVICE: dd-profiler-dotnet

    steps:
      - name: Clone dd-trace-dotnet repository
        uses: actions/checkout@v2

      - name: Download profiler artifact
        uses: actions/download-artifact@v2
        with:
          name: DDProf-Deploy.Linux.Release.x64
          path: DDProf-Deploy

      - name: Setup Go 1.16.8
        uses: actions/setup-go@v2
        with:
          go-version: 1.16.8

      - name: Prepare environment to run the application
        run: |
          #
          # set profiler deployment and test output dir folder path for the test
          #
          go_tool_dir=$(realpath .)/tools
          mkdir $go_tool_dir
          echo "GOPATH=$go_tool_dir" >> $GITHUB_ENV

      - name: Install timeit
        run: go install github.com/tonyredondo/timeit@latest

      - name: Build sample applications
        run: dotnet build -c Release profiler/src/Demos/Datadog.Demos.sln -p:Platform=x64

      - name: Execute PiComputation benchmark
        run: |
          cd profiler/build
          ./run.sh ${{ matrix.framework }}

      - name: Wait 20 seconds to agent flush before finishing pipeline
        run: sleep 20

  build_linux_asan:
    name: Build Linux Profiler ASAN
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false

    steps:
      - name: Install libasan
        run: sudo apt-get install -y libasan6

      - name: Clone dd-trace-dotnet repository
        uses: actions/checkout@v2

      - name: Build Managed Loader
        run: dotnet build -c Release shared/src/managed-lib/ManagedLoader/Datadog.AutoInstrumentation.ManagedLoader.csproj

      - name: Build Managed Profiler Engine
        run: dotnet build -c Release profiler/src/ProfilerEngine/Datadog.Profiler.Managed/Datadog.Profiler.Managed.csproj

      - name: Build Native Profiler Engine
        run: |
          CXX=clang++ CC=clang cmake -S profiler -B __build -DRUN_ASAN=ON
          cd __build
          make

      - name: Build sample applications
        run: dotnet build -c Release profiler/src/Demos/Datadog.Demos.sln -p:Platform=x64

      - name: Prepare environment to run the application
        run: |
          #
          # set profiler deployment and test output dir folder path for the test
          #
          tests_output_dir="$(realpath .)/test_output"
          echo "DD_TESTING_OUPUT_DIR=$tests_output_dir" >> $GITHUB_ENV
          echo "DD_PROFILING_LOG_DIR=$tests_output_dir/logs" >> $GITHUB_ENV
          echo "DD_PROFILING_OUTPUT_DIR=$tests_output_dir/pprofs" >> $GITHUB_ENV
          echo "DD_TRACE_DEBUG=1" >> $GITHUB_ENV

      - name: Run Computer01 for 2min
        timeout-minutes: 4
        run: |
          source profiler/src/ProfilerEngine/DeployResources/DDProf-SetEnv.sh `pwd`/profiler/_build/DDProf-Deploy &&
          cd profiler/_build/bin/Release-x64/profiler/src/Demos/Computer01/net5.0 &&
          # LD_PRELOAD was previously set in the DDProf-SetEnv.sh script, but ASAN does not work with other
          # library in LD_PRELOAD (segfault)
          ASAN_OPTIONS="detect_leaks=0" LD_PRELOAD="libasan.so.6" dotnet Datadog.Demos.Computer01.dll --scenario 1 --timeout 120
        env:
          DD_INTERNAL_PROFILING_LIBDDPROF_ENABLED: "0"

      - name: Run Computer01 for 2min with the new pipeline
        timeout-minutes: 4
        run: |
          source profiler/src/ProfilerEngine/DeployResources/DDProf-SetEnv.sh `pwd`/profiler/_build/DDProf-Deploy &&
          cd profiler/_build/bin/Release-x64/profiler/src/Demos/Computer01/net5.0 &&
          # LD_PRELOAD was previously set in the DDProf-SetEnv.sh script, but ASAN does not work with other
          # library in LD_PRELOAD (segfault)
          ASAN_OPTIONS="detect_leaks=0" LD_PRELOAD="libasan.so.6" dotnet Datadog.Demos.Computer01.dll --scenario 1 --timeout 120
        env:
          DD_INTERNAL_PROFILING_LIBDDPROF_ENABLED: "1"

      - name: 'Publish Test results, Logs and PProf files'
        uses: actions/upload-artifact@v2
        if: '${{ always() }}'
        with:
          if-no-files-found: error
          name: Asan_Tests_result_logs_and_pprofs_files.Linux.Release.x64
          path: |
            ${{ env.DD_TESTING_OUPUT_DIR }}
          retention-days: 1

  build_linux_ubsan:
    name: Build Linux Profiler UBSAN
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false

    steps:
      - name: Install libubsan
        run: sudo apt-get install -y libubsan1

      - name: Clone dd-trace-dotnet repository
        uses: actions/checkout@v2

      - name: Build Managed Loader
        run: dotnet build -c Release shared/src/managed-lib/ManagedLoader/Datadog.AutoInstrumentation.ManagedLoader.csproj

      - name: Build Managed Profiler Engine
        run: dotnet build -c Release profiler/src/ProfilerEngine/Datadog.Profiler.Managed/Datadog.Profiler.Managed.csproj

      - name: Build Native Profiler Engine
        run: |
          CXX=clang++ CC=clang cmake -S profiler -B __build -DRUN_UBSAN=ON
          cd __build
          make

      - name: Build sample applications
        run: dotnet build -c Release profiler/src/Demos/Datadog.Demos.sln -p:Platform=x64

      - name: Prepare environment to run the application
        run: |
          #
          # set profiler deployment and test output dir folder path for the test
          #
          tests_output_dir="$(realpath .)/test_output"
          echo "DD_TESTING_OUPUT_DIR=$tests_output_dir" >> $GITHUB_ENV
          echo "DD_PROFILING_LOG_DIR=$tests_output_dir/logs" >> $GITHUB_ENV
          echo "DD_PROFILING_OUTPUT_DIR=$tests_output_dir/pprofs" >> $GITHUB_ENV
          echo "DD_TRACE_DEBUG=1" >> $GITHUB_ENV

      - name: Run Computer01 for 2min with the new pipeline
        timeout-minutes: 4
        if: '${{ always() }}'
        run: |
          source profiler/src/ProfilerEngine/DeployResources/DDProf-SetEnv.sh `pwd`/profiler/_build/DDProf-Deploy &&
          cd profiler/_build/bin/Release-x64/profiler/src/Demos/Computer01/net5.0 &&
          UBSAN_OPTIONS=print_stacktrace=1 LD_PRELOAD="libubsan.so.1:$LD_PRELOAD" dotnet Datadog.Demos.Computer01.dll --scenario 1 --timeout 120
        env:
          DD_INTERNAL_PROFILING_LIBDDPROF_ENABLED: "1"

      - name: 'Publish Test results, Logs and PProf files'
        uses: actions/upload-artifact@v2
        if: '${{ always() }}'
        with:
          if-no-files-found: error
          name: Ubsan_Tests_result_logs_and_pprofs_files.Linux.Release.x64
          path: |
            ${{ env.DD_TESTING_OUPUT_DIR }}
          retention-days: 1

  build_windows:
    name: Build Windows Profiler and Tracer
    runs-on: windows-2019
    strategy:
      fail-fast: false
      matrix:
        configuration:
          - Release
          - Debug

    steps:
      - name: Support longpaths
        run: git config --system core.longpaths true

      - name: Clone dd-trace-dotnet repository
        uses: actions/checkout@v2

      - name: Build Managed Loader
        run: dotnet build -c ${{matrix.configuration}} shared/src/managed-lib/ManagedLoader/Datadog.AutoInstrumentation.ManagedLoader.csproj

      - name: Build Managed Profiler Engine
        run: dotnet build -c ${{matrix.configuration}} profiler/src/ProfilerEngine/Datadog.Profiler.Managed/Datadog.Profiler.Managed.csproj

      - name: Add MSBuild to PATH
        uses: microsoft/setup-msbuild@v1.0.2

      - name: Build Native profiler and tests (x64-${{matrix.configuration}})
        run: msbuild /property:Configuration=${{matrix.configuration}} /property:Platform=x64 /property:DeployToMonitoringHome=True profiler\src\ProfilerEngine\Datadog.Profiler.Native.Windows\Datadog.Profiler.Native.Windows.WithTests.proj

      - name: Build Native profiler and tests (x86-${{matrix.configuration}})
        run: msbuild /property:Configuration=${{matrix.configuration}} /property:Platform=x86 /property:DeployToMonitoringHome=True profiler\src\ProfilerEngine\Datadog.Profiler.Native.Windows\Datadog.Profiler.Native.Windows.WithTests.proj

      - name: Run Managed Unit tests
        shell: bash
        run: ./.github/scripts/run-managed-unit-tests.sh profiler/test ${{matrix.configuration}}

      - name: Run Native Unit tests (x64-${{matrix.configuration}})
        shell: bash
        run: ./.github/scripts/run-native-unit-tests.sh profiler/test ${{matrix.configuration}} x64

      - name: Run Native Unit tests (x86-${{matrix.configuration}})
        shell: bash
        run: ./.github/scripts/run-native-unit-tests.sh profiler/test ${{matrix.configuration}} x86

      - uses: actions/setup-dotnet@v1
        with:
          dotnet-version: '6.0.x'

      - name: Build Monitoring home
        run: .\tracer\build.cmd BuildTracerHome BuildNativeLoader --build-configuration ${{matrix.configuration}}

      - name: Publish artifact monitoring-home
        uses: actions/upload-artifact@v2
        with:
          if-no-files-found: error
          name: 'monitoring-home.Windows.${{matrix.configuration}}'
          path: 'shared\bin\monitoring-home'
          retention-days: 7

      - name: Publish artifact profiler-home
        uses: actions/upload-artifact@v2
        with:
          if-no-files-found: error
          name: 'profiler-home.Windows.${{matrix.configuration}}'
          path: 'shared\bin\monitoring-home\continuousprofiler'
          retention-days: 7


  test_windows_profiler:
    name: STests Windows Profiler
    runs-on: windows-2019
    needs: build_windows
    strategy:
      fail-fast: false
      matrix:
        platform:
          - x64
          - x86
        configuration:
          - Release
          - Debug

    steps:
      - name: Support longpaths
        run: git config --system core.longpaths true

      - name: Clone dd-trace-dotnet repository
        uses: actions/checkout@v2

      - name: Download profiler artifact
        uses: actions/download-artifact@v2
        with:
          name: monitoring-home.Windows.${{matrix.configuration}}
          path: DDProf-Deploy

      - name: Build sample applications
        run: dotnet build -c ${{matrix.configuration}} profiler/src/Demos/Datadog.Demos.sln -p:Platform=${{matrix.platform}}

      - name: Prepare environment to run the application
        shell: pwsh
        run: |
          # Donwload Procdump and add it to PATH environment variable
          curl.exe --output Procdump.zip --url https://download.sysinternals.com/files/Procdump.zip
          7z x Procdump.zip -oProcdump
          echo "$(Join-Path -Path $(Resolve-Path .) -ChildPath Procdump)" | Out-File -FilePath $Env:GITHUB_PATH -Encoding utf8 -Append

          #
          # set profiler deployment and test output dir folder path for the test
          #
          echo "DD_TESTING_PROFILER_FOLDER=$(Join-Path -Path $(Resolve-Path .) -ChildPath DDProf-Deploy)" | Out-File -FilePath $Env:GITHUB_ENV -Encoding utf8 -Append
          echo "DD_TESTING_OUPUT_DIR=$(Join-Path -Path $(Resolve-Path .) -ChildPath tests_output)" | Out-File -FilePath $Env:GITHUB_ENV -Encoding utf8 -Append

      - name: Run Integration tests
        shell: cmd
        env:
          DD_API_KEY: '${{ secrets.DD_API_KEY }}'
          USE_NATIVE_LOADER: 'true'
        run: >
          cd profiler/test/Datadog.Profiler.IntegrationTests &&
          dotnet test -c ${{matrix.configuration}} -p:Platform=${{matrix.platform}}  --logger "console;verbosity=detailed" --logger "trx" -- RunConfiguration.TreatNoTestsAsError=true

      - name: Generate tests report
        uses: dorny/test-reporter@v1
        if: '${{ always() }}'
        with:
          name: STests Windows (${{ matrix.platform }}, ${{ matrix.configuration }}) report
          path: profiler/test/Datadog.Profiler.IntegrationTests/TestResults/*.trx
          reporter: dotnet-trx

      - name: 'Publish Test results, Logs and PProf files'
        uses: actions/upload-artifact@v2
        if: '${{ always() }}'
        with:
          if-no-files-found: error
          name: Tests_result_logs_and_pprofs_files.Windows.${{matrix.configuration}}.${{matrix.platform}}
          path: |
            ${{ env.DD_TESTING_OUPUT_DIR }}
          retention-days: 7

  benchmark_windows_x64:
    name: BMmark Windows Profiler x64
    runs-on: windows-2019
    needs: build_windows
    strategy:
      fail-fast: false
      matrix:
        framework:
          - net45
          - netcoreapp31
          - net50

    steps:
      - name: Install Datadog agent
        continue-on-error: false
        shell: pwsh
        run: |
          curl.exe --output datadog-agent-7-latest.amd64.msi --url https://s3.amazonaws.com/ddagent-windows-stable/datadog-agent-7-latest.amd64.msi

          Start-Process -Wait msiexec -ArgumentList '/qn /i datadog-agent-7-latest.amd64.msi APIKEY=${{ secrets.DD_API_KEY }} SITE="datadoghq.com"'
        env:
          DD_INSIDE_CI: true
          DD_HOSTNAME: dd-profiler-dotnet
          DD_SERVICE: dd-profiler-dotnet

      - name: Support longpaths
        run: git config --system core.longpaths true

      - name: Clone dd-trace-dotnet repository
        uses: actions/checkout@v2

      - name: Download profiler artifact
        uses: actions/download-artifact@v2
        with:
          name: profiler-home.Windows.Release
          path: DDProf-Deploy

      - name: Setup Go 1.16.8
        uses: actions/setup-go@v2
        with:
          go-version: 1.16.8

      - name: Prepare environment to run the application
        shell: pwsh
        run: |
          $tools_dir=(Join-Path -Path $(Resolve-Path .) -ChildPath tools)
          mkdir $tools_dir
          echo "GOPATH=$tools_dir" | Out-File -FilePath $Env:GITHUB_ENV -Encoding utf8 -Append

      - name: Install timeit
        run: go install github.com/tonyredondo/timeit@latest

      - name: Build sample applications
        run: dotnet build -c Release profiler/src/Demos/Datadog.Demos.sln -p:Platform=x64

      - name: Execute PiComputation benchmark
        run: |
          cd profiler\build
          .\run.cmd ${{ matrix.framework }}

      - name: Wait 20 seconds to agent flush before finishing pipeline
        run: Start-Sleep -s 20

  deploy_windows_profiler:
    name: Deploying Windows Profiler to AWS S3 bucket
    needs: test_windows_profiler
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/master'

    steps:
      - name: Clone dd-trace-dotnet repository
        uses: actions/checkout@v2

      - name: Download profiler artifact
        uses: actions/download-artifact@v2
        with:
          name: monitoring-home.Windows.Release
          path: DDProf-Deploy

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: '${{ secrets.AWS_ACCESS_KEY_ID }}'
          aws-secret-access-key: '${{ secrets.AWS_SECRET_ACCESS_KEY }}'
          aws-region: '${{ secrets.AWS_REGION }}'

      - name: Package and deploy artifacts to S3
        run: ./.github/scripts/package_and_deploy.sh "DDProf-Deploy" ${GITHUB_SHA} ${GITHUB_ACTOR}

  build_windows_asan_release:
    name: Build Windows Profiler ASAN
    runs-on: windows-2019
    strategy:
      fail-fast: false
      matrix:
        platform:
          - x64
          - x86
        configuration:
          - Release

    steps:
      - name: Install Datadog agent
        continue-on-error: false
        shell: pwsh
        run: >
          curl.exe --output datadog-agent-7-latest.amd64.msi --url
          https://s3.amazonaws.com/ddagent-windows-stable/datadog-agent-7-latest.amd64.msi

          Start-Process -Wait msiexec -ArgumentList '/qn /i datadog-agent-7-latest.amd64.msi APIKEY=${{ secrets.DD_API_KEY }} SITE="datadoghq.com"'
        env:
          DD_INSIDE_CI: true
          DD_HOSTNAME: dd-profiler-dotnet
          DD_SERVICE: dd-profiler-dotnet

      - name: Support longpaths
        run: git config --system core.longpaths true

      - name: Clone dd-trace-dotnet repository
        uses: actions/checkout@v2

      - name: Build Managed Loader
        run: dotnet build -c ${{matrix.configuration}} shared/src/managed-lib/ManagedLoader/Datadog.AutoInstrumentation.ManagedLoader.csproj

      - name: Build Managed Profiler Engine
        run: dotnet build -c ${{matrix.configuration}} profiler/src/ProfilerEngine/Datadog.Profiler.Managed/Datadog.Profiler.Managed.csproj

      - name: Add MSBuild to PATH
        uses: microsoft/setup-msbuild@v1.0.2

      - name: Build Native profiler and tests
        run: msbuild -target:BuildCppWithAsan -p:Configuration=${{matrix.configuration}} -p:Platform=${{matrix.platform}} /property:DeployToMonitoringHome=True profiler\src\ProfilerEngine\Datadog.Profiler.Native.Windows\Datadog.Profiler.Native.Windows.WithTests.proj

      - uses: actions/setup-dotnet@v2
        with:
          dotnet-version: |
            3.1.x
            6.0.x

      - name: Build Monitoring home
        run: .\tracer\build.cmd BuildTracerHome BuildNativeLoader --build-configuration ${{matrix.configuration}} --target-platform ${{matrix.platform}}

      - name: Build sample applications
        run: dotnet build -c ${{matrix.configuration}} profiler/src/Demos/Datadog.Demos.sln -p:Platform=${{matrix.platform}}

      - name: Prepare environment to run the application
        shell: pwsh
        run: |
          #
          # set profiler deployment and test output dir folder path for the test
          #
          $tests_output=$(Join-Path -Path $(Resolve-Path .) -ChildPath tests_output)
          echo "DD_TESTING_OUPUT_DIR=$tests_output" | Out-File -FilePath $Env:GITHUB_ENV -Encoding utf8 -Append
          echo "DD_TRACE_DEBUG=1" | Out-File -FilePath $Env:GITHUB_ENV -Encoding utf8 -Append
          echo "DD_PROFILING_LOG_DIR=$(Join-Path -Path $tests_output -ChildPath logs)" | Out-File -FilePath $Env:GITHUB_ENV -Encoding utf8 -Append
          echo "DD_PROFILING_OUTPUT_DIR=$(Join-Path -Path $tests_output -ChildPath pprofs)" | Out-File -FilePath $Env:GITHUB_ENV -Encoding utf8 -Append
          echo "DD_TRACE_ENABLED=0" | Out-File -FilePath $Env:GITHUB_ENV -Encoding utf8 -Append
          echo "COR_ENABLE_PROFILING=1" | Out-File -FilePath $Env:GITHUB_ENV -Encoding utf8 -Append
          echo "COR_PROFILER={846F5F1C-F9AE-4B07-969E-05C26BC060D8}" | Out-File -FilePath $Env:GITHUB_ENV -Encoding utf8 -Append
          echo "COR_PROFILER_PATH=$(Join-Path -Path $(Resolve-Path .) -ChildPath shared/bin/monitoring-home/Datadog.AutoInstrumentation.NativeLoader.${{ matrix.platform }}.dll)" | Out-File -FilePath $Env:GITHUB_ENV -Encoding utf8 -Append
          echo "DD_DOTNET_PROFILER_HOME=$(Join-Path -Path $(Resolve-Path .) -ChildPath shared/bin/monitoring-home/ContinuousProfiler)" | Out-File -FilePath $Env:GITHUB_ENV -Encoding utf8 -Append

      - name: Run Computer01 for 2min
        shell: cmd
        run: >
          cd profiler\_build\bin\Release-${{ matrix.platform }}\profiler\src\Demos\Computer01\net45 &&
          Datadog.Demos.Computer01.exe --scenario 1 --timeout 120
        env:
          DD_INTERNAL_PROFILING_LIBDDPROF_ENABLED: "0"

      - name: Run Computer01 for 2min with the new pipeline
        shell: cmd
        run: >
          cd profiler\_build\bin\Release-${{ matrix.platform }}\profiler\src\Demos\Computer01\net45 &&
          Datadog.Demos.Computer01.exe --scenario 1 --timeout 120
        env:
          DD_INTERNAL_PROFILING_LIBDDPROF_ENABLED: "1"

      - name: 'Publish Test results, Logs and PProf files'
        uses: actions/upload-artifact@v2
        if: '${{ always() }}'
        with:
          if-no-files-found: error
          name: Asan_Tests_result_logs_and_pprofs_files.Windows.${{matrix.configuration}}.${{matrix.platform}}
          path: |
            ${{ env.DD_TESTING_OUPUT_DIR }}
          retention-days: 1

  run_static_analysis_linux:
    name: Analyze Linux Profiler code
    runs-on: ubuntu-latest
    steps:
      - name: Install CppCheck
        run: |
          wget https://github.com/danmar/cppcheck/archive/refs/tags/2.5.tar.gz \
          && CPPCHECK_SHA256="dc27154d799935c96903dcc46653c526c6f4148a6912b77d3a50cb35dabd82e1" \
          && (printf "${CPPCHECK_SHA256}  2.5.tar.gz" | sha256sum --check --strict --status) \
          && tar xvfz 2.5.tar.gz \
          && cd cppcheck-2.5 \
          && mkdir build \
          && cd build \
          && cmake ../ \
          && cmake --build .  \
          && sudo make install

      - name: Install clang-tidy
        run: |
          sudo apt-get update
          sudo apt-get -y install clang-tidy

      - name: Clone dd-trace-dotnet repository
        uses: actions/checkout@v2
      - name: Prepare environment to run the application
        run: |
          mkdir analyzers_results
          echo "CI_ANALYSIS_RESULTS_FOLDER=$(realpath .)/analyzers_results" >> $GITHUB_ENV

      - name: Build Managed Loader
        run: dotnet build -c Release shared/src/managed-lib/ManagedLoader/Datadog.AutoInstrumentation.ManagedLoader.csproj

      - name: Build profiler
        run: |
          cmake -DRUN_ANALYSIS=1 -S profiler -B __build
          cd __build
          make # run make to `git-clone` dependencies (libunwind, fmt). Once we move to vcpkg, we won't need this line
          cd ..
        env:
          CC: clang
          CXX: clang++

      - name: Run CppCheck
        run: |
          cppcheck --enable=all --project=__build/compile_commands.json -D__linux__ -D__x86_64__ --suppressions-list=profiler/cppcheck-suppressions.txt --output-file=$CI_ANALYSIS_RESULTS_FOLDER/cppcheck-results.txt

      - name: Run clang-tidy
        run: run-clang-tidy -p __build &> $CI_ANALYSIS_RESULTS_FOLDER/clang-tidy-results.txt

      - name: Checking for errors in the result files
        run: |
          [ `find ${CI_ANALYSIS_RESULTS_FOLDER} -name "cppcheck-results.txt" | wc -l` -ne 0 ] || (echo "Folder $CI_ANALYSIS_RESULTS_FOLDER does not contains CppCheck result file(s)" && exit 1)
          [ `find ${CI_ANALYSIS_RESULTS_FOLDER} -name "clang-tidy-results.txt" | wc -l` -ne 0 ] || (echo "Folder $CI_ANALYSIS_RESULTS_FOLDER does not contains clang-tidy result file(s)" && exit 1)

          errors=$(grep -HFin ' error: ' $CI_ANALYSIS_RESULTS_FOLDER/cppcheck-results.txt || true)
          if [ ! -z "$errors" ]
          then
              echo $errors
              echo "CppCheck result file contain errors (see above)"
              exit 1
          fi

          errors=$(grep -HFin ' error: ' $CI_ANALYSIS_RESULTS_FOLDER/clang-tidy-results.txt || true)
          if [ ! -z "$errors" ]
          then
              echo $errors
              echo "clang-tidy result file contain errors (see above)"
                exit 1
          fi

      - name: Publish Analyzers Results
        uses: actions/upload-artifact@v2
        if: '${{ always() }}'
        with:
          if-no-files-found: error
          name: Analyzers-Results-Linux
          path: |
            ${{ env.CI_ANALYSIS_RESULTS_FOLDER }}
          retention-days: 7

  run_static_analysis_windows:
    name: Analyze Windows Profiler code
    runs-on: windows-2019
    strategy:
      fail-fast: false
      matrix:
        platform:
          - x64
          - x86
    steps:
      - name: Install CppCheck
        shell: pwsh
        run: |
          choco install cppcheck -y
          refreshenv
          echo "C:\Program Files\Cppcheck" | Out-File -FilePath $Env:GITHUB_PATH -Encoding utf8 -Append

      - name: Support longpaths
        run: git config --system core.longpaths true

      - name: Clone dd-trace-dotnet repository
        uses: actions/checkout@v2

      - name: Add MSBuild to PATH
        uses: microsoft/setup-msbuild@v1.0.2

      - name: Prepare Output dir
        shell: pwsh
        run: |
          mkdir analyzers_results
          $cppcheck_results=$(Join-Path -Path $(Resolve-Path .) -ChildPath analyzers_results)
          echo "CI_ANALYSIS_RESULTS_FOLDER=$cppcheck_results" | Out-File -FilePath $Env:GITHUB_ENV -Encoding utf8 -Append

      - name: Build Managed Loader
        run: dotnet build -c Release shared/src/managed-lib/ManagedLoader/Datadog.AutoInstrumentation.ManagedLoader.csproj

      - name: Run CppCheck
        run: msbuild -target:RunCppCheck -p:Configuration=Release -p:Platform=${{ matrix.platform }} profiler/src/ProfilerEngine/Datadog.Profiler.Native.Windows/Datadog.Profiler.Native.Windows.WithTests.proj

      - name: Run clang-tidy
        run: msbuild -target:RunClangTidy -p:Configuration=Release -p:Platform=${{ matrix.platform }} profiler/src/ProfilerEngine/Datadog.Profiler.Native.Windows/Datadog.Profiler.Native.Windows.WithTests.proj -fl -flp:logfile="$env:CI_ANALYSIS_RESULTS_FOLDER\clang-tidy-results.txt;verbosity=minimal"

      - name: Checking for errors in the result files
        shell: pwsh
        run: |
          if ((Get-ChildItem -Path $env:CI_ANALYSIS_RESULTS_FOLDER -Recurse -File "*.txt" | Measure-Object).Count -eq 0)
          {
            throw "No cppcheck result file(s) was/were found in " + $env:CI_ANALYSIS_RESULTS_FOLDER
          }

          if ((Get-ChildItem -Path $env:CI_ANALYSIS_RESULTS_FOLDER -Recurse -File "clang-tidy-results.txt" | Measure-Object).Count -eq 0)
          {
            throw "No clang-tidy result file(s) was/were found in " + $env:CI_ANALYSIS_RESULTS_FOLDER
          }

          # /!\ "cppcheck-results-" prefix is the same as the one defined in the
          # src\ProfilerEngine\Datadog.Profiler.Native.Windows\Datadog.Profiler.Native.Windows.WithTests.proj file.

          $Errors=Get-ChildItem -Path $env:CI_ANALYSIS_RESULTS_FOLDER -Recurse -File "cppcheck-results-*.txt" | Select-String -Pattern ' error: '
          if (![string]::IsNullOrEmpty($Errors))
          {
            Write-Output $Errors
            throw "CppCheck found error(s) in the source files (see above)"
          }

          $Errors=Get-ChildItem -Path $env:CI_ANALYSIS_RESULTS_FOLDER -Recurse -File "clang-tidy-results.txt" | Select-String -Pattern ' error:'
          if (![string]::IsNullOrEmpty($Errors))
          {
              Write-Output $Errors
              throw "clang-tidy found error(s) in the source files (see above)"
          }

      - name: Publish Analyzers Results
        uses: actions/upload-artifact@v2
        if: '${{ always() }}'
        with:
          if-no-files-found: error
          name: 'Analyzers-Results-Windows-${{ matrix.platform }}'
          path: |
            ${{ env.CI_ANALYSIS_RESULTS_FOLDER }}
          retention-days: 7
