name: Create draft release

on:
  workflow_dispatch:
    inputs:
      forced_commit_id:
        description: 'Force using artifacts from specific commit? If provided, this will try and use the artifacts from the given commit, regardless of build status'
        required: false
      ignore_gitlab_failures:
        description: "DANGER Force ignoring any issues with the GitLab artifacts or SSI. Don't use this unless you _really_ know what you're doing"
        required: false

jobs:
  create_draft_release:
    runs-on: ubuntu-latest
    permissions:
      contents: write # create release
      actions: read # read secrets
      issues: write # change milestones 
    env:
      # Have to use external token with explicit workflow permissions because we are creating
      # a release from an arbitrary SHA. For "reasons", the built-in token does not _always_
      # work in that scenario, so using an external token is required. See issue
      # https://github.com/cli/cli/issues/9514 for more details.
      AZURE_DEVOPS_TOKEN: "${{ secrets.AZURE_DEVOPS_TOKEN }}"

    steps:
      - name: Checkout
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0
        with:
          fetch-depth: 0

      - name: Set SHA
        id: set_sha
        run: |
          if [ -z "${{ github.event.inputs.forced_commit_id }}" ]; then
              commitsha="${GITHUB_SHA}"
          else
              commitsha="${{ github.event.inputs.forced_commit_id }}"
          fi
          echo "Using sha $commitsha"
          echo "sha=${commitsha}" >> $GITHUB_OUTPUT

      - uses: actions/setup-dotnet@67a3573c9a986a3f9c594539f4ab511d57bb3ce9 # v4.3.1
        with:
          dotnet-version: '10.0.100-preview.7.25380.108'

      - name: "Configure Git Credentials"
        run: |
          git config user.name "${{ github.actor }}"
          git config user.email "${{ github.actor }}@users.noreply.github.com"

      - name: "Check NuGet token validity"
        run: |
          echo "Downloading test package"
          if ! curl -fL -o Datadog.Trace.Annotations.1.0.0.nupkg https://www.nuget.org/api/v2/package/Datadog.Trace.Annotations/1.0.0; then
            echo "Download failed!" >&2
            exit 1
          fi

          echo "Pushing package to test NuGet API key validity"
          if ! dotnet nuget push "Datadog.Trace.Annotations.1.0.0.nupkg" --api-key ${{ secrets.NUGET_API_KEY }} --skip-duplicate --source https://api.nuget.org/v3/index.json; then
            echo "Push failed - the API key is likely not valid" >&2
            echo "Create a new NuGet api key at nuget.org, with glob permissions * to push to the Datadog org and" >&2
            echo "replace the NUGET_API_KEY GitHub secret with the new key at https://github.com/DataDog/dd-trace-dotnet/settings/secrets/actions " >&2
            echo "and then try running this release again" >&2
            exit 1
          fi
          
          echo "Push succeeded, cleaning up"
          rm Datadog.Trace.Annotations.1.0.0.nupkg

      - name: Generate GitHub App Token
        id: generate-token
        uses: actions/create-github-app-token@a8d616148505b5069dccd32f177bb87d7f39123b # v2.1.1
        with:
          app-id: ${{ secrets.GH_APP_ID }}
          private-key: ${{ secrets.GH_APP_PRIVATE_KEY }}

      - name: "Check GitLab status"
        if: ${{ !github.event.inputs.ignore_gitlab_failures }}
        run: ./tracer/build.sh VerifyReleaseReadiness
        env:
          CommitSha: "${{ steps.set_sha.outputs.sha }}"
          GITHUB_TOKEN: "${{ steps.generate-token.outputs.token }}"

      - name: "Get current version"
        id: versions
        run: ./tracer/build.sh OutputCurrentVersionToGitHub

      - name: "Download build assets from Azure Pipelines"
        id: assets
        run: ./tracer/build.sh DownloadReleaseArtifacts
        env:
          TargetBranch: ${{ github.event.ref }}
          CommitSha: "${{ steps.set_sha.outputs.sha }}"
          GITHUB_TOKEN: "${{ steps.generate-token.outputs.token }}"

      - name: "Generate release notes"
        id: release_notes
        run: ./tracer/build.sh GenerateReleaseNotes
        env:
          GITHUB_TOKEN: "${{ steps.generate-token.outputs.token }}"

      - name: "Rename vNext milestone"
        id: rename
        # We don't rename vNext/vNext-v1 for hotfix releases
        if: ${{ !contains(github.event.ref, 'hotfix') }}
        run: ./tracer/build.sh RenameVNextMilestone
        env:
          Version: ${{steps.versions.outputs.full_version}}
          GITHUB_TOKEN: "${{ steps.generate-token.outputs.token }}"

      - name: Create Release
        uses: softprops/action-gh-release@72f2c25fcb47643c292f7107632f7a47c1df5cd8 # v1.0.0
        with:
          token: "${{ steps.generate-token.outputs.token }}"
          draft: true
          name: "${{steps.versions.outputs.full_version}}"
          tag_name: "v${{steps.versions.outputs.full_version}}"
          target_commitish: "${{steps.set_sha.outputs.sha}}"
          prerelease: ${{steps.versions.outputs.isprerelease}}
          body: ${{steps.release_notes.outputs.release_notes}}
          fail_on_unmatched_files: true
          files: |
            ${{steps.assets.outputs.artifacts_path}}/*.deb
            ${{steps.assets.outputs.artifacts_path}}/*.rpm
            ${{steps.assets.outputs.artifacts_path}}/*.tar.gz
            ${{steps.assets.outputs.artifacts_path}}/*.zip
            ${{steps.assets.outputs.gitlab_artifacts_path}}/*.msi
            ${{steps.assets.outputs.gitlab_artifacts_path}}/*.zip
            ${{steps.assets.outputs.sha_path}}

      - name: "Publish nuget packages to nuget.org"
        working-directory: ${{steps.assets.outputs.artifacts_path}}
        run: |
          dotnet nuget push "*.${{steps.versions.outputs.full_version}}*.nupkg" --api-key ${{ secrets.NUGET_API_KEY }} --source https://api.nuget.org/v3/index.json

      - name: "Copy gitlab artifacts to artifacts_path"
        run: cp "${{steps.assets.outputs.gitlab_artifacts_path}}/"*.zip "${{steps.assets.outputs.artifacts_path}}/"

      - name: 'Push debug symbols to datadog'
        uses: ./.github/actions/publish-debug-symbols
        with:
          artifacts_path: ${{steps.assets.outputs.artifacts_path}}
          preprod_key: "${{ secrets.DD_PREPROD_API_KEY }}"
          public_symbols_key: "${{ secrets.DD_PUBLIC_SYMBOL_API_KEY }}"
