.dd-octo-sts-setup:
  before_script:
    - |
      set +e
      echo "Attempting to retrieve a GitHub token for scope '$DDOCTOSTS_SCOPE' with policy '$DDOCTOSTS_POLICY' with dd-octo-sts..."
      error_output=$({ dd-octo-sts token --scope $DDOCTOSTS_SCOPE --policy $DDOCTOSTS_POLICY > "/tmp/github-token"; } 2>&1)
      exit_code=$?
      if [ $exit_code -ne 0 ]; then
        echo "ERROR: Failed to retrieve GitHub token."
        echo "Original error: $error_output"
        echo "Continuing execution anyway..."
      fi
      set -e

stages:
  - build
  - benchmarks

build-dd-trace-dotnet-microbenchmarks-ami:
  stage: build
  tags: ["arch:amd64"]
  timeout: 3h
  allow_failure: true
  when: manual
  image: registry.ddbuild.io/images/benchmarking-platform-tools-ubuntu:dd-trace-dotnet-micro
  id_tokens:
    DDOCTOSTS_ID_TOKEN:
      aud: dd-octo-sts
  variables:
    # Allows ephemeral instances to read content from dd-trace-dotnet
    # This is not strictly necessary in the current AMI build
    DDOCTOSTS_SCOPE: "DataDog/dd-trace-dotnet"
    DDOCTOSTS_POLICY: "gitlab.github-access.read-contents"

    AWS_REGION: "us-east-1"

    # TODO: Point to dd-trace-dotnet/micro after the branch below is merged
    # to it
    # Branch containing a provision for building the AMI
    BP_INFRA_BENCHMARKING_PLATFORM_BRANCH: "augusto/dd-trace-dotnet-micro-bp-ui"

    PROVISION_FILE: "platform/ephemeral-infra/ami.yaml"

    # Where AMI creation artifacts will be stored
    BP_INFRA_ARTIFACTS_BUCKET_NAME: "windows-benchmarking-results-us-east-1"

    # Whether to cleanup instances after building the AMI, since the AMI is 
    # based on an instance that is created in this job
    CLEANUP: "true"
  before_script:
    - !reference [.dd-octo-sts-setup, before_script]
  script:
    - git clone --branch $BP_INFRA_BENCHMARKING_PLATFORM_BRANCH https://gitlab-ci-token:${CI_JOB_TOKEN}@gitlab.ddbuild.io/DataDog/benchmarking-platform platform
    - echo "GITHUB_TOKEN=$(cat /tmp/github-token)" > .env
    - CLEANUP_ARG=$([[ "$CLEANUP" == "false" ]] && echo "--no-cleanup" || echo "")
    - |
      bp-infra launch --region "${AWS_REGION}" --os "windows" \
        --provision "${PROVISION_FILE}" \
        --bypass-stack-destroy \
        --env .env \
        $CLEANUP_ARG
  after_script:
    # Makes sure the instance is cleaned up.
    # Note: This does not clean up the created AMI.
    - |
      if [ "$CLEANUP" == "true" ]; then
        bp-infra cleanup --region "${AWS_REGION}" --os "windows" \
          --provision "${PROVISION_FILE}" \
          --bypass-stack-destroy
      else 
        echo "'CLEANUP' is set to 'false'. Will not cleanup."
      fi

run-benchmarks:
  stage: benchmarks
  tags: ["arch:amd64"]
  timeout: 2h
  # Image created in the following job https://gitlab.ddbuild.io/DataDog/benchmarking-platform-tools/-/jobs/869830045
  image: registry.ddbuild.io/images/benchmarking-platform-tools-ubuntu:dd-trace-dotnet-micro
  id_tokens:
    DDOCTOSTS_ID_TOKEN:
      aud: dd-octo-sts
  rules:
    - when: on_success
  artifacts:
    name: "artifacts"
    when: always
    paths:
      - platform/artifacts
    expire_in: 3 months
  variables:
    # Allows ephemeral instances to read content from benchmarking-platform
    DDOCTOSTS_SCOPE: "DataDog/benchmarking-platform"
    DDOCTOSTS_POLICY: "gitlab.github-access.read-contents"

    AWS_REGION: "us-east-1"

    # TODO: Point to dd-trace-dotnet/micro after the branch below is merged
    # to it
    # Branch containing 1. scripts to launch Windows benchmarks on ephemeral 
    # instances (to be used by GitLab CI runners) and 2. scripts to run Windows 
    # benchmarks (to be used by the ephemeral instances).
    BP_INFRA_BENCHMARKING_PLATFORM_BRANCH: "augusto/dd-trace-dotnet-micro-bp-ui"

    # Where benchmarking results will be stored
    BP_INFRA_ARTIFACTS_BUCKET_NAME: "windows-benchmarking-results-us-east-1"

    # Whether to cleanup ephemeral instances after benchmarks are run
    CLEANUP: "true"

    # Where to look for benchmarking artifacts for uploading to the BP UI
    ARTIFACTS_DIR: "platform/artifacts"
  before_script:
    - !reference [.dd-octo-sts-setup, before_script]
  script:
    - export GITHUB_TOKEN=$(cat /tmp/github-token)
    - git clone --branch $BP_INFRA_BENCHMARKING_PLATFORM_BRANCH https://gitlab-ci-token:${CI_JOB_TOKEN}@gitlab.ddbuild.io/DataDog/benchmarking-platform platform
    - ./platform/steps/run-windows-benchmarks.sh
  after_script:
    - |
      if [ "$CLEANUP" == "true" ]; then
        bp-infra cleanup --provision ./platform/ephemeral-infra/instance.yaml \
          --region "${AWS_REGION}" \
          --bypass-stack-destroy
      else
        echo "'CLEANUP' is set to 'false'. Will not cleanup."
      fi
    - ./platform/steps/post-pr-comment.sh
    - ./platform/steps/upload-to-bp-ui.sh
