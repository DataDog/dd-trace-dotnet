stages:
  - check-azure-pipeline
  - benchmarks
  - setup-win
  - benchmarks-win

variables:
  MACROBENCHMARKS_CI_IMAGE: 486234852809.dkr.ecr.us-east-1.amazonaws.com/ci/benchmarking-platform:dotnet-throughput-2

check_azure_pipeline:
  stage: check-azure-pipeline
  image: $MACROBENCHMARKS_CI_IMAGE
  script:
    - git clone --branch dd-trace-dotnet/macro https://gitlab-ci-token:${CI_JOB_TOKEN}@gitlab.ddbuild.io/DataDog/benchmarking-platform platform && cd platform
    - ./wait-for-pipeline.sh
  artifacts:
    name: "artifacts"
    when: always
    paths:
      - artifacts/
      - build-id.txt
    expire_in: 3 months
  interruptible: true
  tags: ["arch:amd64"]
  timeout: 1h
  rules:
    - when: on_success
  variables:
    TEST_BRANCH: "master"

.benchmarks:
  stage: benchmarks
  tags: ["runner:apm-k8s-same-cpu"]
  needs: ["check_azure_pipeline"]
  interruptible: true
  timeout: 1h
  retry:
    max: 2
    when:
      - unknown_failure
      - data_integrity_failure
      - runner_system_failure
      - scheduler_failure
      - api_failure
  rules:
    - when: on_success
  image: $MACROBENCHMARKS_CI_IMAGE

  script:
    - source build-id.txt
    - echo "Building for the following build https://dev.azure.com/datadoghq/dd-trace-dotnet/_build/results?buildId=$buildId&view=results"
    - git clone --branch dd-trace-dotnet/macro https://gitlab-ci-token:${CI_JOB_TOKEN}@gitlab.ddbuild.io/DataDog/benchmarking-platform platform && cd platform
    - bp-runner bp-runner.yml --debug
  artifacts:
    name: "artifacts"
    when: always
    paths:
      - artifacts/
    expire_in: 3 months
  variables:
    FF_USE_LEGACY_KUBERNETES_EXECUTION_STRATEGY: "true"

    K6_OPTIONS_WARMUP_RATE: 500
    K6_OPTIONS_WARMUP_DURATION: 3m
    K6_OPTIONS_WARMUP_GRACEFUL_STOP: 10s
    K6_OPTIONS_WARMUP_PRE_ALLOCATED_VUS: 4
    K6_OPTIONS_WARMUP_MAX_VUS: 4

    K6_OPTIONS_NORMAL_OPERATION_RATE: 400
    K6_OPTIONS_NORMAL_OPERATION_DURATION: 7m
    K6_OPTIONS_NORMAL_OPERATION_GRACEFUL_STOP: 10s
    K6_OPTIONS_NORMAL_OPERATION_PRE_ALLOCATED_VUS: 4
    K6_OPTIONS_NORMAL_OPERATION_MAX_VUS: 4

    K6_OPTIONS_HIGH_LOAD_RATE: 600
    K6_OPTIONS_HIGH_LOAD_DURATION: 3m
    K6_OPTIONS_HIGH_LOAD_GRACEFUL_STOP: 10s
    K6_OPTIONS_HIGH_LOAD_PRE_ALLOCATED_VUS: 4
    K6_OPTIONS_HIGH_LOAD_MAX_VUS: 4

baseline:
  extends: .benchmarks
  variables:
    NATIVE_PROFILER_PATH: "dd-trace-dotnet/tracer/tracer-home-linux/linux-x64/Datadog.Trace.ClrProfiler.Native.so"
    TRACER_HOME_PATH: "dd-trace-dotnet/tracer/tracer-home-linux"
    COR_ENABLE_PROFILING: 0
    CORECLR_ENABLE_PROFILING: 0
    ENDPOINT: "hello"

calltarget_ngen:
  extends: .benchmarks
  variables:
    NATIVE_PROFILER_PATH: "dd-trace-dotnet/tracer/tracer-home-linux/linux-x64/Datadog.Trace.ClrProfiler.Native.so"
    TRACER_HOME_PATH: "dd-trace-dotnet/tracer/tracer-home-linux"
    COR_ENABLE_PROFILING: 1
    CORECLR_ENABLE_PROFILING: 1
    DD_CLR_ENABLE_INLINING: 1
    DD_CLR_ENABLE_NGEN: 1
    ENDPOINT: "hello"

trace_stats:
  extends: .benchmarks
  variables:
    NATIVE_PROFILER_PATH: "dd-trace-dotnet/tracer/tracer-home-linux/linux-x64/Datadog.Trace.ClrProfiler.Native.so"
    TRACER_HOME_PATH: "dd-trace-dotnet/tracer/tracer-home-linux"
    COR_ENABLE_PROFILING: 1
    CORECLR_ENABLE_PROFILING: 1
    DD_CLR_ENABLE_INLINING: 1
    DD_CLR_ENABLE_NGEN: 1
    DD_TRACE_STATS_COMPUTATION_ENABLED: 1
    ENDPOINT: "hello"

manual_only:
  extends: .benchmarks
  variables:
    NATIVE_PROFILER_PATH: "dd-trace-dotnet/tracer/tracer-home-linux/linux-x64/Datadog.Trace.ClrProfiler.Native.so"
    TRACER_HOME_PATH: "dd-trace-dotnet/tracer/tracer-home-linux"
    COR_ENABLE_PROFILING: 0
    CORECLR_ENABLE_PROFILING: 0
    DOTNET_BUILD_ARGS: "/p:MANUAL_INSTRUMENTATION=true /p:MANUAL_ONLY_INSTRUMENTATION=true"
    ENDPOINT: "hello"

manual_and_automatic:
  extends: .benchmarks
  variables:
    NATIVE_PROFILER_PATH: "dd-trace-dotnet/tracer/tracer-home-linux/linux-x64/Datadog.Trace.ClrProfiler.Native.so"
    TRACER_HOME_PATH: "dd-trace-dotnet/tracer/tracer-home-linux"
    COR_ENABLE_PROFILING: 1
    CORECLR_ENABLE_PROFILING: 1
    DOTNET_BUILD_ARGS: "/p:MANUAL_INSTRUMENTATION=true"
    ENDPOINT: "hello"

ddtraceenabled_false:
  extends: .benchmarks
  variables:
    NATIVE_PROFILER_PATH: "dd-trace-dotnet/tracer/tracer-home-linux/linux-x64/Datadog.Trace.ClrProfiler.Native.so"
    TRACER_HOME_PATH: "dd-trace-dotnet/tracer/tracer-home-linux"
    COR_ENABLE_PROFILING: 1
    CORECLR_ENABLE_PROFILING: 1
    DD_TRACE_ENABLED: 0
    ENDPOINT: "hello"

profiler_exceptions_baseline:
  extends: .benchmarks
  variables:
    NATIVE_PROFILER_PATH: "dd-trace-dotnet/tracer/tracer-home-linux/linux-x64/Datadog.Trace.ClrProfiler.Native.so"
    TRACER_HOME_PATH: "dd-trace-dotnet/tracer/tracer-home-linux"
    COR_ENABLE_PROFILING: 0
    CORECLR_ENABLE_PROFILING: 0
    ENDPOINT: "hello/Exception"

profiler:
  extends: .benchmarks
  variables:
    NATIVE_PROFILER_PATH: "dd-trace-dotnet/tracer/tracer-home-linux/linux-x64/Datadog.Trace.ClrProfiler.Native.so"
    TRACER_HOME_PATH: "dd-trace-dotnet/tracer/tracer-home-linux"
    COR_ENABLE_PROFILING: 1
    CORECLR_ENABLE_PROFILING: 1
    DD_PROFILING_ENABLED: 1
    COMPlus_EnableDiagnostics: 1
    ENDPOINT: "hello"

profiler_walltime:
  extends: .benchmarks
  variables:
    NATIVE_PROFILER_PATH: "dd-trace-dotnet/tracer/tracer-home-linux/linux-x64/Datadog.Trace.ClrProfiler.Native.so"
    TRACER_HOME_PATH: "dd-trace-dotnet/tracer/tracer-home-linux"
    COR_ENABLE_PROFILING: 1
    CORECLR_ENABLE_PROFILING: 1
    DD_PROFILING_ENABLED: 1
    COMPlus_EnableDiagnostics: 1
    DD_PROFILING_WALLTIME_ENABLED: 1
    DD_PROFILING_CPU_ENABLED: 0
    ENDPOINT: "hello"

profiler_exceptions:
  extends: .benchmarks
  variables:
    NATIVE_PROFILER_PATH: "dd-trace-dotnet/tracer/tracer-home-linux/linux-x64/Datadog.Trace.ClrProfiler.Native.so"
    TRACER_HOME_PATH: "dd-trace-dotnet/tracer/tracer-home-linux"
    COR_ENABLE_PROFILING: 1
    CORECLR_ENABLE_PROFILING: 1
    DD_PROFILING_ENABLED: 1
    DD_PROFILING_EXCEPTION_ENABLED: 1
    COMPlus_EnableDiagnostics: 1
    ENDPOINT: "hello/Exception"

profiler_cpu:
  extends: .benchmarks
  variables:
    NATIVE_PROFILER_PATH: "dd-trace-dotnet/tracer/tracer-home-linux/linux-x64/Datadog.Trace.ClrProfiler.Native.so"
    TRACER_HOME_PATH: "dd-trace-dotnet/tracer/tracer-home-linux"
    COR_ENABLE_PROFILING: 1
    CORECLR_ENABLE_PROFILING: 1
    DD_PROFILING_ENABLED: 1
    DD_PROFILING_WALLTIME_ENABLED: 0
    DD_PROFILING_CPU_ENABLED: 1
    COMPlus_EnableDiagnostics: 1
    ENDPOINT: "hello"

profiler_cpu_timer_create:
  extends: .benchmarks
  variables:
    NATIVE_PROFILER_PATH: "dd-trace-dotnet/tracer/tracer-home-linux/linux-x64/Datadog.Trace.ClrProfiler.Native.so"
    TRACER_HOME_PATH: "dd-trace-dotnet/tracer/tracer-home-linux"
    COR_ENABLE_PROFILING: 1
    CORECLR_ENABLE_PROFILING: 1
    DD_PROFILING_ENABLED: 1
    DD_PROFILING_WALLTIME_ENABLED: 0
    DD_PROFILING_CPU_ENABLED: 1
    COMPlus_EnableDiagnostics: 1
    ENDPOINT: "hello"

.benchmarks-arm64:
  stage: benchmarks
  tags: ["runner:apm-k8s-same-cpu"]
  needs: ["check_azure_pipeline"]
  interruptible: true
  timeout: 1h
  retry:
    max: 2
    when:
      - unknown_failure
      - data_integrity_failure
      - runner_system_failure
      - scheduler_failure
      - api_failure
  rules:
    - when: on_success
  image: $MACROBENCHMARKS_CI_IMAGE

  script:
    - source build-id.txt
    - echo "Building for the following build https://dev.azure.com/datadoghq/dd-trace-dotnet/_build/results?buildId=$buildId&view=results"
    - git clone --branch dd-trace-dotnet/macro https://gitlab-ci-token:${CI_JOB_TOKEN}@gitlab.ddbuild.io/DataDog/benchmarking-platform platform && cd platform
    - bp-runner bp-runner.arm.yml --debug
  artifacts:
    name: "artifacts"
    when: always
    paths:
      - artifacts/
    expire_in: 3 months
  variables:
    FF_USE_LEGACY_KUBERNETES_EXECUTION_STRATEGY: "true"

    K6_OPTIONS_WARMUP_RATE: 500
    K6_OPTIONS_WARMUP_DURATION: 3m
    K6_OPTIONS_WARMUP_GRACEFUL_STOP: 10s
    K6_OPTIONS_WARMUP_PRE_ALLOCATED_VUS: 4
    K6_OPTIONS_WARMUP_MAX_VUS: 4

    K6_OPTIONS_NORMAL_OPERATION_RATE: 400
    K6_OPTIONS_NORMAL_OPERATION_DURATION: 7m
    K6_OPTIONS_NORMAL_OPERATION_GRACEFUL_STOP: 10s
    K6_OPTIONS_NORMAL_OPERATION_PRE_ALLOCATED_VUS: 4
    K6_OPTIONS_NORMAL_OPERATION_MAX_VUS: 4

    K6_OPTIONS_HIGH_LOAD_RATE: 600
    K6_OPTIONS_HIGH_LOAD_DURATION: 3m
    K6_OPTIONS_HIGH_LOAD_GRACEFUL_STOP: 10s
    K6_OPTIONS_HIGH_LOAD_PRE_ALLOCATED_VUS: 4
    K6_OPTIONS_HIGH_LOAD_MAX_VUS: 4

baseline-arm64:
  extends: .benchmarks-arm64
  tags: ["runner:apm-k8s-arm-metal"]
  variables:
    NATIVE_PROFILER_PATH: "dd-trace-dotnet/tracer/tracer-home-linux-arm64/linux-arm64/Datadog.Trace.ClrProfiler.Native.so"
    TRACER_HOME_PATH: "dd-trace-dotnet/tracer/tracer-home-linux-arm64"
    COR_ENABLE_PROFILING: 0
    CORECLR_ENABLE_PROFILING: 0
    ENDPOINT: "hello"

calltarget_ngen-arm64:
  extends: .benchmarks-arm64
  tags: ["runner:apm-k8s-arm-metal"]
  variables:
    NATIVE_PROFILER_PATH: "dd-trace-dotnet/tracer/tracer-home-linux-arm64/linux-arm64/Datadog.Trace.ClrProfiler.Native.so"
    TRACER_HOME_PATH: "dd-trace-dotnet/tracer/tracer-home-linux-arm64"
    COR_ENABLE_PROFILING: 1
    CORECLR_ENABLE_PROFILING: 1
    DD_CLR_ENABLE_INLINING: 1
    DD_CLR_ENABLE_NGEN: 1
    ENDPOINT: "hello"

trace_stats-arm64:
  extends: .benchmarks-arm64
  tags: ["runner:apm-k8s-arm-metal"]
  variables:
    NATIVE_PROFILER_PATH: "dd-trace-dotnet/tracer/tracer-home-linux-arm64/linux-arm64/Datadog.Trace.ClrProfiler.Native.so"
    TRACER_HOME_PATH: "dd-trace-dotnet/tracer/tracer-home-linux-arm64"
    COR_ENABLE_PROFILING: 1
    CORECLR_ENABLE_PROFILING: 1
    DD_CLR_ENABLE_INLINING: 1
    DD_CLR_ENABLE_NGEN: 1
    DD_TRACE_STATS_COMPUTATION_ENABLED: 1
    ENDPOINT: "hello"

manual_only-arm64:
  extends: .benchmarks-arm64
  tags: ["runner:apm-k8s-arm-metal"]
  variables:
    NATIVE_PROFILER_PATH: "dd-trace-dotnet/tracer/tracer-home-linux-arm64/linux-arm64/Datadog.Trace.ClrProfiler.Native.so"
    TRACER_HOME_PATH: "dd-trace-dotnet/tracer/tracer-home-linux-arm64"
    COR_ENABLE_PROFILING: 0
    CORECLR_ENABLE_PROFILING: 0
    DOTNET_BUILD_ARGS: "/p:MANUAL_INSTRUMENTATION=true /p:MANUAL_ONLY_INSTRUMENTATION=true"
    ENDPOINT: "hello"

manual_and_automatic-arm64:
  extends: .benchmarks-arm64
  tags: ["runner:apm-k8s-arm-metal"]
  variables:
    NATIVE_PROFILER_PATH: "dd-trace-dotnet/tracer/tracer-home-linux-arm64/linux-arm64/Datadog.Trace.ClrProfiler.Native.so"
    TRACER_HOME_PATH: "dd-trace-dotnet/tracer/tracer-home-linux-arm64"
    COR_ENABLE_PROFILING: 1
    CORECLR_ENABLE_PROFILING: 1
    DOTNET_BUILD_ARGS: "/p:MANUAL_INSTRUMENTATION=true"
    ENDPOINT: "hello"

ddtraceenabled_false-arm64:
  extends: .benchmarks-arm64
  tags: ["runner:apm-k8s-arm-metal"]
  variables:
    NATIVE_PROFILER_PATH: "dd-trace-dotnet/tracer/tracer-home-linux-arm64/linux-arm64/Datadog.Trace.ClrProfiler.Native.so"
    TRACER_HOME_PATH: "dd-trace-dotnet/tracer/tracer-home-linux-arm64"
    COR_ENABLE_PROFILING: 1
    CORECLR_ENABLE_PROFILING: 1
    DD_TRACE_ENABLED: 0
    ENDPOINT: "hello"

profiler_exceptions_baseline-arm64:
  tags: ["runner:apm-k8s-arm-metal"]
  extends: .benchmarks-arm64
  variables:
    NATIVE_PROFILER_PATH: "dd-trace-dotnet/tracer/tracer-home-linux-arm64/linux-arm64/Datadog.Trace.ClrProfiler.Native.so"
    TRACER_HOME_PATH: "dd-trace-dotnet/tracer/tracer-home-linux-arm64"
    COR_ENABLE_PROFILING: 0
    CORECLR_ENABLE_PROFILING: 0
    ENDPOINT: "hello/Exception"

profiler-arm64:
  tags: ["runner:apm-k8s-arm-metal"]
  extends: .benchmarks-arm64
  variables:
    NATIVE_PROFILER_PATH: "dd-trace-dotnet/tracer/tracer-home-linux-arm64/linux-arm64/Datadog.Trace.ClrProfiler.Native.so"
    TRACER_HOME_PATH: "dd-trace-dotnet/tracer/tracer-home-linux-arm64"
    COR_ENABLE_PROFILING: 1
    CORECLR_ENABLE_PROFILING: 1
    DD_PROFILING_ENABLED: 1
    COMPlus_EnableDiagnostics: 1
    ENDPOINT: "hello"

profiler_walltime-arm64:
  tags: ["runner:apm-k8s-arm-metal"]
  extends: .benchmarks-arm64
  variables:
    NATIVE_PROFILER_PATH: "dd-trace-dotnet/tracer/tracer-home-linux-arm64/linux-arm64/Datadog.Trace.ClrProfiler.Native.so"
    TRACER_HOME_PATH: "dd-trace-dotnet/tracer/tracer-home-linux-arm64"
    COR_ENABLE_PROFILING: 1
    CORECLR_ENABLE_PROFILING: 1
    DD_PROFILING_ENABLED: 1
    COMPlus_EnableDiagnostics: 1
    DD_PROFILING_WALLTIME_ENABLED: 1
    DD_PROFILING_CPU_ENABLED: 0
    ENDPOINT: "hello"

profiler_exceptions-arm64:
  tags: ["runner:apm-k8s-arm-metal"]
  extends: .benchmarks-arm64
  variables:
    NATIVE_PROFILER_PATH: "dd-trace-dotnet/tracer/tracer-home-linux-arm64/linux-arm64/Datadog.Trace.ClrProfiler.Native.so"
    TRACER_HOME_PATH: "dd-trace-dotnet/tracer/tracer-home-linux-arm64"
    COR_ENABLE_PROFILING: 1
    CORECLR_ENABLE_PROFILING: 1
    DD_PROFILING_ENABLED: 1
    DD_PROFILING_EXCEPTION_ENABLED: 1
    COMPlus_EnableDiagnostics: 1
    ENDPOINT: "hello/Exception"

profiler_cpu-arm64:
  tags: ["runner:apm-k8s-arm-metal"]
  extends: .benchmarks-arm64
  variables:
    NATIVE_PROFILER_PATH: "dd-trace-dotnet/tracer/tracer-home-linux-arm64/linux-arm64/Datadog.Trace.ClrProfiler.Native.so"
    TRACER_HOME_PATH: "dd-trace-dotnet/tracer/tracer-home-linux-arm64"
    COR_ENABLE_PROFILING: 1
    CORECLR_ENABLE_PROFILING: 1
    DD_PROFILING_ENABLED: 1
    DD_PROFILING_WALLTIME_ENABLED: 0
    DD_PROFILING_CPU_ENABLED: 1
    COMPlus_EnableDiagnostics: 1
    ENDPOINT: "hello"

profiler_cpu_timer_create-arm64:
  tags: ["runner:apm-k8s-arm-metal"]
  extends: .benchmarks-arm64
  variables:
    NATIVE_PROFILER_PATH: "dd-trace-dotnet/tracer/tracer-home-linux-arm64/linux-arm64/Datadog.Trace.ClrProfiler.Native.so"
    TRACER_HOME_PATH: "dd-trace-dotnet/tracer/tracer-home-linux-arm64"
    COR_ENABLE_PROFILING: 1
    CORECLR_ENABLE_PROFILING: 1
    DD_PROFILING_ENABLED: 1
    DD_PROFILING_WALLTIME_ENABLED: 0
    DD_PROFILING_CPU_ENABLED: 1
    COMPlus_EnableDiagnostics: 1
    ENDPOINT: "hello"

.ephemeral-infra-setup:
  variables: &ephemeral-infra-setup-variables
    AWS_REGION: "us-east-1"
    AWS_PROFILE: "ephemeral-infra-ci"
  script:
    # Future improvements: Save this to a script in benchmarking-platform-tools,
    # considering that repos using ephemeral infra will run the same steps.  
    - mkdir -p ~/.aws 
    - |
      (
      unset AWS_PROFILE
      aws ssm get-parameter \
        --name "ci.${CI_PROJECT_NAME}.ephemeral-infra-ci.${CI_PROJECT_NAME}-profile" \
        --region "$AWS_REGION" \
        --with-decryption --query "Parameter.Value" \
        --out text >> ~/.aws/config
      aws ssm get-parameter \
        --name "ci.${CI_PROJECT_NAME}.ephemeral-infra-ci.windows-benchmarking-key-pair-name" \
        --region "$AWS_REGION" \
        --with-decryption --query "Parameter.Value" \
        --out text >> ~/.aws/key-pair-name.txt
      aws ssm get-parameter \
        --name "ci.${CI_PROJECT_NAME}.ephemeral-infra-ci.windows-benchmarking-key-private-key" \
        --region "$AWS_REGION" \
        --with-decryption --query "Parameter.Value" \
        --out text >> ~/.aws/key-pair-private-key.pem
      )
    # Variables prefixed by 'BP_INFRA_' are automatically used by launch.sh
    - export BP_INFRA_KEY_PAIR_NAME=$(cat ~/.aws/key-pair-name.txt)
    - export BP_INFRA_KEY_PAIR_PRIVATE_KEY_PATH=~/.aws/key-pair-private-key.pem

build-ami:
  stage: setup-win
  needs: []
  tags: ["arch:amd64"]
  image: registry.ddbuild.io/images/benchmarking-platform-tools-ubuntu:latest
  interruptible: true
  timeout: 1h
  when: manual
  variables:
    <<: *ephemeral-infra-setup-variables
  script:
    - !reference [.ephemeral-infra-setup, script]
    - /app/infra/launch.sh --region "${AWS_REGION}" --provision .gitlab/benchmarks/provisions/macrobenchmark-base-instance-and-ami.yaml

.benchmarks-win:
  stage: benchmarks-win
  needs: ["check_azure_pipeline"]
  tags: ["arch:amd64"]
  image: registry.ddbuild.io/images/benchmarking-platform-tools-ubuntu:latest
  interruptible: true
  timeout: 1h
  rules:
    - when: on_success
  artifacts:
    name: "artifacts"
    when: always
    paths:
      - artifacts/
    expire_in: 3 months
  variables:
    FF_USE_LEGACY_KUBERNETES_EXECUTION_STRATEGY: "true"

    <<: *ephemeral-infra-setup-variables
    BP_INFRA_BENCHMARKING_PLATFORM_BRANCH: "igoragoli/improve-representativeness"
    CLEANUP: "true"

    K6_OPTIONS_WARMUP_RATE: 500
    K6_OPTIONS_WARMUP_DURATION: 1m
    K6_OPTIONS_WARMUP_GRACEFUL_STOP: 10s
    K6_OPTIONS_WARMUP_PRE_ALLOCATED_VUS: 500
    K6_OPTIONS_WARMUP_MAX_VUS: 1000

    K6_OPTIONS_NORMAL_OPERATION_RATE: 10
    K6_OPTIONS_NORMAL_OPERATION_DURATION: 2m
    K6_OPTIONS_NORMAL_OPERATION_GRACEFUL_STOP: 10s
    K6_OPTIONS_NORMAL_OPERATION_PRE_ALLOCATED_VUS: 4
    K6_OPTIONS_NORMAL_OPERATION_MAX_VUS: 4

    K6_OPTIONS_HIGH_LOAD_RATE: 10
    K6_OPTIONS_HIGH_LOAD_DURATION: 2m
    K6_OPTIONS_HIGH_LOAD_GRACEFUL_STOP: 10s
    K6_OPTIONS_HIGH_LOAD_PRE_ALLOCATED_VUS: 4
    K6_OPTIONS_HIGH_LOAD_MAX_VUS: 4
  script:
    - git clone --branch $BP_INFRA_BENCHMARKING_PLATFORM_BRANCH https://gitlab-ci-token:${CI_JOB_TOKEN}@gitlab.ddbuild.io/DataDog/benchmarking-platform platform
    - !reference [.ephemeral-infra-setup, script]
    - CLEANUP_ARG=$([[ "$CLEANUP" == "false" ]] && echo "--no-cleanup" || echo "")
    - source build-id.txt # Contains an environment variable named 'buildId'
    - printenv | grep -E '^K6_OPTIONS_|^BP_|^ENDPOINT=|^buildId=' > /tmp/.env
    - /app/infra/launch.sh --region "${AWS_REGION}" --provision .gitlab/benchmarks/provisions/macrobenchmark-ephemeral-instance.yaml --env "/tmp/.env" $CLEANUP_ARG

baseline-win:
  extends: .benchmarks-win
  variables:
    ENDPOINT: "hello"

calltarget_ngen-win:
  extends: .benchmarks-win
  variables:
    COR_ENABLE_PROFILING: 1
    CORECLR_ENABLE_PROFILING: 1
    DD_CLR_ENABLE_INLINING: 1
    DD_CLR_ENABLE_NGEN: 1
    ENDPOINT: "hello"

trace_stats-win:
  extends: .benchmarks-win
  variables:
    COR_ENABLE_PROFILING: 1
    CORECLR_ENABLE_PROFILING: 1
    DD_CLR_ENABLE_INLINING: 1
    DD_CLR_ENABLE_NGEN: 1
    DD_TRACE_STATS_COMPUTATION_ENABLED: 1
    ENDPOINT: "hello"

manual_only-win:
  extends: .benchmarks-win
  variables:
    COR_ENABLE_PROFILING: 0
    CORECLR_ENABLE_PROFILING: 0
    DOTNET_BUILD_ARGS: "/p:MANUAL_INSTRUMENTATION=true /p:MANUAL_ONLY_INSTRUMENTATION=true"
    ENDPOINT: "hello"

manual_and_automatic-win:
  extends: .benchmarks-win
  variables:
    COR_ENABLE_PROFILING: 1
    CORECLR_ENABLE_PROFILING: 1
    DOTNET_BUILD_ARGS: "/p:MANUAL_INSTRUMENTATION=true"
    ENDPOINT: "hello"

ddtraceenabled_false-win:
  extends: .benchmarks-win
  variables:
    COR_ENABLE_PROFILING: 1
    CORECLR_ENABLE_PROFILING: 1
    DD_TRACE_ENABLED: 0
    ENDPOINT: "hello"

profiler_exceptions_baseline-win:
  extends: .benchmarks-win
  variables:
    COR_ENABLE_PROFILING: 0
    CORECLR_ENABLE_PROFILING: 0
    ENDPOINT: "hello/Exception"

profiler-win:
  extends: .benchmarks-win
  variables:
    COR_ENABLE_PROFILING: 1
    CORECLR_ENABLE_PROFILING: 1
    DD_PROFILING_ENABLED: 1
    COMPlus_EnableDiagnostics: 1
    ENDPOINT: "hello"

profiler_walltime-win:
  extends: .benchmarks-win
  variables:
    COR_ENABLE_PROFILING: 1
    CORECLR_ENABLE_PROFILING: 1
    DD_PROFILING_ENABLED: 1
    COMPlus_EnableDiagnostics: 1
    DD_PROFILING_WALLTIME_ENABLED: 1
    DD_PROFILING_CPU_ENABLED: 0
    ENDPOINT: "hello"

profiler_exceptions-win:
  extends: .benchmarks-win
  variables:
    COR_ENABLE_PROFILING: 1
    CORECLR_ENABLE_PROFILING: 1
    DD_PROFILING_ENABLED: 1
    DD_PROFILING_EXCEPTION_ENABLED: 1
    COMPlus_EnableDiagnostics: 1
    ENDPOINT: "hello/Exception"

profiler_cpu-win:
  extends: .benchmarks-win
  variables:
    COR_ENABLE_PROFILING: 1
    CORECLR_ENABLE_PROFILING: 1
    DD_PROFILING_ENABLED: 1
    DD_PROFILING_WALLTIME_ENABLED: 0
    DD_PROFILING_CPU_ENABLED: 1
    COMPlus_EnableDiagnostics: 1
    ENDPOINT: "hello"

profiler_cpu_timer_create-win:
  extends: .benchmarks-win
  variables:
    COR_ENABLE_PROFILING: 1
    CORECLR_ENABLE_PROFILING: 1
    DD_PROFILING_ENABLED: 1
    DD_PROFILING_WALLTIME_ENABLED: 0
    DD_PROFILING_CPU_ENABLED: 1
    COMPlus_EnableDiagnostics: 1
    ENDPOINT: "hello"