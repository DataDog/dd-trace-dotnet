version: '3.4'
services:
  sqledge_arm64:
    image: mcr.microsoft.com/azure-sql-edge:latest
    ports:
    - "1433"
    environment:
    - ACCEPT_EULA=Y
    - SA_PASSWORD=Strong!Passw0rd

  wcfservice:
    image: mcr.microsoft.com/dotnet/framework/wcf:4.8
    ports:
    - "127.0.0.1:8585:8585"

  openldap:
    image: osixia/openldap:latest
    ports:
      - "389:369"
      - "636:636"
    hostname: openldap-server
    environment:
      LDAP_ORGANISATION: "Datadog"
      LDAP_DOMAIN: "dd-trace-dotnet.com"
      LDAP_ADMIN_PASSWORD: "Passw0rd"
      LDAP_BASE_DN: "dc=dd-trace-dotnet,dc=com"


  # The IIS images are based on Windows images, so they can only be run on Docker for Windows,
  # and only after switching to run Windows containers
  IntegrationTests.IIS:
    build:
      context: ./
      args:
        - ENABLE_32_BIT
        - DOTNET_TRACER_MSI
      dockerfile: ./tracer/build/_build/docker/iis.dockerfile
    image: datadog-iis-loaderoptimizationregkey
    ports:
    - "8080:80"
    environment:
      - DD_CLR_ENABLE_NGEN=${DD_CLR_ENABLE_NGEN:-1}
      - DD_LOGGER_DD_API_KEY
      - DD_LOGGER_DD_SERVICE
      - DD_LOGGER_DD_ENV
      - DD_LOGGER_ENABLED
      - DD_LOGGER_TF_BUILD=${TF_BUILD:-}
      - DD_LOGGER_BUILD_BUILDID
      - DD_LOGGER_BUILD_DEFINITIONNAME
      - DD_LOGGER_BUILD_SOURCESDIRECTORY
      - DD_LOGGER_BUILD_REPOSITORY_URI
      - DD_LOGGER_BUILD_SOURCEVERSION
      - DD_LOGGER_BUILD_SOURCEBRANCH
      - DD_LOGGER_BUILD_SOURCEBRANCHNAME
      - DD_LOGGER_BUILD_SOURCEVERSIONMESSAGE
      - DD_LOGGER_BUILD_REQUESTEDFORID
      - DD_LOGGER_BUILD_REQUESTEDFOREMAIL
      - DD_LOGGER_SYSTEM_TEAMFOUNDATIONSERVERURI
      - DD_LOGGER_SYSTEM_TEAMPROJECTID
      - DD_LOGGER_SYSTEM_STAGEDISPLAYNAME
      - DD_LOGGER_SYSTEM_JOBDISPLAYNAME
      - DD_LOGGER_SYSTEM_JOBID
      - DD_LOGGER_SYSTEM_TASKINSTANCEID=${SYSTEM_TASKINSTANCEID:-}
      - DD_LOGGER_SYSTEM_PULLREQUEST_SOURCEREPOSITORYURI
      - DD_LOGGER_SYSTEM_PULLREQUEST_SOURCECOMMITID
      - DD_LOGGER_SYSTEM_PULLREQUEST_SOURCEBRANCH
      - DD_LOGGER_DD_TAGS

  ProfilerIntegrationTests:
    build:
      context: ./tracer/build/_build/
      dockerfile: docker/${baseImage:-debian}.dockerfile
      args:
        - DOTNETSDK_VERSION=${dotnetCoreSdkLatestVersion:-8.0.100}
    image: dd-trace-dotnet/${baseImage:-debian}-tester:${dotnetCoreSdkLatestVersion:-8.0.100}
    command: dotnet /build/bin/Debug/_build.dll BuildAndRunProfilerIntegrationTests
    volumes:
      - ./:/project
    cap_add:
      - SYS_PTRACE
    environment:
      - NugetPackageDirectory=/project/${relativeNugetPackageDirectory:-packages}
      - artifacts=/project/${relativeArtifacts:-tracer/src/bin/artifacts}
      - framework=${framework:-netcoreapp3.1}
      - baseImage=${baseImage:-default}
      - DD_CLR_ENABLE_NGEN=${DD_CLR_ENABLE_NGEN:-1}
      - IncludeMinorPackageVersions=${IncludeMinorPackageVersions:-false}
      - enable_crash_dumps=${enable_crash_dumps:-true}
      - DD_LOGGER_DD_API_KEY
      - DD_LOGGER_DD_SERVICE
      - DD_LOGGER_DD_ENV
      - DD_LOGGER_ENABLED
      - DD_LOGGER_TF_BUILD=${TF_BUILD:-}
      - DD_LOGGER_BUILD_BUILDID
      - DD_LOGGER_BUILD_DEFINITIONNAME
      - DD_LOGGER_BUILD_SOURCESDIRECTORY
      - DD_LOGGER_BUILD_REPOSITORY_URI
      - DD_LOGGER_BUILD_SOURCEVERSION
      - DD_LOGGER_BUILD_SOURCEBRANCH
      - DD_LOGGER_BUILD_SOURCEBRANCHNAME
      - DD_LOGGER_BUILD_SOURCEVERSIONMESSAGE
      - DD_LOGGER_BUILD_REQUESTEDFORID
      - DD_LOGGER_BUILD_REQUESTEDFOREMAIL
      - DD_LOGGER_SYSTEM_TEAMFOUNDATIONSERVERURI
      - DD_LOGGER_SYSTEM_TEAMPROJECTID
      - DD_LOGGER_SYSTEM_STAGEDISPLAYNAME
      - DD_LOGGER_SYSTEM_JOBDISPLAYNAME
      - DD_LOGGER_SYSTEM_JOBID
      - DD_LOGGER_SYSTEM_TASKINSTANCEID=${SYSTEM_TASKINSTANCEID:-}
      - DD_LOGGER_SYSTEM_PULLREQUEST_SOURCEREPOSITORYURI
      - DD_LOGGER_SYSTEM_PULLREQUEST_SOURCECOMMITID
      - DD_LOGGER_SYSTEM_PULLREQUEST_SOURCEBRANCH
      - DD_LOGGER_DD_TAGS
      - LDAP_SERVER=openldap-server:389
    hostname: integrationtests
    depends_on:
      - openldap

  IntegrationTests:
    build:
      context: ./tracer/build/_build/
      dockerfile: docker/${baseImage:-debian}.dockerfile
      args:
        - DOTNETSDK_VERSION=${dotnetCoreSdkLatestVersion:-8.0.100}
    image: dd-trace-dotnet/${baseImage:-debian}-tester:${dotnetCoreSdkLatestVersion:-8.0.100}
    command: dotnet /build/bin/Debug/_build.dll RunLinuxIntegrationTests --framework ${framework:-netcoreapp3.1} --filter ${Filter:- } --SampleName ${SampleName:- } --code-coverage ${runCodeCoverage:-true}
    volumes:
      - ./:/project
    cap_add:
      - SYS_PTRACE
    environment:
      - NugetPackageDirectory=/project/${relativeNugetPackageDirectory:-packages}
      - artifacts=/project/${relativeArtifacts:-tracer/src/bin/artifacts}
      - framework=${framework:-netcoreapp3.1}
      - Filter=${Filter:- } #optional
      - SampleName=${SampleName:- } #optional
      - baseImage=${baseImage:-default}
      - runCodeCoverage=${runCodeCoverage:-true}
      - DD_CLR_ENABLE_NGEN=${DD_CLR_ENABLE_NGEN:-1}
      - TestAllPackageVersions=${TestAllPackageVersions:-true}
      - IncludeMinorPackageVersions=${IncludeMinorPackageVersions:-false}
      - enable_crash_dumps=${enable_crash_dumps:-true}
      - Verify_DisableClipboard=true
      - DiffEngine_Disabled=true
      - IncludeAllTestFrameworks
      - AWS_SDK_HOST=localstack:4566
      - CONTAINER_HOSTNAME=http://integrationtests
      - DD_LOGGER_DD_API_KEY
      - DD_LOGGER_DD_SERVICE
      - DD_LOGGER_DD_ENV
      - DD_LOGGER_ENABLED
      - DD_LOGGER_TF_BUILD=${TF_BUILD:-}
      - DD_LOGGER_BUILD_BUILDID
      - DD_LOGGER_BUILD_DEFINITIONNAME
      - DD_LOGGER_BUILD_SOURCESDIRECTORY
      - DD_LOGGER_BUILD_REPOSITORY_URI
      - DD_LOGGER_BUILD_SOURCEVERSION
      - DD_LOGGER_BUILD_SOURCEBRANCH
      - DD_LOGGER_BUILD_SOURCEBRANCHNAME
      - DD_LOGGER_BUILD_SOURCEVERSIONMESSAGE
      - DD_LOGGER_BUILD_REQUESTEDFORID
      - DD_LOGGER_BUILD_REQUESTEDFOREMAIL
      - DD_LOGGER_SYSTEM_TEAMFOUNDATIONSERVERURI
      - DD_LOGGER_SYSTEM_TEAMPROJECTID
      - DD_LOGGER_SYSTEM_STAGEDISPLAYNAME
      - DD_LOGGER_SYSTEM_JOBDISPLAYNAME
      - DD_LOGGER_SYSTEM_JOBID
      - DD_LOGGER_SYSTEM_TASKINSTANCEID=${SYSTEM_TASKINSTANCEID:-}
      - DD_LOGGER_SYSTEM_PULLREQUEST_SOURCEREPOSITORYURI
      - DD_LOGGER_SYSTEM_PULLREQUEST_SOURCECOMMITID
      - DD_LOGGER_SYSTEM_PULLREQUEST_SOURCEBRANCH
      - DD_LOGGER_DD_TAGS
    hostname: integrationtests

  IntegrationTests.Debugger:
    build:
      context: ./tracer/build/_build/
      dockerfile: docker/${baseImage:-debian}.dockerfile
      args:
        - DOTNETSDK_VERSION=${dotnetCoreSdkLatestVersion:-8.0.100}
    image: dd-trace-dotnet/${baseImage:-debian}-tester:${dotnetCoreSdkLatestVersion:-8.0.100}
    command: dotnet /build/bin/Debug/_build.dll RunDebuggerIntegrationTests --framework ${framework:-netcoreapp3.1} --code-coverage ${runCodeCoverage:-true} --targetplatform x64
    volumes:
      - ./:/project
    cap_add:
      - SYS_PTRACE
    environment:
      - NugetPackageDirectory=/project/${relativeNugetPackageDirectory:-packages}
      - artifacts=/project/${relativeArtifacts:-tracer/src/bin/artifacts}
      - framework=${framework:-netcoreapp3.1}
      - baseImage=${baseImage:-default}
      - runCodeCoverage=${runCodeCoverage:-true}
      - DD_CLR_ENABLE_NGEN=${DD_CLR_ENABLE_NGEN:-1}
      - enable_crash_dumps=${enable_crash_dumps:-true}
      - Verify_DisableClipboard=true
      - DiffEngine_Disabled=true
      - DD_LOGGER_DD_API_KEY
      - DD_LOGGER_DD_SERVICE
      - DD_LOGGER_DD_ENV
      - DD_LOGGER_ENABLED
      - DD_LOGGER_TF_BUILD=${TF_BUILD:-}
      - DD_LOGGER_BUILD_BUILDID
      - DD_LOGGER_BUILD_DEFINITIONNAME
      - DD_LOGGER_BUILD_SOURCESDIRECTORY
      - DD_LOGGER_BUILD_REPOSITORY_URI
      - DD_LOGGER_BUILD_SOURCEVERSION
      - DD_LOGGER_BUILD_SOURCEBRANCH
      - DD_LOGGER_BUILD_SOURCEBRANCHNAME
      - DD_LOGGER_BUILD_SOURCEVERSIONMESSAGE
      - DD_LOGGER_BUILD_REQUESTEDFORID
      - DD_LOGGER_BUILD_REQUESTEDFOREMAIL
      - DD_LOGGER_SYSTEM_TEAMFOUNDATIONSERVERURI
      - DD_LOGGER_SYSTEM_TEAMPROJECTID
      - DD_LOGGER_SYSTEM_STAGEDISPLAYNAME
      - DD_LOGGER_SYSTEM_JOBDISPLAYNAME
      - DD_LOGGER_SYSTEM_JOBID
      - DD_LOGGER_SYSTEM_TASKINSTANCEID=${SYSTEM_TASKINSTANCEID:-}
      - DD_LOGGER_SYSTEM_PULLREQUEST_SOURCEREPOSITORYURI
      - DD_LOGGER_SYSTEM_PULLREQUEST_SOURCECOMMITID
      - DD_LOGGER_SYSTEM_PULLREQUEST_SOURCEBRANCH
      - DD_LOGGER_DD_TAGS
    hostname: integrationtests

  IntegrationTests.Serverless:
    build:
      context: ./tracer/build/_build/
      dockerfile: docker/${baseImage:-debian}.dockerfile
      args:
        - DOTNETSDK_VERSION=${dotnetCoreSdkLatestVersion:-8.0.100}
    image: dd-trace-dotnet/${baseImage:-debian}-tester:${dotnetCoreSdkLatestVersion:-8.0.100}
    command: dotnet /build/bin/Debug/_build.dll RunLinuxIntegrationTests --framework ${framework:-netcoreapp3.1} --filter Category=Lambda --code-coverage ${runCodeCoverage:-true}
    volumes:
      - ./:/project
    cap_add:
      - SYS_PTRACE
    environment:
      - NugetPackageDirectory=/project/${relativeNugetPackageDirectory:-packages}
      - artifacts=/project/${relativeArtifacts:-tracer/src/bin/artifacts}
      - framework=${framework:-netcoreapp3.1}
      - baseImage=${baseImage:-default}
      - runCodeCoverage=${runCodeCoverage:-true}
      - DD_CLR_ENABLE_NGEN=${DD_CLR_ENABLE_NGEN:-1}
      - TestAllPackageVersions=${TestAllPackageVersions:-true}
      - IncludeMinorPackageVersions=${IncludeMinorPackageVersions:-false}
      - enable_crash_dumps=${enable_crash_dumps:-true}
      - Verify_DisableClipboard=true
      - DiffEngine_Disabled=true
      - CONTAINER_HOSTNAME=http://integrationtests
      - IncludeAllTestFrameworks
      - DD_LOGGER_DD_API_KEY
      - DD_LOGGER_DD_SERVICE
      - DD_LOGGER_DD_ENV
      - DD_LOGGER_ENABLED
      - DD_LOGGER_TF_BUILD=${TF_BUILD:-}
      - DD_LOGGER_BUILD_BUILDID
      - DD_LOGGER_BUILD_DEFINITIONNAME
      - DD_LOGGER_BUILD_SOURCESDIRECTORY
      - DD_LOGGER_BUILD_REPOSITORY_URI
      - DD_LOGGER_BUILD_SOURCEVERSION
      - DD_LOGGER_BUILD_SOURCEBRANCH
      - DD_LOGGER_BUILD_SOURCEBRANCHNAME
      - DD_LOGGER_BUILD_SOURCEVERSIONMESSAGE
      - DD_LOGGER_BUILD_REQUESTEDFORID
      - DD_LOGGER_BUILD_REQUESTEDFOREMAIL
      - DD_LOGGER_SYSTEM_TEAMFOUNDATIONSERVERURI
      - DD_LOGGER_SYSTEM_TEAMPROJECTID
      - DD_LOGGER_SYSTEM_STAGEDISPLAYNAME
      - DD_LOGGER_SYSTEM_JOBDISPLAYNAME
      - DD_LOGGER_SYSTEM_JOBID
      - DD_LOGGER_SYSTEM_TASKINSTANCEID=${SYSTEM_TASKINSTANCEID:-}
      - DD_LOGGER_SYSTEM_PULLREQUEST_SOURCEREPOSITORYURI
      - DD_LOGGER_SYSTEM_PULLREQUEST_SOURCECOMMITID
      - DD_LOGGER_SYSTEM_PULLREQUEST_SOURCEBRANCH
      - DD_LOGGER_DD_TAGS
    hostname: integrationtests

  ExplorationTests:
    build:
      context: ./tracer/build/_build/
      dockerfile: docker/${baseImage:-debian}.dockerfile
      args:
        - DOTNETSDK_VERSION=${dotnetCoreSdkLatestVersion:-8.0.100}
    image: dd-trace-dotnet/${baseImage:-debian}-tester:${dotnetCoreSdkLatestVersion:-8.0.100}
    command: dotnet /build/bin/Debug/_build.dll RunExplorationTests --explorationTestUseCase ${explorationTestUseCase:-debugger} --explorationTestName ${explorationTestName:-eshoponweb} --framework ${framework:-netcoreapp3.1} --code-coverage ${runCodeCoverage:-true}
    volumes:
      - ./:/project
    cap_add:
      - SYS_PTRACE
    environment:
      - NugetPackageDirectory=/project/${relativeNugetPackageDirectory:-packages}
      - artifacts=/project/${relativeArtifacts:-tracer/src/bin/artifacts}
      - framework=${framework:-netcoreapp3.1}
      - runCodeCoverage=${runCodeCoverage:-true}
      - explorationTestUseCase=${explorationTestUseCase:-debugger}
      - explorationTestName=${explorationTestName:-eshoponweb}
      - baseImage=${baseImage:-default}
      - IncludeAllTestFrameworks
      - DD_CLR_ENABLE_NGEN=${DD_CLR_ENABLE_NGEN:-1}
      - DD_LOGGER_DD_API_KEY
      - DD_LOGGER_DD_SERVICE
      - DD_LOGGER_DD_ENV
      - DD_LOGGER_ENABLED
      - DD_LOGGER_TF_BUILD=${TF_BUILD:-}
      - DD_LOGGER_BUILD_BUILDID
      - DD_LOGGER_BUILD_DEFINITIONNAME
      - DD_LOGGER_BUILD_SOURCESDIRECTORY
      - DD_LOGGER_BUILD_REPOSITORY_URI
      - DD_LOGGER_BUILD_SOURCEVERSION
      - DD_LOGGER_BUILD_SOURCEBRANCH
      - DD_LOGGER_BUILD_SOURCEBRANCHNAME
      - DD_LOGGER_BUILD_SOURCEVERSIONMESSAGE
      - DD_LOGGER_BUILD_REQUESTEDFORID
      - DD_LOGGER_BUILD_REQUESTEDFOREMAIL
      - DD_LOGGER_SYSTEM_TEAMFOUNDATIONSERVERURI
      - DD_LOGGER_SYSTEM_TEAMPROJECTID
      - DD_LOGGER_SYSTEM_STAGEDISPLAYNAME
      - DD_LOGGER_SYSTEM_JOBDISPLAYNAME
      - DD_LOGGER_SYSTEM_JOBID
      - DD_LOGGER_SYSTEM_TASKINSTANCEID=${SYSTEM_TASKINSTANCEID:-}
      - DD_LOGGER_SYSTEM_PULLREQUEST_SOURCEREPOSITORYURI
      - DD_LOGGER_SYSTEM_PULLREQUEST_SOURCECOMMITID
      - DD_LOGGER_SYSTEM_PULLREQUEST_SOURCEBRANCH
      - DD_LOGGER_DD_TAGS

  StartDependencies:
    image: andrewlock/wait-for-dependencies
    depends_on:
      - aerospike
      - servicestackredis
      - stackexchangeredis
      - stackexchangeredis-replica
      - stackexchangeredis-single
      - elasticsearch7
      - elasticsearch6
      - elasticsearch5
      - sqlserver
      - mongo
      - postgres
      - mysql
      - mysql57
      - rabbitmq
      - kafka-broker
      - kafka-zookeeper
      - localstack
      - couchbase
    environment:
      - TIMEOUT_LENGTH=120
    command: aerospike:3000 servicestackredis:6379 stackexchangeredis:6379 stackexchangeredis-replica:6379 stackexchangeredis-single:6379 elasticsearch5:9200 elasticsearch6:9200 elasticsearch7:9200 sqlserver:1433 mongo:27017 postgres:5432 mysql:3306 mysql57:3306 rabbitmq:5672 kafka-broker:9092 kafka-zookeeper:2181 localstack:4566 couchbase:11210

  IntegrationTests.ARM64:
    build:
      context: ./tracer/build/_build/
      dockerfile: docker/${baseImage:-debian}.dockerfile
      args:
        - DOTNETSDK_VERSION=${dotnetCoreSdkLatestVersion:-8.0.100}
    image: dd-trace-dotnet/${baseImage:-debian}-tester:${dotnetCoreSdkLatestVersion:-8.0.100}
    command: dotnet /build/bin/Debug/_build.dll RunLinuxIntegrationTests --filter ${Filter:- } --SampleName ${SampleName:- }  --framework ${framework:-netcoreapp3.1}
    volumes:
      - ./:/project
    cap_add:
      - SYS_PTRACE
    environment:
      - NugetPackageDirectory=/project/${relativeNugetPackageDirectory:-packages}
      - artifacts=/project/${relativeArtifacts:-tracer/src/bin/artifacts}
      - framework=${framework:-netcoreapp3.1}
      - Filter=${Filter:- } #optional
      - SampleName=${SampleName:- } #optional
      - baseImage=${baseImage:-debian}
      - TestAllPackageVersions=${TestAllPackageVersions:-true}
      - IncludeMinorPackageVersions=${IncludeMinorPackageVersions:-false}
      - enable_crash_dumps=${enable_crash_dumps:-true}
      - Verify_DisableClipboard=true
      - DiffEngine_Disabled=true
      - DD_CLR_ENABLE_NGEN=${DD_CLR_ENABLE_NGEN:-1}
      - IncludeAllTestFrameworks
      - MONGO_HOST=mongo_arm64
      - SERVICESTACK_REDIS_HOST=servicestackredis_arm64:6379
      - STACKEXCHANGE_REDIS_HOST=stackexchangeredis_arm64:6379,stackexchangeredis_arm64-replica:6379
      - STACKEXCHANGE_REDIS_SINGLE_HOST=stackexchangeredis_arm64-single:6379
      - ELASTICSEARCH7_HOST=elasticsearch7_arm64:9200
      - ELASTICSEARCH6_HOST=elasticsearch7_arm64:9200
      - ELASTICSEARCH5_HOST=elasticsearch7_arm64:9200
      - SQLSERVER_CONNECTION_STRING=Server=sqledge_arm64;User=sa;Password=Strong!Passw0rd
      - POSTGRES_HOST=postgres_arm64
      - MYSQL_HOST=mysql_arm64
      - MYSQL_PORT=3306
      - RABBITMQ_HOST=rabbitmq_arm64
      - AWS_SDK_HOST=localstack_arm64:4566
      - DD_LOGGER_DD_API_KEY
      - DD_LOGGER_DD_SERVICE
      - DD_LOGGER_DD_ENV
      - DD_LOGGER_ENABLED
      - DD_LOGGER_TF_BUILD=${TF_BUILD:-}
      - DD_LOGGER_BUILD_BUILDID
      - DD_LOGGER_BUILD_DEFINITIONNAME
      - DD_LOGGER_BUILD_SOURCESDIRECTORY
      - DD_LOGGER_BUILD_REPOSITORY_URI
      - DD_LOGGER_BUILD_SOURCEVERSION
      - DD_LOGGER_BUILD_SOURCEBRANCH
      - DD_LOGGER_BUILD_SOURCEBRANCHNAME
      - DD_LOGGER_BUILD_SOURCEVERSIONMESSAGE
      - DD_LOGGER_BUILD_REQUESTEDFORID
      - DD_LOGGER_BUILD_REQUESTEDFOREMAIL
      - DD_LOGGER_SYSTEM_TEAMFOUNDATIONSERVERURI
      - DD_LOGGER_SYSTEM_TEAMPROJECTID
      - DD_LOGGER_SYSTEM_STAGEDISPLAYNAME
      - DD_LOGGER_SYSTEM_JOBDISPLAYNAME
      - DD_LOGGER_SYSTEM_JOBID
      - DD_LOGGER_SYSTEM_TASKINSTANCEID=${SYSTEM_TASKINSTANCEID:-}
      - DD_LOGGER_SYSTEM_PULLREQUEST_SOURCEREPOSITORYURI
      - DD_LOGGER_SYSTEM_PULLREQUEST_SOURCECOMMITID
      - DD_LOGGER_SYSTEM_PULLREQUEST_SOURCEBRANCH
      - DD_LOGGER_DD_TAGS
    depends_on:
      - servicestackredis_arm64
      - stackexchangeredis_arm64
      - stackexchangeredis_arm64-replica
      - stackexchangeredis_arm64-single
      - elasticsearch7_arm64
      - sqledge_arm64
      - mongo_arm64
      - postgres_arm64
      - mysql_arm64
      - rabbitmq_arm64
      - localstack_arm64

  StartDependencies.ARM64:
    image: andrewlock/wait-for-dependencies
    depends_on:
      - servicestackredis_arm64
      - stackexchangeredis_arm64
      - stackexchangeredis_arm64-replica
      - stackexchangeredis_arm64-single
      - elasticsearch7_arm64
      - sqledge_arm64
      - mongo_arm64
      - postgres_arm64
      - mysql_arm64
      - rabbitmq_arm64
      - localstack_arm64
    environment:
      - TIMEOUT_LENGTH=120
    command: servicestackredis_arm64:6379 stackexchangeredis_arm64:6379 stackexchangeredis_arm64-replica:6379 stackexchangeredis_arm64-single:6379 elasticsearch7_arm64:9200 sqledge_arm64:1433 mongo_arm64:27017 postgres_arm64:5432 mysql_arm64:3306 rabbitmq_arm64:5672 localstack_arm64:4566

  IntegrationTests.ARM64.Debugger:
    build:
      context: ./tracer/build/_build/
      dockerfile: docker/${baseImage:-debian}.dockerfile
      args:
        - DOTNETSDK_VERSION=${dotnetCoreSdkLatestVersion:-8.0.100}
    image: dd-trace-dotnet/${baseImage:-debian}-tester:${dotnetCoreSdkLatestVersion:-8.0.100}
    command: dotnet /build/bin/Debug/_build.dll RunDebuggerIntegrationTests --framework ${framework:-netcoreapp3.1} --targetplatform x64
    volumes:
      - ./:/project
    cap_add:
      - SYS_PTRACE
    environment:
      - NugetPackageDirectory=/project/${relativeNugetPackageDirectory:-packages}
      - artifacts=/project/${relativeArtifacts:-tracer/src/bin/artifacts}
      - framework=${framework:-netcoreapp3.1}
      - baseImage=${baseImage:-debian}
      - enable_crash_dumps=${enable_crash_dumps:-true}
      - Verify_DisableClipboard=true
      - DiffEngine_Disabled=true
      - DD_LOGGER_DD_API_KEY
      - DD_LOGGER_DD_SERVICE
      - DD_LOGGER_DD_ENV
      - DD_LOGGER_ENABLED
      - DD_LOGGER_TF_BUILD=${TF_BUILD:-}
      - DD_LOGGER_BUILD_BUILDID
      - DD_LOGGER_BUILD_DEFINITIONNAME
      - DD_LOGGER_BUILD_SOURCESDIRECTORY
      - DD_LOGGER_BUILD_REPOSITORY_URI
      - DD_LOGGER_BUILD_SOURCEVERSION
      - DD_LOGGER_BUILD_SOURCEBRANCH
      - DD_LOGGER_BUILD_SOURCEBRANCHNAME
      - DD_LOGGER_BUILD_SOURCEVERSIONMESSAGE
      - DD_LOGGER_BUILD_REQUESTEDFORID
      - DD_LOGGER_BUILD_REQUESTEDFOREMAIL
      - DD_LOGGER_SYSTEM_TEAMFOUNDATIONSERVERURI
      - DD_LOGGER_SYSTEM_TEAMPROJECTID
      - DD_LOGGER_SYSTEM_STAGEDISPLAYNAME
      - DD_LOGGER_SYSTEM_JOBDISPLAYNAME
      - DD_LOGGER_SYSTEM_JOBID
      - DD_LOGGER_SYSTEM_TASKINSTANCEID=${SYSTEM_TASKINSTANCEID:-}
      - DD_LOGGER_SYSTEM_PULLREQUEST_SOURCEREPOSITORYURI
      - DD_LOGGER_SYSTEM_PULLREQUEST_SOURCECOMMITID
      - DD_LOGGER_SYSTEM_PULLREQUEST_SOURCEBRANCH
      - DD_LOGGER_DD_TAGS

  start-test-agent:
    image: andrewlock/wait-for-dependencies
    depends_on:
    - test-agent
    environment:
    - TIMEOUT_LENGTH=120
    command: test-agent:8126

  test-agent:
    image: ghcr.io/datadog/dd-apm-test-agent/ddapm-test-agent:latest
    volumes:
    - ./tracer/build/smoke_test_snapshots:/snapshots
    - ./tracer/build_data/snapshots:/debug_snapshots
    ports:
    - "8126:8126"
    environment:
    - ENABLED_CHECKS=trace_count_header,meta_tracer_version_header,trace_content_length
    - SNAPSHOT_CI=1
    - SNAPSHOT_IGNORED_ATTRS=span_id,trace_id,parent_id,duration,start,metrics.system.pid,meta.runtime-id,metrics.process_id,meta._dd.p.dm,meta._dd.p.tid

  smoke-tests:
    build:
      context: ./tracer/ # have to use this as the context, as Dockercompose requires dockerfile to be inside context dir
      dockerfile: build/_build/docker/smoke.dockerfile
      # args:
        # Note that the following build arguments must be provided
        # - DOTNETSDK_VERSION=
        # - RUNTIME_IMAGE=
        # - PUBLISH_FRAMEWORK=
        # - INSTALL_CMD=
    image: dd-trace-dotnet/${dockerTag:-not-set}-tester
    volumes:
    - ./:/project
    - ./tracer/build_data/logs:/var/log/datadog/dotnet
    environment:
    - dockerTag=${dockerTag:-unset}
    - DD_TRACE_AGENT_URL=http://test-agent:8126
    depends_on:
    - test-agent

  nuget-smoke-tests:
    build:
      context: ./tracer/ # have to use this as the context, as Dockercompose requires dockerfile to be inside context dir
      dockerfile: build/_build/docker/smoke.nuget.dockerfile
      # args:
        # Note that the following build arguments must be provided
        # - DOTNETSDK_VERSION=
        # - RUNTIME_IMAGE=
        # - PUBLISH_FRAMEWORK=
        # - RELATIVE_PROFILER_PATH=
        # - RELATIVE_API_WRAPPER_PATH=
    image: dd-trace-dotnet/${dockerTag:-not-set}-nuget-tester
    volumes:
    - ./:/project
    - ./tracer/build_data/logs:/var/log/datadog/dotnet
    environment:
    - dockerTag=${dockerTag:-unset}
    - DD_TRACE_AGENT_URL=http://test-agent:8126
    depends_on:
    - test-agent

  nuget-dddotnet-smoke-tests:
    build:
      context: ./tracer/ # have to use this as the context, as Dockercompose requires dockerfile to be inside context dir
      dockerfile: build/_build/docker/smoke.nuget.dd-dotnet.dockerfile
      # args:
        # Note that the following build arguments must be provided
        # - DOTNETSDK_VERSION=
        # - RUNTIME_IMAGE=
        # - PUBLISH_FRAMEWORK=
        # - RELATIVE_PROFILER_PATH=
        # - RELATIVE_API_WRAPPER_PATH=
    image: dd-trace-dotnet/${dockerTag:-not-set}-nuget-tester
    volumes:
    - ./:/project
    - ./tracer/build_data/logs:/var/log/datadog/dotnet
    environment:
    - dockerTag=${dockerTag:-unset}
    - DD_TRACE_AGENT_URL=http://test-agent:8126
    depends_on:
    - test-agent

  dotnet-tool-smoke-tests:
    build:
      context: ./tracer/ # have to use this as the context, as Dockercompose requires dockerfile to be inside context dir
      dockerfile: build/_build/docker/smoke.dotnet-tool.dockerfile
        # args:
        # Note that the following build arguments must be provided
        # - DOTNETSDK_VERSION=
        # - RUNTIME_IMAGE=
        # - PUBLISH_FRAMEWORK=
    image: dd-trace-dotnet/${dockerTag:-not-set}-dotnet-tool-tester
    volumes:
    - ./:/project
    - ./tracer/build_data/logs:/var/log/datadog/dotnet
    environment:
    - dockerTag=${dockerTag:-unset}
    - DD_TRACE_AGENT_URL=http://test-agent:8126
    depends_on:
    - test-agent

  dotnet-tool-self-instrument-smoke-tests:
    build:
      context: ./tracer/ # have to use this as the context, as Dockercompose requires dockerfile to be inside context dir
      dockerfile: build/_build/docker/smoke.dotnet-tool.self-instrument.dockerfile
        # args:
        # Note that the following build arguments must be provided
        # - DOTNETSDK_VERSION=
        # - RUNTIME_IMAGE=
        # - PUBLISH_FRAMEWORK=
        # - INSTALL_CMD=
    image: dd-trace-dotnet/${dockerTag:-not-set}-dotnet-tool-self-instrument-tester
    volumes:
    - ./:/project
    - ./tracer/build_data/logs:/var/log/datadog/dotnet
    environment:
    - dockerTag=${dockerTag:-unset}
    - DD_TRACE_AGENT_URL=http://test-agent:8126
    depends_on:
    - test-agent

  dotnet-tool-nuget-smoke-tests:
    build:
      context: ./tracer/ # have to use this as the context, as Dockercompose requires dockerfile to be inside context dir
      dockerfile: build/_build/docker/smoke.dotnet-tool.nuget.dockerfile
        # args:
        # Note that the following build arguments must be provided
        # - DOTNETSDK_VERSION=
        # - RUNTIME_IMAGE=
        # - PUBLISH_FRAMEWORK=
    image: dd-trace-dotnet/${dockerTag:-not-set}-dotnet-tool-nuget-tester
    volumes:
    - ./:/project
    - ./tracer/build_data/logs:/var/log/datadog/dotnet
    environment:
    - dockerTag=${dockerTag:-unset}
    - DD_TRACE_AGENT_URL=http://test-agent:8126
    depends_on:
    - test-agent

  dd-dotnet-smoke-tests:
    build:
      context: ./tracer/ # have to use this as the context, as Dockercompose requires dockerfile to be inside context dir
      dockerfile: build/_build/docker/smoke.dd-dotnet.dockerfile
        # args:
        # Note that the following build arguments must be provided
        # - DOTNETSDK_VERSION=
        # - RUNTIME_IMAGE=
        # - PUBLISH_FRAMEWORK=
        # - INSTALL_CMD=
    image: dd-trace-dotnet/${dockerTag:-not-set}-dd-dotnet-tester
    volumes:
      - ./:/project
      - ./tracer/build_data/logs:/var/log/datadog/dotnet
    environment:
      - dockerTag=${dockerTag:-unset}
      - DD_TRACE_AGENT_URL=http://test-agent:8126
    depends_on:
      - test-agent

  chiseled-smoke-tests:
    build:
      context: ./tracer/ # have to use this as the context, as Dockercompose requires dockerfile to be inside context dir
      dockerfile: build/_build/docker/smoke.chiseled.dockerfile
      target: installer-final
        # args:
        # Note that the following build arguments must be provided
        # - DOTNETSDK_VERSION=
        # - RUNTIME_IMAGE=
        # - PUBLISH_FRAMEWORK=
    image: dd-trace-dotnet/${dockerTag:-not-set}-chiseled-tester
    volumes:
      - ./:/project
      - ./tracer/build_data/logs:/var/log/datadog/dotnet
    environment:
      - dockerTag=${dockerTag:-unset}
      - DD_TRACE_AGENT_URL=http://test-agent:8126
    depends_on:
      - test-agent

  dd-dotnet-chiseled-smoke-tests:
    build:
      context: ./tracer/ # have to use this as the context, as Dockercompose requires dockerfile to be inside context dir
      dockerfile: build/_build/docker/smoke.chiseled.dockerfile
      target: dd-dotnet-final-linux-x64
        # args:
        # Note that the following build arguments must be provided
        # - DOTNETSDK_VERSION=
        # - RUNTIME_IMAGE=
        # - PUBLISH_FRAMEWORK=
        # - RUNTIME_ID=
    image: dd-trace-dotnet/${dockerTag:-not-set}-dd-dotnet-chiseled-tester
    volumes:
      - ./:/project
      - ./tracer/build_data/logs:/var/log/datadog/dotnet
    environment:
      - dockerTag=${dockerTag:-unset}
      - DD_TRACE_AGENT_URL=http://test-agent:8126
    depends_on:
      - test-agent

  dd-dotnet-chiseled-arm64-smoke-tests:
    build:
      context: ./tracer/ # have to use this as the context, as Dockercompose requires dockerfile to be inside context dir
      dockerfile: build/_build/docker/smoke.chiseled.dockerfile
      target: dd-dotnet-final-linux-arm64
        # args:
        # Note that the following build arguments must be provided
        # - DOTNETSDK_VERSION=
        # - RUNTIME_IMAGE=
        # - PUBLISH_FRAMEWORK=
        # - RUNTIME_ID=
    image: dd-trace-dotnet/${dockerTag:-not-set}-dd-dotnet-arm64-chiseled-tester
    volumes:
      - ./:/project
      - ./tracer/build_data/logs:/var/log/datadog/dotnet
    environment:
      - dockerTag=${dockerTag:-unset}
      - DD_TRACE_AGENT_URL=http://test-agent:8126
    depends_on:
      - test-agent

  StartDependencies.OSXARM64:
    image: andrewlock/wait-for-dependencies
    depends_on:
      - servicestackredis_osx_arm64
      - stackexchangeredis_osx_arm64
      - stackexchangeredis_osx_arm64-replica
      - stackexchangeredis_osx_arm64-single
      - elasticsearch7_osx_arm64
      - sqledge_osx_arm64
      - mongo_osx_arm64
      - postgres_osx_arm64
      - mysql_osx_arm64
      - rabbitmq_osx_arm64
      - localstack_osx_arm64
    environment:
      - TIMEOUT_LENGTH=120
    command: servicestackredis_osx_arm64:6379 stackexchangeredis_osx_arm64:6379 stackexchangeredis_osx_arm64-replica:6379 stackexchangeredis_osx_arm64-single:6379 elasticsearch7_osx_arm64:9200 sqledge_osx_arm64:1433 mongo_osx_arm64:27017 postgres_osx_arm64:5432 mysql_osx_arm64:3306 rabbitmq_osx_arm64:5672 localstack_osx_arm64:4566

  # OSX ARM64 dependencies

  localstack_osx_arm64:
    image: localstack/localstack
    environment:
      - SERVICES=sns,sqs,kinesis,dynamodb
      - DEBUG=1
      - DATA_DIR=/tmp/localstack/data
      - DEFAULT_REGION=us-east-1
    ports:
      - "4566:4566"
    volumes:
      - "./.localstack:/tmp/localstack"

  elasticsearch7_osx_arm64:
    image: elasticsearch:7.10.1
    ports:
      - "9200:9200"
      - "9300:9300"
    environment:
      - discovery.type=single-node
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"

  mongo_osx_arm64:
    image: mongo:4.0.9
    ports:
      - "27017:27017"
    command: mongod

  mysql_osx_arm64:
    image: mysql/mysql-server:8.0
    environment:
      - MYSQL_DATABASE=world
      - MYSQL_ROOT_PASSWORD=mysqldb
      - MYSQL_USER=mysqldb
      - MYSQL_PASSWORD=mysqldb
    ports:
      - "3306:3306"

  postgres_osx_arm64:
    image: postgres:10.5-alpine
    environment:
      - POSTGRES_PASSWORD=postgres
      - POSTGRES_USER=postgres
      - POSTGRES_DB=postgres
    ports:
      - "5432:5432"

  rabbitmq_osx_arm64:
    image: rabbitmq:3-management
    command: rabbitmq-server
    ports:
      - "5672:5672"
      - "15672:15672"

  servicestackredis_osx_arm64:
    image: redis:4-alpine
    command: redis-server --bind 0.0.0.0
    ports:
      - "6379:6379"

  stackexchangeredis_osx_arm64:
    image: redis:4-alpine
    hostname: stackexchangeredis_osx_arm64
    command: redis-server --bind 0.0.0.0
    ports:
      - "6392:6379"

  stackexchangeredis_osx_arm64-replica:
    image: redis:4-alpine
    hostname: stackexchangeredis_osx_arm64-replica
    command: redis-server --bind 0.0.0.0 --slaveof stackexchangeredis_osx_arm64 6379
    ports:
      - "6390:6379"

  stackexchangeredis_osx_arm64-single:
    image: redis:4-alpine
    hostname: stackexchangeredis_osx_arm64-single
    command: redis-server --bind 0.0.0.0
    ports:
      - "6391:6379"

  sqledge_osx_arm64:
    image: mcr.microsoft.com/azure-sql-edge:latest
    ports:
      - "1433:1433"
    environment:
      - ACCEPT_EULA=Y
      - SA_PASSWORD=Strong!Passw0rd