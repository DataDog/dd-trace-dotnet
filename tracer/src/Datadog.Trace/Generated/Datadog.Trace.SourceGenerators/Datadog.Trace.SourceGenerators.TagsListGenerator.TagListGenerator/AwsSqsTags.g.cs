// <auto-generated/>
#nullable enable

namespace Datadog.Trace.Tagging
{
    partial class AwsSqsTags
    {
        private static readonly byte[] _bytesQueueName = Datadog.Trace.Vendors.MessagePack.StringEncoding.UTF8.GetBytes("aws.queue.name");
        private static readonly byte[] _bytesQueueUrl = Datadog.Trace.Vendors.MessagePack.StringEncoding.UTF8.GetBytes("aws.queue.url");
        private static readonly byte[] _bytesSpanKind = Datadog.Trace.Vendors.MessagePack.StringEncoding.UTF8.GetBytes("span.kind");

        public override string? GetTag(string key)
        {
            return key switch
            {
                "aws.queue.name" => QueueName,
                "aws.queue.url" => QueueUrl,
                "span.kind" => SpanKind,
                _ => base.GetTag(key),
            };
        }

        public override void SetTag(string key, string value)
        {
            switch(key)
            {
                case "aws.queue.name": 
                    QueueName = value;
                    break;
                case "aws.queue.url": 
                    QueueUrl = value;
                    break;
                default: 
                    base.SetTag(key, value);
                    break;
            }
        }

        protected override int WriteAdditionalTags(ref byte[] bytes, ref int offset)
        {
            var count = 0;
            if (QueueName != null)
            {
                count++;
                WriteTag(ref bytes, ref offset, _bytesQueueName, QueueName);
            }

            if (QueueUrl != null)
            {
                count++;
                WriteTag(ref bytes, ref offset, _bytesQueueUrl, QueueUrl);
            }

            if (SpanKind != null)
            {
                count++;
                WriteTag(ref bytes, ref offset, _bytesSpanKind, SpanKind);
            }

            return count + base.WriteAdditionalTags(ref bytes, ref offset);
        }

        protected override void WriteAdditionalTags(System.Text.StringBuilder sb)
        {
            if (QueueName != null)
            {
                sb.Append("aws.queue.name (tag):")
                  .Append(QueueName)
                  .Append(',');
            }

            if (QueueUrl != null)
            {
                sb.Append("aws.queue.url (tag):")
                  .Append(QueueUrl)
                  .Append(',');
            }

            if (SpanKind != null)
            {
                sb.Append("span.kind (tag):")
                  .Append(SpanKind)
                  .Append(',');
            }

            base.WriteAdditionalTags(sb);
        }
    }
}
