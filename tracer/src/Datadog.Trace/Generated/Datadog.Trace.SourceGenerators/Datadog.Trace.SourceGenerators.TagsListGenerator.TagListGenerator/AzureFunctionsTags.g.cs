// <auto-generated/>
#nullable enable

namespace Datadog.Trace.Tagging
{
    partial class AzureFunctionsTags
    {
        private static readonly byte[] _bytesSpanKind = Datadog.Trace.Vendors.MessagePack.StringEncoding.UTF8.GetBytes("span.kind");
        private static readonly byte[] _bytesInstrumentationName = Datadog.Trace.Vendors.MessagePack.StringEncoding.UTF8.GetBytes("component");
        private static readonly byte[] _bytesLanguage = Datadog.Trace.Vendors.MessagePack.StringEncoding.UTF8.GetBytes("language");
        private static readonly byte[] _bytesShortName = Datadog.Trace.Vendors.MessagePack.StringEncoding.UTF8.GetBytes("aas.function.name");
        private static readonly byte[] _bytesFullName = Datadog.Trace.Vendors.MessagePack.StringEncoding.UTF8.GetBytes("aas.function.method");
        private static readonly byte[] _bytesBindingSource = Datadog.Trace.Vendors.MessagePack.StringEncoding.UTF8.GetBytes("aas.function.binding");
        private static readonly byte[] _bytesTriggerType = Datadog.Trace.Vendors.MessagePack.StringEncoding.UTF8.GetBytes("aas.function.trigger");

        public override string? GetTag(string key)
        {
            return key switch
            {
                "span.kind" => SpanKind,
                "component" => InstrumentationName,
                "language" => Language,
                "aas.function.name" => ShortName,
                "aas.function.method" => FullName,
                "aas.function.binding" => BindingSource,
                "aas.function.trigger" => TriggerType,
                _ => base.GetTag(key),
            };
        }

        public override void SetTag(string key, string value)
        {
            switch(key)
            {
                case "aas.function.name": 
                    ShortName = value;
                    break;
                case "aas.function.method": 
                    FullName = value;
                    break;
                case "aas.function.binding": 
                    BindingSource = value;
                    break;
                case "aas.function.trigger": 
                    TriggerType = value;
                    break;
                default: 
                    base.SetTag(key, value);
                    break;
            }
        }

        protected override int WriteAdditionalTags(ref byte[] bytes, ref int offset)
        {
            var count = 0;
            if (SpanKind != null)
            {
                count++;
                WriteTag(ref bytes, ref offset, _bytesSpanKind, SpanKind);
            }

            if (InstrumentationName != null)
            {
                count++;
                WriteTag(ref bytes, ref offset, _bytesInstrumentationName, InstrumentationName);
            }

            if (Language != null)
            {
                count++;
                WriteTag(ref bytes, ref offset, _bytesLanguage, Language);
            }

            if (ShortName != null)
            {
                count++;
                WriteTag(ref bytes, ref offset, _bytesShortName, ShortName);
            }

            if (FullName != null)
            {
                count++;
                WriteTag(ref bytes, ref offset, _bytesFullName, FullName);
            }

            if (BindingSource != null)
            {
                count++;
                WriteTag(ref bytes, ref offset, _bytesBindingSource, BindingSource);
            }

            if (TriggerType != null)
            {
                count++;
                WriteTag(ref bytes, ref offset, _bytesTriggerType, TriggerType);
            }

            return count + base.WriteAdditionalTags(ref bytes, ref offset);
        }

        protected override void WriteAdditionalTags(System.Text.StringBuilder sb)
        {
            if (SpanKind != null)
            {
                sb.Append("span.kind (tag):")
                  .Append(SpanKind)
                  .Append(',');
            }

            if (InstrumentationName != null)
            {
                sb.Append("component (tag):")
                  .Append(InstrumentationName)
                  .Append(',');
            }

            if (Language != null)
            {
                sb.Append("language (tag):")
                  .Append(Language)
                  .Append(',');
            }

            if (ShortName != null)
            {
                sb.Append("aas.function.name (tag):")
                  .Append(ShortName)
                  .Append(',');
            }

            if (FullName != null)
            {
                sb.Append("aas.function.method (tag):")
                  .Append(FullName)
                  .Append(',');
            }

            if (BindingSource != null)
            {
                sb.Append("aas.function.binding (tag):")
                  .Append(BindingSource)
                  .Append(',');
            }

            if (TriggerType != null)
            {
                sb.Append("aas.function.trigger (tag):")
                  .Append(TriggerType)
                  .Append(',');
            }

            base.WriteAdditionalTags(sb);
        }
    }
}
