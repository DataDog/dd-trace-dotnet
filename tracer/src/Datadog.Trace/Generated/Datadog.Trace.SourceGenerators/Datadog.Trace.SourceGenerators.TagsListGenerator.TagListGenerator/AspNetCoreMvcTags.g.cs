// <auto-generated/>
#nullable enable

namespace Datadog.Trace.Tagging
{
    partial class AspNetCoreMvcTags
    {
        public override string? GetTag(string key)
        {
            return key switch
            {
                "aspnet_core.controller" => AspNetCoreController,
                "aspnet_core.action" => AspNetCoreAction,
                "aspnet_core.area" => AspNetCoreArea,
                "aspnet_core.page" => AspNetCorePage,
                _ => base.GetTag(key),
            };
        }

        public override void SetTag(string key, string value)
        {
            switch(key)
            {
                case "aspnet_core.controller": 
                    AspNetCoreController = value;
                    break;
                case "aspnet_core.action": 
                    AspNetCoreAction = value;
                    break;
                case "aspnet_core.area": 
                    AspNetCoreArea = value;
                    break;
                case "aspnet_core.page": 
                    AspNetCorePage = value;
                    break;
                default: 
                    base.SetTag(key, value);
                    break;
            }
        }

        protected override int WriteAdditionalTags(ref byte[] bytes, ref int offset)
        {
            var count = 0;
            if (AspNetCoreController != null)
            {
                count++;
                WriteTag(ref bytes, ref offset, "aspnet_core.controller", AspNetCoreController);
            }

            if (AspNetCoreAction != null)
            {
                count++;
                WriteTag(ref bytes, ref offset, "aspnet_core.action", AspNetCoreAction);
            }

            if (AspNetCoreArea != null)
            {
                count++;
                WriteTag(ref bytes, ref offset, "aspnet_core.area", AspNetCoreArea);
            }

            if (AspNetCorePage != null)
            {
                count++;
                WriteTag(ref bytes, ref offset, "aspnet_core.page", AspNetCorePage);
            }

            return count + base.WriteAdditionalTags(ref bytes, ref offset);
        }

        protected override void WriteAdditionalTags(System.Text.StringBuilder sb)
        {
            if (AspNetCoreController != null)
            {
                sb.Append("aspnet_core.controller (tag):")
                  .Append(AspNetCoreController)
                  .Append(',');
            }

            if (AspNetCoreAction != null)
            {
                sb.Append("aspnet_core.action (tag):")
                  .Append(AspNetCoreAction)
                  .Append(',');
            }

            if (AspNetCoreArea != null)
            {
                sb.Append("aspnet_core.area (tag):")
                  .Append(AspNetCoreArea)
                  .Append(',');
            }

            if (AspNetCorePage != null)
            {
                sb.Append("aspnet_core.page (tag):")
                  .Append(AspNetCorePage)
                  .Append(',');
            }

            base.WriteAdditionalTags(sb);
        }
    }
}
