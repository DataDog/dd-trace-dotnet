// <auto-generated/>
#nullable enable

namespace Datadog.Trace.ClrProfiler.AutoInstrumentation.GraphQL
{
    partial class GraphQLTags
    {
        public override string? GetTag(string key)
        {
            return key switch
            {
                "span.kind" => SpanKind,
                "component" => InstrumentationName,
                "language" => Language,
                "graphql.source" => Source,
                "graphql.operation.name" => OperationName,
                "graphql.operation.type" => OperationType,
                _ => base.GetTag(key),
            };
        }

        public override void SetTag(string key, string value)
        {
            switch(key)
            {
                case "graphql.source": 
                    Source = value;
                    break;
                case "graphql.operation.name": 
                    OperationName = value;
                    break;
                case "graphql.operation.type": 
                    OperationType = value;
                    break;
                default: 
                    base.SetTag(key, value);
                    break;
            }
        }

        protected override int WriteAdditionalTags(ref byte[] bytes, ref int offset)
        {
            var count = 0;
            if (SpanKind != null)
            {
                count++;
                WriteTag(ref bytes, ref offset, "span.kind", SpanKind);
            }

            if (InstrumentationName != null)
            {
                count++;
                WriteTag(ref bytes, ref offset, "component", InstrumentationName);
            }

            if (Language != null)
            {
                count++;
                WriteTag(ref bytes, ref offset, "language", Language);
            }

            if (Source != null)
            {
                count++;
                WriteTag(ref bytes, ref offset, "graphql.source", Source);
            }

            if (OperationName != null)
            {
                count++;
                WriteTag(ref bytes, ref offset, "graphql.operation.name", OperationName);
            }

            if (OperationType != null)
            {
                count++;
                WriteTag(ref bytes, ref offset, "graphql.operation.type", OperationType);
            }

            return count + base.WriteAdditionalTags(ref bytes, ref offset);
        }

        protected override void WriteAdditionalTags(System.Text.StringBuilder sb)
        {
            if (SpanKind != null)
            {
                sb.Append("span.kind (tag):")
                  .Append(SpanKind)
                  .Append(',');
            }

            if (InstrumentationName != null)
            {
                sb.Append("component (tag):")
                  .Append(InstrumentationName)
                  .Append(',');
            }

            if (Language != null)
            {
                sb.Append("language (tag):")
                  .Append(Language)
                  .Append(',');
            }

            if (Source != null)
            {
                sb.Append("graphql.source (tag):")
                  .Append(Source)
                  .Append(',');
            }

            if (OperationName != null)
            {
                sb.Append("graphql.operation.name (tag):")
                  .Append(OperationName)
                  .Append(',');
            }

            if (OperationType != null)
            {
                sb.Append("graphql.operation.type (tag):")
                  .Append(OperationType)
                  .Append(',');
            }

            base.WriteAdditionalTags(sb);
        }
    }
}
