// <auto-generated/>
#nullable enable

namespace Datadog.Trace.Tagging
{
    partial class AwsSdkTags
    {
        private static readonly byte[] _bytesInstrumentationName = Datadog.Trace.Vendors.MessagePack.StringEncoding.UTF8.GetBytes("component");
        private static readonly byte[] _bytesAgentName = Datadog.Trace.Vendors.MessagePack.StringEncoding.UTF8.GetBytes("aws.agent");
        private static readonly byte[] _bytesOperation = Datadog.Trace.Vendors.MessagePack.StringEncoding.UTF8.GetBytes("aws.operation");
        private static readonly byte[] _bytesRegion = Datadog.Trace.Vendors.MessagePack.StringEncoding.UTF8.GetBytes("aws.region");
        private static readonly byte[] _bytesRequestId = Datadog.Trace.Vendors.MessagePack.StringEncoding.UTF8.GetBytes("aws.requestId");
        private static readonly byte[] _bytesService = Datadog.Trace.Vendors.MessagePack.StringEncoding.UTF8.GetBytes("aws.service");
        private static readonly byte[] _bytesHttpMethod = Datadog.Trace.Vendors.MessagePack.StringEncoding.UTF8.GetBytes("http.method");
        private static readonly byte[] _bytesHttpUrl = Datadog.Trace.Vendors.MessagePack.StringEncoding.UTF8.GetBytes("http.url");
        private static readonly byte[] _bytesHttpStatusCode = Datadog.Trace.Vendors.MessagePack.StringEncoding.UTF8.GetBytes("http.status_code");

        public override string? GetTag(string key)
        {
            return key switch
            {
                "component" => InstrumentationName,
                "aws.agent" => AgentName,
                "aws.operation" => Operation,
                "aws.region" => Region,
                "aws.requestId" => RequestId,
                "aws.service" => Service,
                "http.method" => HttpMethod,
                "http.url" => HttpUrl,
                "http.status_code" => HttpStatusCode,
                _ => base.GetTag(key),
            };
        }

        public override void SetTag(string key, string value)
        {
            switch(key)
            {
                case "aws.operation": 
                    Operation = value;
                    break;
                case "aws.region": 
                    Region = value;
                    break;
                case "aws.requestId": 
                    RequestId = value;
                    break;
                case "aws.service": 
                    Service = value;
                    break;
                case "http.method": 
                    HttpMethod = value;
                    break;
                case "http.url": 
                    HttpUrl = value;
                    break;
                case "http.status_code": 
                    HttpStatusCode = value;
                    break;
                default: 
                    base.SetTag(key, value);
                    break;
            }
        }

        protected override int WriteAdditionalTags(ref byte[] bytes, ref int offset)
        {
            var count = 0;
            if (InstrumentationName != null)
            {
                count++;
                WriteTag(ref bytes, ref offset, _bytesInstrumentationName, InstrumentationName);
            }

            if (AgentName != null)
            {
                count++;
                WriteTag(ref bytes, ref offset, _bytesAgentName, AgentName);
            }

            if (Operation != null)
            {
                count++;
                WriteTag(ref bytes, ref offset, _bytesOperation, Operation);
            }

            if (Region != null)
            {
                count++;
                WriteTag(ref bytes, ref offset, _bytesRegion, Region);
            }

            if (RequestId != null)
            {
                count++;
                WriteTag(ref bytes, ref offset, _bytesRequestId, RequestId);
            }

            if (Service != null)
            {
                count++;
                WriteTag(ref bytes, ref offset, _bytesService, Service);
            }

            if (HttpMethod != null)
            {
                count++;
                WriteTag(ref bytes, ref offset, _bytesHttpMethod, HttpMethod);
            }

            if (HttpUrl != null)
            {
                count++;
                WriteTag(ref bytes, ref offset, _bytesHttpUrl, HttpUrl);
            }

            if (HttpStatusCode != null)
            {
                count++;
                WriteTag(ref bytes, ref offset, _bytesHttpStatusCode, HttpStatusCode);
            }

            return count + base.WriteAdditionalTags(ref bytes, ref offset);
        }

        protected override void WriteAdditionalTags(System.Text.StringBuilder sb)
        {
            if (InstrumentationName != null)
            {
                sb.Append("component (tag):")
                  .Append(InstrumentationName)
                  .Append(',');
            }

            if (AgentName != null)
            {
                sb.Append("aws.agent (tag):")
                  .Append(AgentName)
                  .Append(',');
            }

            if (Operation != null)
            {
                sb.Append("aws.operation (tag):")
                  .Append(Operation)
                  .Append(',');
            }

            if (Region != null)
            {
                sb.Append("aws.region (tag):")
                  .Append(Region)
                  .Append(',');
            }

            if (RequestId != null)
            {
                sb.Append("aws.requestId (tag):")
                  .Append(RequestId)
                  .Append(',');
            }

            if (Service != null)
            {
                sb.Append("aws.service (tag):")
                  .Append(Service)
                  .Append(',');
            }

            if (HttpMethod != null)
            {
                sb.Append("http.method (tag):")
                  .Append(HttpMethod)
                  .Append(',');
            }

            if (HttpUrl != null)
            {
                sb.Append("http.url (tag):")
                  .Append(HttpUrl)
                  .Append(',');
            }

            if (HttpStatusCode != null)
            {
                sb.Append("http.status_code (tag):")
                  .Append(HttpStatusCode)
                  .Append(',');
            }

            base.WriteAdditionalTags(sb);
        }
    }
}
