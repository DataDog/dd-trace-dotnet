// <auto-generated/>
#nullable enable

namespace Datadog.Trace.Tagging
{
    partial class WebTags
    {
        public override string? GetTag(string key)
        {
            return key switch
            {
                "span.kind" => SpanKind,
                "http.method" => HttpMethod,
                "http.request.headers.host" => HttpRequestHeadersHost,
                "http.url" => HttpUrl,
                "language" => Language,
                "http.status_code" => HttpStatusCode,
                _ => base.GetTag(key),
            };
        }

        public override void SetTag(string key, string value)
        {
            switch(key)
            {
                case "http.method": 
                    HttpMethod = value;
                    break;
                case "http.request.headers.host": 
                    HttpRequestHeadersHost = value;
                    break;
                case "http.url": 
                    HttpUrl = value;
                    break;
                case "http.status_code": 
                    HttpStatusCode = value;
                    break;
                default: 
                    base.SetTag(key, value);
                    break;
            }
        }

        protected override int WriteAdditionalTags(ref byte[] bytes, ref int offset)
        {
            var count = 0;
            if (SpanKind != null)
            {
                count++;
                WriteTag(ref bytes, ref offset, "span.kind", SpanKind);
            }

            if (HttpMethod != null)
            {
                count++;
                WriteTag(ref bytes, ref offset, "http.method", HttpMethod);
            }

            if (HttpRequestHeadersHost != null)
            {
                count++;
                WriteTag(ref bytes, ref offset, "http.request.headers.host", HttpRequestHeadersHost);
            }

            if (HttpUrl != null)
            {
                count++;
                WriteTag(ref bytes, ref offset, "http.url", HttpUrl);
            }

            if (Language != null)
            {
                count++;
                WriteTag(ref bytes, ref offset, "language", Language);
            }

            if (HttpStatusCode != null)
            {
                count++;
                WriteTag(ref bytes, ref offset, "http.status_code", HttpStatusCode);
            }

            return count + base.WriteAdditionalTags(ref bytes, ref offset);
        }

        protected override void WriteAdditionalTags(System.Text.StringBuilder sb)
        {
            if (SpanKind != null)
            {
                sb.Append("span.kind (tag):")
                  .Append(SpanKind)
                  .Append(',');
            }

            if (HttpMethod != null)
            {
                sb.Append("http.method (tag):")
                  .Append(HttpMethod)
                  .Append(',');
            }

            if (HttpRequestHeadersHost != null)
            {
                sb.Append("http.request.headers.host (tag):")
                  .Append(HttpRequestHeadersHost)
                  .Append(',');
            }

            if (HttpUrl != null)
            {
                sb.Append("http.url (tag):")
                  .Append(HttpUrl)
                  .Append(',');
            }

            if (Language != null)
            {
                sb.Append("language (tag):")
                  .Append(Language)
                  .Append(',');
            }

            if (HttpStatusCode != null)
            {
                sb.Append("http.status_code (tag):")
                  .Append(HttpStatusCode)
                  .Append(',');
            }

            base.WriteAdditionalTags(sb);
        }
    }
}
