// <auto-generated/>
#nullable enable

namespace Datadog.Trace.Tagging
{
    partial class AerospikeTags
    {
        public override string? GetTag(string key)
        {
            return key switch
            {
                "span.kind" => SpanKind,
                "component" => InstrumentationName,
                "aerospike.key" => Key,
                "aerospike.namespace" => Namespace,
                "aerospike.setname" => SetName,
                "aerospike.userkey" => UserKey,
                _ => base.GetTag(key),
            };
        }

        public override void SetTag(string key, string value)
        {
            switch(key)
            {
                case "aerospike.key": 
                    Key = value;
                    break;
                case "aerospike.namespace": 
                    Namespace = value;
                    break;
                case "aerospike.setname": 
                    SetName = value;
                    break;
                case "aerospike.userkey": 
                    UserKey = value;
                    break;
                default: 
                    base.SetTag(key, value);
                    break;
            }
        }

        protected override int WriteAdditionalTags(ref byte[] bytes, ref int offset)
        {
            var count = 0;
            if (SpanKind != null)
            {
                count++;
                WriteTag(ref bytes, ref offset, "span.kind", SpanKind);
            }

            if (InstrumentationName != null)
            {
                count++;
                WriteTag(ref bytes, ref offset, "component", InstrumentationName);
            }

            if (Key != null)
            {
                count++;
                WriteTag(ref bytes, ref offset, "aerospike.key", Key);
            }

            if (Namespace != null)
            {
                count++;
                WriteTag(ref bytes, ref offset, "aerospike.namespace", Namespace);
            }

            if (SetName != null)
            {
                count++;
                WriteTag(ref bytes, ref offset, "aerospike.setname", SetName);
            }

            if (UserKey != null)
            {
                count++;
                WriteTag(ref bytes, ref offset, "aerospike.userkey", UserKey);
            }

            return count + base.WriteAdditionalTags(ref bytes, ref offset);
        }

        protected override void WriteAdditionalTags(System.Text.StringBuilder sb)
        {
            if (SpanKind != null)
            {
                sb.Append("span.kind (tag):")
                  .Append(SpanKind)
                  .Append(',');
            }

            if (InstrumentationName != null)
            {
                sb.Append("component (tag):")
                  .Append(InstrumentationName)
                  .Append(',');
            }

            if (Key != null)
            {
                sb.Append("aerospike.key (tag):")
                  .Append(Key)
                  .Append(',');
            }

            if (Namespace != null)
            {
                sb.Append("aerospike.namespace (tag):")
                  .Append(Namespace)
                  .Append(',');
            }

            if (SetName != null)
            {
                sb.Append("aerospike.setname (tag):")
                  .Append(SetName)
                  .Append(',');
            }

            if (UserKey != null)
            {
                sb.Append("aerospike.userkey (tag):")
                  .Append(UserKey)
                  .Append(',');
            }

            base.WriteAdditionalTags(sb);
        }
    }
}
