// <auto-generated/>
#nullable enable

namespace Datadog.Trace.ServiceFabric
{
    partial class ServiceRemotingTags
    {
        public override string? GetTag(string key)
        {
            return key switch
            {
                "span.kind" => SpanKind,
                "service-fabric.application-id" => ApplicationId,
                "service-fabric.application-name" => ApplicationName,
                "service-fabric.partition-id" => PartitionId,
                "service-fabric.node-id" => NodeId,
                "service-fabric.node-name" => NodeName,
                "service-fabric.service-name" => ServiceName,
                "service-fabric.service-remoting.uri" => RemotingUri,
                "service-fabric.service-remoting.method-name" => RemotingMethodName,
                "service-fabric.service-remoting.method-id" => RemotingMethodId,
                "service-fabric.service-remoting.interface-id" => RemotingInterfaceId,
                "service-fabric.service-remoting.invocation-id" => RemotingInvocationId,
                _ => base.GetTag(key),
            };
        }

        public override void SetTag(string key, string value)
        {
            switch(key)
            {
                case "service-fabric.application-id": 
                    ApplicationId = value;
                    break;
                case "service-fabric.application-name": 
                    ApplicationName = value;
                    break;
                case "service-fabric.partition-id": 
                    PartitionId = value;
                    break;
                case "service-fabric.node-id": 
                    NodeId = value;
                    break;
                case "service-fabric.node-name": 
                    NodeName = value;
                    break;
                case "service-fabric.service-name": 
                    ServiceName = value;
                    break;
                case "service-fabric.service-remoting.uri": 
                    RemotingUri = value;
                    break;
                case "service-fabric.service-remoting.method-name": 
                    RemotingMethodName = value;
                    break;
                case "service-fabric.service-remoting.method-id": 
                    RemotingMethodId = value;
                    break;
                case "service-fabric.service-remoting.interface-id": 
                    RemotingInterfaceId = value;
                    break;
                case "service-fabric.service-remoting.invocation-id": 
                    RemotingInvocationId = value;
                    break;
                default: 
                    base.SetTag(key, value);
                    break;
            }
        }

        protected override int WriteAdditionalTags(ref byte[] bytes, ref int offset)
        {
            var count = 0;
            if (SpanKind != null)
            {
                count++;
                WriteTag(ref bytes, ref offset, "span.kind", SpanKind);
            }

            if (ApplicationId != null)
            {
                count++;
                WriteTag(ref bytes, ref offset, "service-fabric.application-id", ApplicationId);
            }

            if (ApplicationName != null)
            {
                count++;
                WriteTag(ref bytes, ref offset, "service-fabric.application-name", ApplicationName);
            }

            if (PartitionId != null)
            {
                count++;
                WriteTag(ref bytes, ref offset, "service-fabric.partition-id", PartitionId);
            }

            if (NodeId != null)
            {
                count++;
                WriteTag(ref bytes, ref offset, "service-fabric.node-id", NodeId);
            }

            if (NodeName != null)
            {
                count++;
                WriteTag(ref bytes, ref offset, "service-fabric.node-name", NodeName);
            }

            if (ServiceName != null)
            {
                count++;
                WriteTag(ref bytes, ref offset, "service-fabric.service-name", ServiceName);
            }

            if (RemotingUri != null)
            {
                count++;
                WriteTag(ref bytes, ref offset, "service-fabric.service-remoting.uri", RemotingUri);
            }

            if (RemotingMethodName != null)
            {
                count++;
                WriteTag(ref bytes, ref offset, "service-fabric.service-remoting.method-name", RemotingMethodName);
            }

            if (RemotingMethodId != null)
            {
                count++;
                WriteTag(ref bytes, ref offset, "service-fabric.service-remoting.method-id", RemotingMethodId);
            }

            if (RemotingInterfaceId != null)
            {
                count++;
                WriteTag(ref bytes, ref offset, "service-fabric.service-remoting.interface-id", RemotingInterfaceId);
            }

            if (RemotingInvocationId != null)
            {
                count++;
                WriteTag(ref bytes, ref offset, "service-fabric.service-remoting.invocation-id", RemotingInvocationId);
            }

            return count + base.WriteAdditionalTags(ref bytes, ref offset);
        }

        protected override void WriteAdditionalTags(System.Text.StringBuilder sb)
        {
            if (SpanKind != null)
            {
                sb.Append("span.kind (tag):")
                  .Append(SpanKind)
                  .Append(',');
            }

            if (ApplicationId != null)
            {
                sb.Append("service-fabric.application-id (tag):")
                  .Append(ApplicationId)
                  .Append(',');
            }

            if (ApplicationName != null)
            {
                sb.Append("service-fabric.application-name (tag):")
                  .Append(ApplicationName)
                  .Append(',');
            }

            if (PartitionId != null)
            {
                sb.Append("service-fabric.partition-id (tag):")
                  .Append(PartitionId)
                  .Append(',');
            }

            if (NodeId != null)
            {
                sb.Append("service-fabric.node-id (tag):")
                  .Append(NodeId)
                  .Append(',');
            }

            if (NodeName != null)
            {
                sb.Append("service-fabric.node-name (tag):")
                  .Append(NodeName)
                  .Append(',');
            }

            if (ServiceName != null)
            {
                sb.Append("service-fabric.service-name (tag):")
                  .Append(ServiceName)
                  .Append(',');
            }

            if (RemotingUri != null)
            {
                sb.Append("service-fabric.service-remoting.uri (tag):")
                  .Append(RemotingUri)
                  .Append(',');
            }

            if (RemotingMethodName != null)
            {
                sb.Append("service-fabric.service-remoting.method-name (tag):")
                  .Append(RemotingMethodName)
                  .Append(',');
            }

            if (RemotingMethodId != null)
            {
                sb.Append("service-fabric.service-remoting.method-id (tag):")
                  .Append(RemotingMethodId)
                  .Append(',');
            }

            if (RemotingInterfaceId != null)
            {
                sb.Append("service-fabric.service-remoting.interface-id (tag):")
                  .Append(RemotingInterfaceId)
                  .Append(',');
            }

            if (RemotingInvocationId != null)
            {
                sb.Append("service-fabric.service-remoting.invocation-id (tag):")
                  .Append(RemotingInvocationId)
                  .Append(',');
            }

            base.WriteAdditionalTags(sb);
        }
    }
}
