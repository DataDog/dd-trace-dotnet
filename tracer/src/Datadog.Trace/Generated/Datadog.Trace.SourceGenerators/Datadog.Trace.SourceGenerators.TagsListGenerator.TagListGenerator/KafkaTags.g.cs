// <auto-generated/>
#nullable enable

namespace Datadog.Trace.Tagging
{
    partial class KafkaTags
    {
        private static readonly byte[] _bytesMessageQueueTimeMs = Datadog.Trace.Vendors.MessagePack.StringEncoding.UTF8.GetBytes("message.queue_time_ms");
        private static readonly byte[] _bytesSpanKind = Datadog.Trace.Vendors.MessagePack.StringEncoding.UTF8.GetBytes("span.kind");
        private static readonly byte[] _bytesInstrumentationName = Datadog.Trace.Vendors.MessagePack.StringEncoding.UTF8.GetBytes("component");
        private static readonly byte[] _bytesPartition = Datadog.Trace.Vendors.MessagePack.StringEncoding.UTF8.GetBytes("kafka.partition");
        private static readonly byte[] _bytesOffset = Datadog.Trace.Vendors.MessagePack.StringEncoding.UTF8.GetBytes("kafka.offset");
        private static readonly byte[] _bytesTombstone = Datadog.Trace.Vendors.MessagePack.StringEncoding.UTF8.GetBytes("kafka.tombstone");

        public override string? GetTag(string key)
        {
            return key switch
            {
                "span.kind" => SpanKind,
                "component" => InstrumentationName,
                "kafka.partition" => Partition,
                "kafka.offset" => Offset,
                "kafka.tombstone" => Tombstone,
                _ => base.GetTag(key),
            };
        }

        public override void SetTag(string key, string value)
        {
            switch(key)
            {
                case "kafka.partition": 
                    Partition = value;
                    break;
                case "kafka.offset": 
                    Offset = value;
                    break;
                case "kafka.tombstone": 
                    Tombstone = value;
                    break;
                default: 
                    base.SetTag(key, value);
                    break;
            }
        }

        protected override int WriteAdditionalTags(ref byte[] bytes, ref int offset)
        {
            var count = 0;
            if (SpanKind != null)
            {
                count++;
                WriteTag(ref bytes, ref offset, _bytesSpanKind, SpanKind);
            }

            if (InstrumentationName != null)
            {
                count++;
                WriteTag(ref bytes, ref offset, _bytesInstrumentationName, InstrumentationName);
            }

            if (Partition != null)
            {
                count++;
                WriteTag(ref bytes, ref offset, _bytesPartition, Partition);
            }

            if (Offset != null)
            {
                count++;
                WriteTag(ref bytes, ref offset, _bytesOffset, Offset);
            }

            if (Tombstone != null)
            {
                count++;
                WriteTag(ref bytes, ref offset, _bytesTombstone, Tombstone);
            }

            return count + base.WriteAdditionalTags(ref bytes, ref offset);
        }

        protected override void WriteAdditionalTags(System.Text.StringBuilder sb)
        {
            if (SpanKind != null)
            {
                sb.Append("span.kind (tag):")
                  .Append(SpanKind)
                  .Append(',');
            }

            if (InstrumentationName != null)
            {
                sb.Append("component (tag):")
                  .Append(InstrumentationName)
                  .Append(',');
            }

            if (Partition != null)
            {
                sb.Append("kafka.partition (tag):")
                  .Append(Partition)
                  .Append(',');
            }

            if (Offset != null)
            {
                sb.Append("kafka.offset (tag):")
                  .Append(Offset)
                  .Append(',');
            }

            if (Tombstone != null)
            {
                sb.Append("kafka.tombstone (tag):")
                  .Append(Tombstone)
                  .Append(',');
            }

            base.WriteAdditionalTags(sb);
        }
        public override double? GetMetric(string key)
        {
            return key switch
            {
                "message.queue_time_ms" => MessageQueueTimeMs,
                _ => base.GetMetric(key),
            };
        }

        public override void SetMetric(string key, double? value)
        {
            switch(key)
            {
                case "message.queue_time_ms": 
                    MessageQueueTimeMs = value;
                    break;
                default: 
                    base.SetMetric(key, value);
                    break;
            }
        }

        protected override int WriteAdditionalMetrics(ref byte[] bytes, ref int offset)
        {
            var count = 0;
            if (MessageQueueTimeMs != null)
            {
                count++;
                WriteMetric(ref bytes, ref offset, _bytesMessageQueueTimeMs, MessageQueueTimeMs.Value);
            }

            return count + base.WriteAdditionalMetrics(ref bytes, ref offset);
        }

        protected override void WriteAdditionalMetrics(System.Text.StringBuilder sb)
        {
            if (MessageQueueTimeMs != null)
            {
                sb.Append("message.queue_time_ms (metric):")
                  .Append(MessageQueueTimeMs.Value)
                  .Append(',');
            }

            base.WriteAdditionalMetrics(sb);
        }
    }
}
