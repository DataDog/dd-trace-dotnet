// <copyright company="Datadog">
// Unless explicitly stated otherwise all files in this repository are licensed under the Apache 2 License.
// This product includes software developed at Datadog (https://www.datadoghq.com/). Copyright 2017 Datadog, Inc.
// </copyright>
// <auto-generated/>

#nullable enable

using Datadog.Trace.Processors;
using Datadog.Trace.Tagging;
using System;

namespace Datadog.Trace.ClrProfiler.AutoInstrumentation.Azure.EventHubs
{
    partial class EventHubProducerTags
    {
        // SpanKindBytes = MessagePack.Serialize("span.kind");
        private static ReadOnlySpan<byte> SpanKindBytes => new byte[] { 169, 115, 112, 97, 110, 46, 107, 105, 110, 100 };
        // EventHubNameBytes = MessagePack.Serialize("eventhub.name");
        private static ReadOnlySpan<byte> EventHubNameBytes => new byte[] { 173, 101, 118, 101, 110, 116, 104, 117, 98, 46, 110, 97, 109, 101 };
        // NamespaceBytes = MessagePack.Serialize("eventhub.namespace");
        private static ReadOnlySpan<byte> NamespaceBytes => new byte[] { 178, 101, 118, 101, 110, 116, 104, 117, 98, 46, 110, 97, 109, 101, 115, 112, 97, 99, 101 };
        // OperationBytes = MessagePack.Serialize("messaging.operation");
        private static ReadOnlySpan<byte> OperationBytes => new byte[] { 179, 109, 101, 115, 115, 97, 103, 105, 110, 103, 46, 111, 112, 101, 114, 97, 116, 105, 111, 110 };

        public override string? GetTag(string key)
        {
            return key switch
            {
                "span.kind" => SpanKind,
                "eventhub.name" => EventHubName,
                "eventhub.namespace" => Namespace,
                "messaging.operation" => Operation,
                _ => base.GetTag(key),
            };
        }

        public override void SetTag(string key, string value)
        {
            switch(key)
            {
                case "eventhub.name": 
                    EventHubName = value;
                    break;
                case "eventhub.namespace": 
                    Namespace = value;
                    break;
                case "messaging.operation": 
                    Operation = value;
                    break;
                case "span.kind": 
                    Logger.Value.Warning("Attempted to set readonly tag {TagName} on {TagType}. Ignoring.", key, nameof(EventHubProducerTags));
                    break;
                default: 
                    base.SetTag(key, value);
                    break;
            }
        }

        public override void EnumerateTags<TProcessor>(ref TProcessor processor)
        {
            if (SpanKind is not null)
            {
                processor.Process(new TagItem<string>("span.kind", SpanKind, SpanKindBytes));
            }

            if (EventHubName is not null)
            {
                processor.Process(new TagItem<string>("eventhub.name", EventHubName, EventHubNameBytes));
            }

            if (Namespace is not null)
            {
                processor.Process(new TagItem<string>("eventhub.namespace", Namespace, NamespaceBytes));
            }

            if (Operation is not null)
            {
                processor.Process(new TagItem<string>("messaging.operation", Operation, OperationBytes));
            }

            base.EnumerateTags(ref processor);
        }

        protected override void WriteAdditionalTags(System.Text.StringBuilder sb)
        {
            if (SpanKind is not null)
            {
                sb.Append("span.kind (tag):")
                  .Append(SpanKind)
                  .Append(',');
            }

            if (EventHubName is not null)
            {
                sb.Append("eventhub.name (tag):")
                  .Append(EventHubName)
                  .Append(',');
            }

            if (Namespace is not null)
            {
                sb.Append("eventhub.namespace (tag):")
                  .Append(Namespace)
                  .Append(',');
            }

            if (Operation is not null)
            {
                sb.Append("messaging.operation (tag):")
                  .Append(Operation)
                  .Append(',');
            }

            base.WriteAdditionalTags(sb);
        }
    }
}
