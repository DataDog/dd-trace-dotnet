// <copyright company="Datadog">
// Unless explicitly stated otherwise all files in this repository are licensed under the Apache 2 License.
// This product includes software developed at Datadog (https://www.datadoghq.com/). Copyright 2017 Datadog, Inc.
// </copyright>
// <auto-generated/>

#nullable enable

using Datadog.Trace.Processors;
using Datadog.Trace.Tagging;
using System;

namespace Datadog.Trace.ClrProfiler.AutoInstrumentation.GraphQL
{
    partial class GraphQLTags
    {
        // SpanKindBytes = MessagePack.Serialize("span.kind");
        private static ReadOnlySpan<byte> SpanKindBytes => new byte[] { 169, 115, 112, 97, 110, 46, 107, 105, 110, 100 };
        // InstrumentationNameBytes = MessagePack.Serialize("component");
        private static ReadOnlySpan<byte> InstrumentationNameBytes => new byte[] { 169, 99, 111, 109, 112, 111, 110, 101, 110, 116 };
        // SourceBytes = MessagePack.Serialize("graphql.source");
        private static ReadOnlySpan<byte> SourceBytes => new byte[] { 174, 103, 114, 97, 112, 104, 113, 108, 46, 115, 111, 117, 114, 99, 101 };
        // OperationNameBytes = MessagePack.Serialize("graphql.operation.name");
        private static ReadOnlySpan<byte> OperationNameBytes => new byte[] { 182, 103, 114, 97, 112, 104, 113, 108, 46, 111, 112, 101, 114, 97, 116, 105, 111, 110, 46, 110, 97, 109, 101 };
        // OperationTypeBytes = MessagePack.Serialize("graphql.operation.type");
        private static ReadOnlySpan<byte> OperationTypeBytes => new byte[] { 182, 103, 114, 97, 112, 104, 113, 108, 46, 111, 112, 101, 114, 97, 116, 105, 111, 110, 46, 116, 121, 112, 101 };

        public override string? GetTag(string key)
        {
            return key switch
            {
                "span.kind" => SpanKind,
                "component" => InstrumentationName,
                "graphql.source" => Source,
                "graphql.operation.name" => OperationName,
                "graphql.operation.type" => OperationType,
                _ => base.GetTag(key),
            };
        }

        public override void SetTag(string key, string value)
        {
            switch(key)
            {
                case "graphql.source": 
                    Source = value;
                    break;
                case "graphql.operation.name": 
                    OperationName = value;
                    break;
                case "graphql.operation.type": 
                    OperationType = value;
                    break;
                case "span.kind": 
                case "component": 
                    Logger.Value.Warning("Attempted to set readonly tag {TagName} on {TagType}. Ignoring.", key, nameof(GraphQLTags));
                    break;
                default: 
                    base.SetTag(key, value);
                    break;
            }
        }

        public override void EnumerateTags<TProcessor>(ref TProcessor processor)
        {
            if (SpanKind is not null)
            {
                processor.Process(new TagItem<string>("span.kind", SpanKind, SpanKindBytes));
            }

            if (InstrumentationName is not null)
            {
                processor.Process(new TagItem<string>("component", InstrumentationName, InstrumentationNameBytes));
            }

            if (Source is not null)
            {
                processor.Process(new TagItem<string>("graphql.source", Source, SourceBytes));
            }

            if (OperationName is not null)
            {
                processor.Process(new TagItem<string>("graphql.operation.name", OperationName, OperationNameBytes));
            }

            if (OperationType is not null)
            {
                processor.Process(new TagItem<string>("graphql.operation.type", OperationType, OperationTypeBytes));
            }

            base.EnumerateTags(ref processor);
        }

        protected override void WriteAdditionalTags(System.Text.StringBuilder sb)
        {
            if (SpanKind is not null)
            {
                sb.Append("span.kind (tag):")
                  .Append(SpanKind)
                  .Append(',');
            }

            if (InstrumentationName is not null)
            {
                sb.Append("component (tag):")
                  .Append(InstrumentationName)
                  .Append(',');
            }

            if (Source is not null)
            {
                sb.Append("graphql.source (tag):")
                  .Append(Source)
                  .Append(',');
            }

            if (OperationName is not null)
            {
                sb.Append("graphql.operation.name (tag):")
                  .Append(OperationName)
                  .Append(',');
            }

            if (OperationType is not null)
            {
                sb.Append("graphql.operation.type (tag):")
                  .Append(OperationType)
                  .Append(',');
            }

            base.WriteAdditionalTags(sb);
        }
    }
}
