// <auto-generated/>
#nullable enable

namespace Datadog.Trace.Configuration;
partial class ImmutableExporterSettings
{

        /// <summary>
        /// Gets the Uri where the Tracer can connect to the Agent.
        /// Default is <c>"http://localhost:8126"</c>.
        /// </summary>
        /// <seealso cref="ConfigurationKeys.AgentUri"/>
        /// <seealso cref="ConfigurationKeys.AgentHost"/>
        /// <seealso cref="ConfigurationKeys.AgentPort"/>
    [Datadog.Trace.SourceGenerators.PublicApi]
    public System.Uri AgentUri
    {
        get
        {
            Datadog.Trace.Telemetry.TelemetryFactory.Metrics.Record(
                (Datadog.Trace.Telemetry.Metrics.PublicApiUsage)55);
            return AgentUriInternal;
        }
    }

        /// <summary>
        /// Gets the windows pipe name where the Tracer can connect to the Agent.
        /// Default is <c>null</c>.
        /// </summary>
        /// <seealso cref="ConfigurationKeys.TracesPipeName"/>
    [Datadog.Trace.SourceGenerators.PublicApi]
    public string? TracesPipeName
    {
        get
        {
            Datadog.Trace.Telemetry.TelemetryFactory.Metrics.Record(
                (Datadog.Trace.Telemetry.Metrics.PublicApiUsage)61);
            return TracesPipeNameInternal;
        }
    }

        /// <summary>
        /// Gets the timeout in milliseconds for the windows named pipe requests.
        /// Default is <c>100</c>.
        /// </summary>
        /// <seealso cref="ConfigurationKeys.TracesPipeTimeoutMs"/>
    [Datadog.Trace.SourceGenerators.PublicApi]
    public int TracesPipeTimeoutMs
    {
        get
        {
            Datadog.Trace.Telemetry.TelemetryFactory.Metrics.Record(
                (Datadog.Trace.Telemetry.Metrics.PublicApiUsage)62);
            return TracesPipeTimeoutMsInternal;
        }
    }

        /// <summary>
        /// Gets the windows pipe name where the Tracer can send stats.
        /// Default is <c>null</c>.
        /// </summary>
        /// <seealso cref="ConfigurationKeys.MetricsPipeName"/>
    [Datadog.Trace.SourceGenerators.PublicApi]
    public string? MetricsPipeName
    {
        get
        {
            Datadog.Trace.Telemetry.TelemetryFactory.Metrics.Record(
                (Datadog.Trace.Telemetry.Metrics.PublicApiUsage)57);
            return MetricsPipeNameInternal;
        }
    }

        /// <summary>
        /// Gets the port where the DogStatsd server is listening for connections.
        /// Default is <c>8125</c>.
        /// </summary>
        /// <seealso cref="ConfigurationKeys.DogStatsdPort"/>
    [Datadog.Trace.SourceGenerators.PublicApi]
    public int DogStatsdPort
    {
        get
        {
            Datadog.Trace.Telemetry.TelemetryFactory.Metrics.Record(
                (Datadog.Trace.Telemetry.Metrics.PublicApiUsage)56);
            return DogStatsdPortInternal;
        }
    }

        /// <summary>
        /// Gets a value indicating whether partial flush is enabled
        /// </summary>
    [Datadog.Trace.SourceGenerators.PublicApi]
    public bool PartialFlushEnabled
    {
        get
        {
            Datadog.Trace.Telemetry.TelemetryFactory.Metrics.Record(
                (Datadog.Trace.Telemetry.Metrics.PublicApiUsage)59);
            return PartialFlushEnabledInternal;
        }
    }

        /// <summary>
        /// Gets the minimum number of closed spans in a trace before it's partially flushed
        /// </summary>
    [Datadog.Trace.SourceGenerators.PublicApi]
    public int PartialFlushMinSpans
    {
        get
        {
            Datadog.Trace.Telemetry.TelemetryFactory.Metrics.Record(
                (Datadog.Trace.Telemetry.Metrics.PublicApiUsage)60);
            return PartialFlushMinSpansInternal;
        }
    }

        /// <summary>
        /// Gets the unix domain socket path where the Tracer can connect to the Agent.
        /// </summary>
        /// <seealso cref="ConfigurationKeys.TracesUnixDomainSocketPath"/>
    [Datadog.Trace.SourceGenerators.PublicApi]
    public string? TracesUnixDomainSocketPath
    {
        get
        {
            Datadog.Trace.Telemetry.TelemetryFactory.Metrics.Record(
                (Datadog.Trace.Telemetry.Metrics.PublicApiUsage)63);
            return TracesUnixDomainSocketPathInternal;
        }
    }

        /// <summary>
        /// Gets the unix domain socket path where the Tracer can send stats.
        /// </summary>
        /// <seealso cref="ConfigurationKeys.MetricsUnixDomainSocketPath"/>
    [Datadog.Trace.SourceGenerators.PublicApi]
    public string? MetricsUnixDomainSocketPath
    {
        get
        {
            Datadog.Trace.Telemetry.TelemetryFactory.Metrics.Record(
                (Datadog.Trace.Telemetry.Metrics.PublicApiUsage)58);
            return MetricsUnixDomainSocketPathInternal;
        }
    }
}