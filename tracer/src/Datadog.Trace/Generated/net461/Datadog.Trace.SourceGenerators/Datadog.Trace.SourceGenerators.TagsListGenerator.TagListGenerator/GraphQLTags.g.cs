// <auto-generated/>
#nullable enable

using Datadog.Trace.Processors;
using Datadog.Trace.Tagging;

namespace Datadog.Trace.ClrProfiler.AutoInstrumentation.GraphQL
{
    partial class GraphQLTags
    {
        // SpanKind => span.kind
        private static readonly byte[] SpanKindBytes = new byte[] { 115, 112, 97, 110, 46, 107, 105, 110, 100 };
        // InstrumentationName => component
        private static readonly byte[] InstrumentationNameBytes = new byte[] { 99, 111, 109, 112, 111, 110, 101, 110, 116 };
        // Source => graphql.source
        private static readonly byte[] SourceBytes = new byte[] { 103, 114, 97, 112, 104, 113, 108, 46, 115, 111, 117, 114, 99, 101 };
        // OperationName => graphql.operation.name
        private static readonly byte[] OperationNameBytes = new byte[] { 103, 114, 97, 112, 104, 113, 108, 46, 111, 112, 101, 114, 97, 116, 105, 111, 110, 46, 110, 97, 109, 101 };
        // OperationType => graphql.operation.type
        private static readonly byte[] OperationTypeBytes = new byte[] { 103, 114, 97, 112, 104, 113, 108, 46, 111, 112, 101, 114, 97, 116, 105, 111, 110, 46, 116, 121, 112, 101 };

        public override string? GetTag(string key)
        {
            return key switch
            {
                "span.kind" => SpanKind,
                "component" => InstrumentationName,
                "graphql.source" => Source,
                "graphql.operation.name" => OperationName,
                "graphql.operation.type" => OperationType,
                _ => base.GetTag(key),
            };
        }

        public override void SetTag(string key, string value)
        {
            switch(key)
            {
                case "graphql.source": 
                    Source = value;
                    break;
                case "graphql.operation.name": 
                    OperationName = value;
                    break;
                case "graphql.operation.type": 
                    OperationType = value;
                    break;
                default: 
                    base.SetTag(key, value);
                    break;
            }
        }

        public override void EnumerateTags<TProcessor>(TProcessor processor)
        {
            if (SpanKind != null)
            {
                processor.Process(new TagItem<string>("span.kind", SpanKind, SpanKindBytes));
            }

            if (InstrumentationName != null)
            {
                processor.Process(new TagItem<string>("component", InstrumentationName, InstrumentationNameBytes));
            }

            if (Source != null)
            {
                processor.Process(new TagItem<string>("graphql.source", Source, SourceBytes));
            }

            if (OperationName != null)
            {
                processor.Process(new TagItem<string>("graphql.operation.name", OperationName, OperationNameBytes));
            }

            if (OperationType != null)
            {
                processor.Process(new TagItem<string>("graphql.operation.type", OperationType, OperationTypeBytes));
            }

            base.EnumerateTags(processor);
        }

        protected override int WriteAdditionalTags(ref byte[] bytes, ref int offset, ITagProcessor[] tagProcessors)
        {
            var count = 0;
            if (SpanKind != null)
            {
                count++;
                WriteTag(ref bytes, ref offset, SpanKindBytes, SpanKind, tagProcessors);
            }

            if (InstrumentationName != null)
            {
                count++;
                WriteTag(ref bytes, ref offset, InstrumentationNameBytes, InstrumentationName, tagProcessors);
            }

            if (Source != null)
            {
                count++;
                WriteTag(ref bytes, ref offset, SourceBytes, Source, tagProcessors);
            }

            if (OperationName != null)
            {
                count++;
                WriteTag(ref bytes, ref offset, OperationNameBytes, OperationName, tagProcessors);
            }

            if (OperationType != null)
            {
                count++;
                WriteTag(ref bytes, ref offset, OperationTypeBytes, OperationType, tagProcessors);
            }

            return count + base.WriteAdditionalTags(ref bytes, ref offset, tagProcessors);
        }

        protected override void WriteAdditionalTags(System.Text.StringBuilder sb)
        {
            if (SpanKind != null)
            {
                sb.Append("span.kind (tag):")
                  .Append(SpanKind)
                  .Append(',');
            }

            if (InstrumentationName != null)
            {
                sb.Append("component (tag):")
                  .Append(InstrumentationName)
                  .Append(',');
            }

            if (Source != null)
            {
                sb.Append("graphql.source (tag):")
                  .Append(Source)
                  .Append(',');
            }

            if (OperationName != null)
            {
                sb.Append("graphql.operation.name (tag):")
                  .Append(OperationName)
                  .Append(',');
            }

            if (OperationType != null)
            {
                sb.Append("graphql.operation.type (tag):")
                  .Append(OperationType)
                  .Append(',');
            }

            base.WriteAdditionalTags(sb);
        }
    }
}
