// <auto-generated/>
#nullable enable

namespace Datadog.Trace.Tagging
{
    partial class AspNetCoreEndpointTags
    {
        private static readonly byte[] AspNetCoreEndpointBytes = Datadog.Trace.Vendors.MessagePack.StringEncoding.UTF8.GetBytes("aspnet_core.endpoint");

        public override string? GetTag(string key)
        {
            return key switch
            {
                "aspnet_core.endpoint" => AspNetCoreEndpoint,
                _ => base.GetTag(key),
            };
        }

        public override void SetTag(string key, string value)
        {
            switch(key)
            {
                case "aspnet_core.endpoint": 
                    AspNetCoreEndpoint = value;
                    break;
                default: 
                    base.SetTag(key, value);
                    break;
            }
        }

        protected override int WriteAdditionalTags(ref byte[] bytes, ref int offset)
        {
            var count = 0;
            if (AspNetCoreEndpoint != null)
            {
                count++;
                WriteTag(ref bytes, ref offset, AspNetCoreEndpointBytes, AspNetCoreEndpoint);
            }

            return count + base.WriteAdditionalTags(ref bytes, ref offset);
        }

        protected override void WriteAdditionalTags(System.Text.StringBuilder sb)
        {
            if (AspNetCoreEndpoint != null)
            {
                sb.Append("aspnet_core.endpoint (tag):")
                  .Append(AspNetCoreEndpoint)
                  .Append(',');
            }

            base.WriteAdditionalTags(sb);
        }
    }
}
