// <auto-generated/>
#nullable enable

using Datadog.Trace.Processors;

namespace Datadog.Trace.Tagging
{
    partial class GrpcTags
    {
        private static readonly byte[] SpanKindBytes = Datadog.Trace.Vendors.MessagePack.StringEncoding.UTF8.GetBytes("span.kind");
        private static readonly byte[] InstrumentationNameBytes = Datadog.Trace.Vendors.MessagePack.StringEncoding.UTF8.GetBytes("component");
        private static readonly byte[] MethodKindBytes = Datadog.Trace.Vendors.MessagePack.StringEncoding.UTF8.GetBytes("grpc.method.kind");
        private static readonly byte[] MethodNameBytes = Datadog.Trace.Vendors.MessagePack.StringEncoding.UTF8.GetBytes("grpc.method.name");
        private static readonly byte[] MethodPathBytes = Datadog.Trace.Vendors.MessagePack.StringEncoding.UTF8.GetBytes("grpc.method.path");
        private static readonly byte[] MethodPackageBytes = Datadog.Trace.Vendors.MessagePack.StringEncoding.UTF8.GetBytes("grpc.method.package");
        private static readonly byte[] MethodServiceBytes = Datadog.Trace.Vendors.MessagePack.StringEncoding.UTF8.GetBytes("grpc.method.service");
        private static readonly byte[] StatusCodeBytes = Datadog.Trace.Vendors.MessagePack.StringEncoding.UTF8.GetBytes("grpc.status.code");

        public override string? GetTag(string key)
        {
            return key switch
            {
                "span.kind" => SpanKind,
                "component" => InstrumentationName,
                "grpc.method.kind" => MethodKind,
                "grpc.method.name" => MethodName,
                "grpc.method.path" => MethodPath,
                "grpc.method.package" => MethodPackage,
                "grpc.method.service" => MethodService,
                "grpc.status.code" => StatusCode,
                _ => base.GetTag(key),
            };
        }

        public override void SetTag(string key, string value)
        {
            switch(key)
            {
                case "grpc.method.kind": 
                    MethodKind = value;
                    break;
                case "grpc.method.name": 
                    MethodName = value;
                    break;
                case "grpc.method.path": 
                    MethodPath = value;
                    break;
                case "grpc.method.package": 
                    MethodPackage = value;
                    break;
                case "grpc.method.service": 
                    MethodService = value;
                    break;
                case "grpc.status.code": 
                    StatusCode = value;
                    break;
                default: 
                    base.SetTag(key, value);
                    break;
            }
        }

        protected override int WriteAdditionalTags(ref byte[] bytes, ref int offset, ITagProcessor[] tagProcessors)
        {
            var count = 0;
            if (SpanKind != null)
            {
                count++;
                WriteTag(ref bytes, ref offset, SpanKindBytes, SpanKind, tagProcessors);
            }

            if (InstrumentationName != null)
            {
                count++;
                WriteTag(ref bytes, ref offset, InstrumentationNameBytes, InstrumentationName, tagProcessors);
            }

            if (MethodKind != null)
            {
                count++;
                WriteTag(ref bytes, ref offset, MethodKindBytes, MethodKind, tagProcessors);
            }

            if (MethodName != null)
            {
                count++;
                WriteTag(ref bytes, ref offset, MethodNameBytes, MethodName, tagProcessors);
            }

            if (MethodPath != null)
            {
                count++;
                WriteTag(ref bytes, ref offset, MethodPathBytes, MethodPath, tagProcessors);
            }

            if (MethodPackage != null)
            {
                count++;
                WriteTag(ref bytes, ref offset, MethodPackageBytes, MethodPackage, tagProcessors);
            }

            if (MethodService != null)
            {
                count++;
                WriteTag(ref bytes, ref offset, MethodServiceBytes, MethodService, tagProcessors);
            }

            if (StatusCode != null)
            {
                count++;
                WriteTag(ref bytes, ref offset, StatusCodeBytes, StatusCode, tagProcessors);
            }

            return count + base.WriteAdditionalTags(ref bytes, ref offset, tagProcessors);
        }

        protected override void WriteAdditionalTags(System.Text.StringBuilder sb)
        {
            if (SpanKind != null)
            {
                sb.Append("span.kind (tag):")
                  .Append(SpanKind)
                  .Append(',');
            }

            if (InstrumentationName != null)
            {
                sb.Append("component (tag):")
                  .Append(InstrumentationName)
                  .Append(',');
            }

            if (MethodKind != null)
            {
                sb.Append("grpc.method.kind (tag):")
                  .Append(MethodKind)
                  .Append(',');
            }

            if (MethodName != null)
            {
                sb.Append("grpc.method.name (tag):")
                  .Append(MethodName)
                  .Append(',');
            }

            if (MethodPath != null)
            {
                sb.Append("grpc.method.path (tag):")
                  .Append(MethodPath)
                  .Append(',');
            }

            if (MethodPackage != null)
            {
                sb.Append("grpc.method.package (tag):")
                  .Append(MethodPackage)
                  .Append(',');
            }

            if (MethodService != null)
            {
                sb.Append("grpc.method.service (tag):")
                  .Append(MethodService)
                  .Append(',');
            }

            if (StatusCode != null)
            {
                sb.Append("grpc.status.code (tag):")
                  .Append(StatusCode)
                  .Append(',');
            }

            base.WriteAdditionalTags(sb);
        }
    }
}
