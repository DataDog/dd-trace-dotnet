// <auto-generated/>
#nullable enable

using Datadog.Trace.Processors;
using Datadog.Trace.Tagging;

namespace Datadog.Trace.Ci.Tagging
{
    partial class TestSpanTags
    {
        // SourceStartBytes = System.Text.Encoding.UTF8.GetBytes("test.source.start");
        private static readonly byte[] SourceStartBytes = new byte[] { 116, 101, 115, 116, 46, 115, 111, 117, 114, 99, 101, 46, 115, 116, 97, 114, 116 };
        // SourceEndBytes = System.Text.Encoding.UTF8.GetBytes("test.source.end");
        private static readonly byte[] SourceEndBytes = new byte[] { 116, 101, 115, 116, 46, 115, 111, 117, 114, 99, 101, 46, 101, 110, 100 };
        // NameBytes = System.Text.Encoding.UTF8.GetBytes("test.name");
        private static readonly byte[] NameBytes = new byte[] { 116, 101, 115, 116, 46, 110, 97, 109, 101 };
        // ParametersBytes = System.Text.Encoding.UTF8.GetBytes("test.parameters");
        private static readonly byte[] ParametersBytes = new byte[] { 116, 101, 115, 116, 46, 112, 97, 114, 97, 109, 101, 116, 101, 114, 115 };
        // SourceFileBytes = System.Text.Encoding.UTF8.GetBytes("test.source.file");
        private static readonly byte[] SourceFileBytes = new byte[] { 116, 101, 115, 116, 46, 115, 111, 117, 114, 99, 101, 46, 102, 105, 108, 101 };
        // CodeOwnersBytes = System.Text.Encoding.UTF8.GetBytes("test.codeowners");
        private static readonly byte[] CodeOwnersBytes = new byte[] { 116, 101, 115, 116, 46, 99, 111, 100, 101, 111, 119, 110, 101, 114, 115 };
        // TraitsBytes = System.Text.Encoding.UTF8.GetBytes("test.traits");
        private static readonly byte[] TraitsBytes = new byte[] { 116, 101, 115, 116, 46, 116, 114, 97, 105, 116, 115 };
        // SkipReasonBytes = System.Text.Encoding.UTF8.GetBytes("test.skip_reason");
        private static readonly byte[] SkipReasonBytes = new byte[] { 116, 101, 115, 116, 46, 115, 107, 105, 112, 95, 114, 101, 97, 115, 111, 110 };

        public override string? GetTag(string key)
        {
            return key switch
            {
                "test.name" => Name,
                "test.parameters" => Parameters,
                "test.source.file" => SourceFile,
                "test.codeowners" => CodeOwners,
                "test.traits" => Traits,
                "test.skip_reason" => SkipReason,
                _ => base.GetTag(key),
            };
        }

        public override void SetTag(string key, string value)
        {
            switch(key)
            {
                case "test.name": 
                    Name = value;
                    break;
                case "test.parameters": 
                    Parameters = value;
                    break;
                case "test.source.file": 
                    SourceFile = value;
                    break;
                case "test.codeowners": 
                    CodeOwners = value;
                    break;
                case "test.traits": 
                    Traits = value;
                    break;
                case "test.skip_reason": 
                    SkipReason = value;
                    break;
                default: 
                    base.SetTag(key, value);
                    break;
            }
        }

        public override void EnumerateTags<TProcessor>(ref TProcessor processor)
        {
            if (Name is not null)
            {
                processor.Process(new TagItem<string>("test.name", Name, NameBytes));
            }

            if (Parameters is not null)
            {
                processor.Process(new TagItem<string>("test.parameters", Parameters, ParametersBytes));
            }

            if (SourceFile is not null)
            {
                processor.Process(new TagItem<string>("test.source.file", SourceFile, SourceFileBytes));
            }

            if (CodeOwners is not null)
            {
                processor.Process(new TagItem<string>("test.codeowners", CodeOwners, CodeOwnersBytes));
            }

            if (Traits is not null)
            {
                processor.Process(new TagItem<string>("test.traits", Traits, TraitsBytes));
            }

            if (SkipReason is not null)
            {
                processor.Process(new TagItem<string>("test.skip_reason", SkipReason, SkipReasonBytes));
            }

            base.EnumerateTags(ref processor);
        }

        protected override void WriteAdditionalTags(System.Text.StringBuilder sb)
        {
            if (Name is not null)
            {
                sb.Append("test.name (tag):")
                  .Append(Name)
                  .Append(',');
            }

            if (Parameters is not null)
            {
                sb.Append("test.parameters (tag):")
                  .Append(Parameters)
                  .Append(',');
            }

            if (SourceFile is not null)
            {
                sb.Append("test.source.file (tag):")
                  .Append(SourceFile)
                  .Append(',');
            }

            if (CodeOwners is not null)
            {
                sb.Append("test.codeowners (tag):")
                  .Append(CodeOwners)
                  .Append(',');
            }

            if (Traits is not null)
            {
                sb.Append("test.traits (tag):")
                  .Append(Traits)
                  .Append(',');
            }

            if (SkipReason is not null)
            {
                sb.Append("test.skip_reason (tag):")
                  .Append(SkipReason)
                  .Append(',');
            }

            base.WriteAdditionalTags(sb);
        }
        public override double? GetMetric(string key)
        {
            return key switch
            {
                "test.source.start" => SourceStart,
                "test.source.end" => SourceEnd,
                _ => base.GetMetric(key),
            };
        }

        public override void SetMetric(string key, double? value)
        {
            switch(key)
            {
                case "test.source.start": 
                    SourceStart = value;
                    break;
                case "test.source.end": 
                    SourceEnd = value;
                    break;
                default: 
                    base.SetMetric(key, value);
                    break;
            }
        }

        public override void EnumerateMetrics<TProcessor>(ref TProcessor processor)
        {
            if (SourceStart is not null)
            {
                processor.Process(new TagItem<double>("test.source.start", SourceStart.Value, SourceStartBytes));
            }

            if (SourceEnd is not null)
            {
                processor.Process(new TagItem<double>("test.source.end", SourceEnd.Value, SourceEndBytes));
            }

            base.EnumerateMetrics(ref processor);
        }

        protected override void WriteAdditionalMetrics(System.Text.StringBuilder sb)
        {
            if (SourceStart is not null)
            {
                sb.Append("test.source.start (metric):")
                  .Append(SourceStart.Value)
                  .Append(',');
            }

            if (SourceEnd is not null)
            {
                sb.Append("test.source.end (metric):")
                  .Append(SourceEnd.Value)
                  .Append(',');
            }

            base.WriteAdditionalMetrics(sb);
        }
    }
}
