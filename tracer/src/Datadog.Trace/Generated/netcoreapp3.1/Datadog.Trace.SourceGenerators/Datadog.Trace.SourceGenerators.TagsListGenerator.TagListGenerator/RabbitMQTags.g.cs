// <auto-generated/>
#nullable enable

using Datadog.Trace.Processors;

namespace Datadog.Trace.Tagging
{
    partial class RabbitMQTags
    {
        private static readonly byte[] SpanKindBytes = Datadog.Trace.Vendors.MessagePack.StringEncoding.UTF8.GetBytes("span.kind");
        private static readonly byte[] InstrumentationNameBytes = Datadog.Trace.Vendors.MessagePack.StringEncoding.UTF8.GetBytes("component");
        private static readonly byte[] CommandBytes = Datadog.Trace.Vendors.MessagePack.StringEncoding.UTF8.GetBytes("amqp.command");
        private static readonly byte[] DeliveryModeBytes = Datadog.Trace.Vendors.MessagePack.StringEncoding.UTF8.GetBytes("amqp.delivery_mode");
        private static readonly byte[] ExchangeBytes = Datadog.Trace.Vendors.MessagePack.StringEncoding.UTF8.GetBytes("amqp.exchange");
        private static readonly byte[] RoutingKeyBytes = Datadog.Trace.Vendors.MessagePack.StringEncoding.UTF8.GetBytes("amqp.routing_key");
        private static readonly byte[] MessageSizeBytes = Datadog.Trace.Vendors.MessagePack.StringEncoding.UTF8.GetBytes("message.size");
        private static readonly byte[] QueueBytes = Datadog.Trace.Vendors.MessagePack.StringEncoding.UTF8.GetBytes("amqp.queue");

        public override string? GetTag(string key)
        {
            return key switch
            {
                "span.kind" => SpanKind,
                "component" => InstrumentationName,
                "amqp.command" => Command,
                "amqp.delivery_mode" => DeliveryMode,
                "amqp.exchange" => Exchange,
                "amqp.routing_key" => RoutingKey,
                "message.size" => MessageSize,
                "amqp.queue" => Queue,
                _ => base.GetTag(key),
            };
        }

        public override void SetTag(string key, string value)
        {
            switch(key)
            {
                case "component": 
                    InstrumentationName = value;
                    break;
                case "amqp.command": 
                    Command = value;
                    break;
                case "amqp.delivery_mode": 
                    DeliveryMode = value;
                    break;
                case "amqp.exchange": 
                    Exchange = value;
                    break;
                case "amqp.routing_key": 
                    RoutingKey = value;
                    break;
                case "message.size": 
                    MessageSize = value;
                    break;
                case "amqp.queue": 
                    Queue = value;
                    break;
                default: 
                    base.SetTag(key, value);
                    break;
            }
        }

        protected override int WriteAdditionalTags(ref byte[] bytes, ref int offset, ITagProcessor[] tagProcessors)
        {
            var count = 0;
            if (SpanKind != null)
            {
                count++;
                WriteTag(ref bytes, ref offset, SpanKindBytes, SpanKind, tagProcessors);
            }

            if (InstrumentationName != null)
            {
                count++;
                WriteTag(ref bytes, ref offset, InstrumentationNameBytes, InstrumentationName, tagProcessors);
            }

            if (Command != null)
            {
                count++;
                WriteTag(ref bytes, ref offset, CommandBytes, Command, tagProcessors);
            }

            if (DeliveryMode != null)
            {
                count++;
                WriteTag(ref bytes, ref offset, DeliveryModeBytes, DeliveryMode, tagProcessors);
            }

            if (Exchange != null)
            {
                count++;
                WriteTag(ref bytes, ref offset, ExchangeBytes, Exchange, tagProcessors);
            }

            if (RoutingKey != null)
            {
                count++;
                WriteTag(ref bytes, ref offset, RoutingKeyBytes, RoutingKey, tagProcessors);
            }

            if (MessageSize != null)
            {
                count++;
                WriteTag(ref bytes, ref offset, MessageSizeBytes, MessageSize, tagProcessors);
            }

            if (Queue != null)
            {
                count++;
                WriteTag(ref bytes, ref offset, QueueBytes, Queue, tagProcessors);
            }

            return count + base.WriteAdditionalTags(ref bytes, ref offset, tagProcessors);
        }

        protected override void WriteAdditionalTags(System.Text.StringBuilder sb)
        {
            if (SpanKind != null)
            {
                sb.Append("span.kind (tag):")
                  .Append(SpanKind)
                  .Append(',');
            }

            if (InstrumentationName != null)
            {
                sb.Append("component (tag):")
                  .Append(InstrumentationName)
                  .Append(',');
            }

            if (Command != null)
            {
                sb.Append("amqp.command (tag):")
                  .Append(Command)
                  .Append(',');
            }

            if (DeliveryMode != null)
            {
                sb.Append("amqp.delivery_mode (tag):")
                  .Append(DeliveryMode)
                  .Append(',');
            }

            if (Exchange != null)
            {
                sb.Append("amqp.exchange (tag):")
                  .Append(Exchange)
                  .Append(',');
            }

            if (RoutingKey != null)
            {
                sb.Append("amqp.routing_key (tag):")
                  .Append(RoutingKey)
                  .Append(',');
            }

            if (MessageSize != null)
            {
                sb.Append("message.size (tag):")
                  .Append(MessageSize)
                  .Append(',');
            }

            if (Queue != null)
            {
                sb.Append("amqp.queue (tag):")
                  .Append(Queue)
                  .Append(',');
            }

            base.WriteAdditionalTags(sb);
        }
    }
}
