// <auto-generated/>
#nullable enable

using Datadog.Trace.Processors;
using Datadog.Trace.Tagging;

namespace Datadog.Trace.Tagging
{
    partial class RemotingTags
    {
        // SpanKindBytes = System.Text.Encoding.UTF8.GetBytes("span.kind");
        private static readonly byte[] SpanKindBytes = new byte[] { 115, 112, 97, 110, 46, 107, 105, 110, 100 };
        // InstrumentationNameBytes = System.Text.Encoding.UTF8.GetBytes("component");
        private static readonly byte[] InstrumentationNameBytes = new byte[] { 99, 111, 109, 112, 111, 110, 101, 110, 116 };
        // MethodNameBytes = System.Text.Encoding.UTF8.GetBytes("rpc.method");
        private static readonly byte[] MethodNameBytes = new byte[] { 114, 112, 99, 46, 109, 101, 116, 104, 111, 100 };
        // MethodServiceBytes = System.Text.Encoding.UTF8.GetBytes("rpc.service");
        private static readonly byte[] MethodServiceBytes = new byte[] { 114, 112, 99, 46, 115, 101, 114, 118, 105, 99, 101 };
        // RpcSystemBytes = System.Text.Encoding.UTF8.GetBytes("rpc.system");
        private static readonly byte[] RpcSystemBytes = new byte[] { 114, 112, 99, 46, 115, 121, 115, 116, 101, 109 };

        public override string? GetTag(string key)
        {
            return key switch
            {
                "span.kind" => SpanKind,
                "component" => InstrumentationName,
                "rpc.method" => MethodName,
                "rpc.service" => MethodService,
                "rpc.system" => RpcSystem,
                _ => base.GetTag(key),
            };
        }

        public override void SetTag(string key, string value)
        {
            switch(key)
            {
                case "rpc.method": 
                    MethodName = value;
                    break;
                case "rpc.service": 
                    MethodService = value;
                    break;
                case "span.kind": 
                case "component": 
                case "rpc.system": 
                    Logger.Value.Warning("Attempted to set readonly tag {TagName} on {TagType}. Ignoring.", key, nameof(RemotingTags));
                    break;
                default: 
                    base.SetTag(key, value);
                    break;
            }
        }

        public override void EnumerateTags<TProcessor>(ref TProcessor processor)
        {
            if (SpanKind is not null)
            {
                processor.Process(new TagItem<string>("span.kind", SpanKind, SpanKindBytes));
            }

            if (InstrumentationName is not null)
            {
                processor.Process(new TagItem<string>("component", InstrumentationName, InstrumentationNameBytes));
            }

            if (MethodName is not null)
            {
                processor.Process(new TagItem<string>("rpc.method", MethodName, MethodNameBytes));
            }

            if (MethodService is not null)
            {
                processor.Process(new TagItem<string>("rpc.service", MethodService, MethodServiceBytes));
            }

            if (RpcSystem is not null)
            {
                processor.Process(new TagItem<string>("rpc.system", RpcSystem, RpcSystemBytes));
            }

            base.EnumerateTags(ref processor);
        }

        protected override void WriteAdditionalTags(System.Text.StringBuilder sb)
        {
            if (SpanKind is not null)
            {
                sb.Append("span.kind (tag):")
                  .Append(SpanKind)
                  .Append(',');
            }

            if (InstrumentationName is not null)
            {
                sb.Append("component (tag):")
                  .Append(InstrumentationName)
                  .Append(',');
            }

            if (MethodName is not null)
            {
                sb.Append("rpc.method (tag):")
                  .Append(MethodName)
                  .Append(',');
            }

            if (MethodService is not null)
            {
                sb.Append("rpc.service (tag):")
                  .Append(MethodService)
                  .Append(',');
            }

            if (RpcSystem is not null)
            {
                sb.Append("rpc.system (tag):")
                  .Append(RpcSystem)
                  .Append(',');
            }

            base.WriteAdditionalTags(sb);
        }
    }
}
