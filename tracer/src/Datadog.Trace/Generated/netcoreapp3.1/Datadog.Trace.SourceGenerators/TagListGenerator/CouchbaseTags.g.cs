// <copyright company="Datadog">
// Unless explicitly stated otherwise all files in this repository are licensed under the Apache 2 License.
// This product includes software developed at Datadog (https://www.datadoghq.com/). Copyright 2017 Datadog, Inc.
// </copyright>
// <auto-generated/>

#nullable enable

using Datadog.Trace.Processors;
using Datadog.Trace.Tagging;
using System;

namespace Datadog.Trace.Tagging
{
    partial class CouchbaseTags
    {
        // SpanKindBytes = MessagePack.Serialize("span.kind");
#if NETCOREAPP
        private static ReadOnlySpan<byte> SpanKindBytes => new byte[] { 169, 115, 112, 97, 110, 46, 107, 105, 110, 100 };
#else
        private static readonly byte[] SpanKindBytes = new byte[] { 169, 115, 112, 97, 110, 46, 107, 105, 110, 100 };
#endif
        // InstrumentationNameBytes = MessagePack.Serialize("component");
#if NETCOREAPP
        private static ReadOnlySpan<byte> InstrumentationNameBytes => new byte[] { 169, 99, 111, 109, 112, 111, 110, 101, 110, 116 };
#else
        private static readonly byte[] InstrumentationNameBytes = new byte[] { 169, 99, 111, 109, 112, 111, 110, 101, 110, 116 };
#endif
        // SeedNodesBytes = MessagePack.Serialize("db.couchbase.seed.nodes");
#if NETCOREAPP
        private static ReadOnlySpan<byte> SeedNodesBytes => new byte[] { 183, 100, 98, 46, 99, 111, 117, 99, 104, 98, 97, 115, 101, 46, 115, 101, 101, 100, 46, 110, 111, 100, 101, 115 };
#else
        private static readonly byte[] SeedNodesBytes = new byte[] { 183, 100, 98, 46, 99, 111, 117, 99, 104, 98, 97, 115, 101, 46, 115, 101, 101, 100, 46, 110, 111, 100, 101, 115 };
#endif
        // OperationCodeBytes = MessagePack.Serialize("couchbase.operation.code");
#if NETCOREAPP
        private static ReadOnlySpan<byte> OperationCodeBytes => new byte[] { 184, 99, 111, 117, 99, 104, 98, 97, 115, 101, 46, 111, 112, 101, 114, 97, 116, 105, 111, 110, 46, 99, 111, 100, 101 };
#else
        private static readonly byte[] OperationCodeBytes = new byte[] { 184, 99, 111, 117, 99, 104, 98, 97, 115, 101, 46, 111, 112, 101, 114, 97, 116, 105, 111, 110, 46, 99, 111, 100, 101 };
#endif
        // BucketBytes = MessagePack.Serialize("couchbase.operation.bucket");
#if NETCOREAPP
        private static ReadOnlySpan<byte> BucketBytes => new byte[] { 186, 99, 111, 117, 99, 104, 98, 97, 115, 101, 46, 111, 112, 101, 114, 97, 116, 105, 111, 110, 46, 98, 117, 99, 107, 101, 116 };
#else
        private static readonly byte[] BucketBytes = new byte[] { 186, 99, 111, 117, 99, 104, 98, 97, 115, 101, 46, 111, 112, 101, 114, 97, 116, 105, 111, 110, 46, 98, 117, 99, 107, 101, 116 };
#endif
        // KeyBytes = MessagePack.Serialize("couchbase.operation.key");
#if NETCOREAPP
        private static ReadOnlySpan<byte> KeyBytes => new byte[] { 183, 99, 111, 117, 99, 104, 98, 97, 115, 101, 46, 111, 112, 101, 114, 97, 116, 105, 111, 110, 46, 107, 101, 121 };
#else
        private static readonly byte[] KeyBytes = new byte[] { 183, 99, 111, 117, 99, 104, 98, 97, 115, 101, 46, 111, 112, 101, 114, 97, 116, 105, 111, 110, 46, 107, 101, 121 };
#endif
        // HostBytes = MessagePack.Serialize("out.host");
#if NETCOREAPP
        private static ReadOnlySpan<byte> HostBytes => new byte[] { 168, 111, 117, 116, 46, 104, 111, 115, 116 };
#else
        private static readonly byte[] HostBytes = new byte[] { 168, 111, 117, 116, 46, 104, 111, 115, 116 };
#endif
        // PortBytes = MessagePack.Serialize("out.port");
#if NETCOREAPP
        private static ReadOnlySpan<byte> PortBytes => new byte[] { 168, 111, 117, 116, 46, 112, 111, 114, 116 };
#else
        private static readonly byte[] PortBytes = new byte[] { 168, 111, 117, 116, 46, 112, 111, 114, 116 };
#endif

        public override string? GetTag(string key)
        {
            return key switch
            {
                "span.kind" => SpanKind,
                "component" => InstrumentationName,
                "db.couchbase.seed.nodes" => SeedNodes,
                "couchbase.operation.code" => OperationCode,
                "couchbase.operation.bucket" => Bucket,
                "couchbase.operation.key" => Key,
                "out.host" => Host,
                "out.port" => Port,
                _ => base.GetTag(key),
            };
        }

        public override void SetTag(string key, string value)
        {
            switch(key)
            {
                case "db.couchbase.seed.nodes": 
                    SeedNodes = value;
                    break;
                case "couchbase.operation.code": 
                    OperationCode = value;
                    break;
                case "couchbase.operation.bucket": 
                    Bucket = value;
                    break;
                case "couchbase.operation.key": 
                    Key = value;
                    break;
                case "out.host": 
                    Host = value;
                    break;
                case "out.port": 
                    Port = value;
                    break;
                case "span.kind": 
                case "component": 
                    Logger.Value.Warning("Attempted to set readonly tag {TagName} on {TagType}. Ignoring.", key, nameof(CouchbaseTags));
                    break;
                default: 
                    base.SetTag(key, value);
                    break;
            }
        }

        public override void EnumerateTags<TProcessor>(ref TProcessor processor)
        {
            if (SpanKind is not null)
            {
                processor.Process(new TagItem<string>("span.kind", SpanKind, SpanKindBytes));
            }

            if (InstrumentationName is not null)
            {
                processor.Process(new TagItem<string>("component", InstrumentationName, InstrumentationNameBytes));
            }

            if (SeedNodes is not null)
            {
                processor.Process(new TagItem<string>("db.couchbase.seed.nodes", SeedNodes, SeedNodesBytes));
            }

            if (OperationCode is not null)
            {
                processor.Process(new TagItem<string>("couchbase.operation.code", OperationCode, OperationCodeBytes));
            }

            if (Bucket is not null)
            {
                processor.Process(new TagItem<string>("couchbase.operation.bucket", Bucket, BucketBytes));
            }

            if (Key is not null)
            {
                processor.Process(new TagItem<string>("couchbase.operation.key", Key, KeyBytes));
            }

            if (Host is not null)
            {
                processor.Process(new TagItem<string>("out.host", Host, HostBytes));
            }

            if (Port is not null)
            {
                processor.Process(new TagItem<string>("out.port", Port, PortBytes));
            }

            base.EnumerateTags(ref processor);
        }

        protected override void WriteAdditionalTags(System.Text.StringBuilder sb)
        {
            if (SpanKind is not null)
            {
                sb.Append("span.kind (tag):")
                  .Append(SpanKind)
                  .Append(',');
            }

            if (InstrumentationName is not null)
            {
                sb.Append("component (tag):")
                  .Append(InstrumentationName)
                  .Append(',');
            }

            if (SeedNodes is not null)
            {
                sb.Append("db.couchbase.seed.nodes (tag):")
                  .Append(SeedNodes)
                  .Append(',');
            }

            if (OperationCode is not null)
            {
                sb.Append("couchbase.operation.code (tag):")
                  .Append(OperationCode)
                  .Append(',');
            }

            if (Bucket is not null)
            {
                sb.Append("couchbase.operation.bucket (tag):")
                  .Append(Bucket)
                  .Append(',');
            }

            if (Key is not null)
            {
                sb.Append("couchbase.operation.key (tag):")
                  .Append(Key)
                  .Append(',');
            }

            if (Host is not null)
            {
                sb.Append("out.host (tag):")
                  .Append(Host)
                  .Append(',');
            }

            if (Port is not null)
            {
                sb.Append("out.port (tag):")
                  .Append(Port)
                  .Append(',');
            }

            base.WriteAdditionalTags(sb);
        }
    }
}
