// <copyright company="Datadog">
// Unless explicitly stated otherwise all files in this repository are licensed under the Apache 2 License.
// This product includes software developed at Datadog (https://www.datadoghq.com/). Copyright 2017 Datadog, Inc.
// </copyright>
// <auto-generated/>

#nullable enable

namespace Datadog.Trace.Telemetry.Metrics;
internal static partial class CountCIVisibilityExtensions
{
    /// <summary>
    /// The number of separate metrics in the <see cref="Datadog.Trace.Telemetry.Metrics.CountCIVisibility" /> metric.
    /// </summary>
    public const int Length = 27;

    /// <summary>
    /// Gets the metric name for the provided metric
    /// </summary>
    /// <param name="metric">The metric to get the name for</param>
    /// <returns>The datadog metric name</returns>
    public static string GetName(this Datadog.Trace.Telemetry.Metrics.CountCIVisibility metric)
        => metric switch
        {
            Datadog.Trace.Telemetry.Metrics.CountCIVisibility.EventCreated => "event_created",
            Datadog.Trace.Telemetry.Metrics.CountCIVisibility.EventFinished => "event_finished",
            Datadog.Trace.Telemetry.Metrics.CountCIVisibility.CodeCoverageStarted => "code_coverage_started",
            Datadog.Trace.Telemetry.Metrics.CountCIVisibility.CodeCoverageFinished => "code_coverage_finished",
            Datadog.Trace.Telemetry.Metrics.CountCIVisibility.ManualApiEvent => "manual_api_events",
            Datadog.Trace.Telemetry.Metrics.CountCIVisibility.EventsEnqueueForSerialization => "events_enqueued_for_serialization",
            Datadog.Trace.Telemetry.Metrics.CountCIVisibility.EndpointPayloadRequests => "endpoint_payload.requests",
            Datadog.Trace.Telemetry.Metrics.CountCIVisibility.EndpointPayloadRequestsErrors => "endpoint_payload.requests_errors",
            Datadog.Trace.Telemetry.Metrics.CountCIVisibility.EndpointPayloadDropped => "endpoint_payload.dropped",
            Datadog.Trace.Telemetry.Metrics.CountCIVisibility.GitCommand => "git.command",
            Datadog.Trace.Telemetry.Metrics.CountCIVisibility.GitCommandErrors => "git.command_errors",
            Datadog.Trace.Telemetry.Metrics.CountCIVisibility.GitRequestsSearchCommits => "git_requests.search_commits",
            Datadog.Trace.Telemetry.Metrics.CountCIVisibility.GitRequestsSearchCommitsErrors => "git_requests.search_commits_errors",
            Datadog.Trace.Telemetry.Metrics.CountCIVisibility.GitRequestsObjectsPack => "git_requests.objects_pack",
            Datadog.Trace.Telemetry.Metrics.CountCIVisibility.GitRequestsObjectsPackErrors => "git_requests.objects_pack_errors",
            Datadog.Trace.Telemetry.Metrics.CountCIVisibility.GitRequestsSettings => "git_requests.settings",
            Datadog.Trace.Telemetry.Metrics.CountCIVisibility.GitRequestsSettingsErrors => "git_requests.settings_errors",
            Datadog.Trace.Telemetry.Metrics.CountCIVisibility.GitRequestsSettingsResponse => "git_requests.settings_response",
            Datadog.Trace.Telemetry.Metrics.CountCIVisibility.ITRSkippableTestsRequest => "itr_skippable_tests.request",
            Datadog.Trace.Telemetry.Metrics.CountCIVisibility.ITRSkippableTestsRequestErrors => "itr_skippable_tests.request_errors",
            Datadog.Trace.Telemetry.Metrics.CountCIVisibility.ITRSkippableTestsResponseTests => "itr_skippable_tests.response_tests",
            Datadog.Trace.Telemetry.Metrics.CountCIVisibility.ITRSkippableTestsResponseSuites => "itr_skippable_tests.response_suites",
            Datadog.Trace.Telemetry.Metrics.CountCIVisibility.ITRSkipped => "itr_skipped",
            Datadog.Trace.Telemetry.Metrics.CountCIVisibility.ITRUnskippable => "itr_unskippable",
            Datadog.Trace.Telemetry.Metrics.CountCIVisibility.ITRForcedRun => "itr_forced_run",
            Datadog.Trace.Telemetry.Metrics.CountCIVisibility.CodeCoverageIsEmpty => "code_coverage.is_empty",
            Datadog.Trace.Telemetry.Metrics.CountCIVisibility.CodeCoverageErrors => "code_coverage.errors",
            _ => null!,
        };

    /// <summary>
    /// Gets whether the metric is a "common" metric, used by all tracers
    /// </summary>
    /// <param name="metric">The metric to check</param>
    /// <returns>True if the metric is a "common" metric, used by all languages</returns>
    public static bool IsCommon(this Datadog.Trace.Telemetry.Metrics.CountCIVisibility metric)
        => metric switch
        {
            _ => true,
        };

    /// <summary>
    /// Gets the custom namespace for the provided metric
    /// </summary>
    /// <param name="metric">The metric to get the name for</param>
    /// <returns>The datadog metric name</returns>
    public static string? GetNamespace(this Datadog.Trace.Telemetry.Metrics.CountCIVisibility metric)
        => metric switch
        {
            Datadog.Trace.Telemetry.Metrics.CountCIVisibility.EventCreated => "civisibility",
            Datadog.Trace.Telemetry.Metrics.CountCIVisibility.EventFinished => "civisibility",
            Datadog.Trace.Telemetry.Metrics.CountCIVisibility.CodeCoverageStarted => "civisibility",
            Datadog.Trace.Telemetry.Metrics.CountCIVisibility.CodeCoverageFinished => "civisibility",
            Datadog.Trace.Telemetry.Metrics.CountCIVisibility.ManualApiEvent => "civisibility",
            Datadog.Trace.Telemetry.Metrics.CountCIVisibility.EventsEnqueueForSerialization => "civisibility",
            Datadog.Trace.Telemetry.Metrics.CountCIVisibility.EndpointPayloadRequests => "civisibility",
            Datadog.Trace.Telemetry.Metrics.CountCIVisibility.EndpointPayloadRequestsErrors => "civisibility",
            Datadog.Trace.Telemetry.Metrics.CountCIVisibility.EndpointPayloadDropped => "civisibility",
            Datadog.Trace.Telemetry.Metrics.CountCIVisibility.GitCommand => "civisibility",
            Datadog.Trace.Telemetry.Metrics.CountCIVisibility.GitCommandErrors => "civisibility",
            Datadog.Trace.Telemetry.Metrics.CountCIVisibility.GitRequestsSearchCommits => "civisibility",
            Datadog.Trace.Telemetry.Metrics.CountCIVisibility.GitRequestsSearchCommitsErrors => "civisibility",
            Datadog.Trace.Telemetry.Metrics.CountCIVisibility.GitRequestsObjectsPack => "civisibility",
            Datadog.Trace.Telemetry.Metrics.CountCIVisibility.GitRequestsObjectsPackErrors => "civisibility",
            Datadog.Trace.Telemetry.Metrics.CountCIVisibility.GitRequestsSettings => "civisibility",
            Datadog.Trace.Telemetry.Metrics.CountCIVisibility.GitRequestsSettingsErrors => "civisibility",
            Datadog.Trace.Telemetry.Metrics.CountCIVisibility.GitRequestsSettingsResponse => "civisibility",
            Datadog.Trace.Telemetry.Metrics.CountCIVisibility.ITRSkippableTestsRequest => "civisibility",
            Datadog.Trace.Telemetry.Metrics.CountCIVisibility.ITRSkippableTestsRequestErrors => "civisibility",
            Datadog.Trace.Telemetry.Metrics.CountCIVisibility.ITRSkippableTestsResponseTests => "civisibility",
            Datadog.Trace.Telemetry.Metrics.CountCIVisibility.ITRSkippableTestsResponseSuites => "civisibility",
            Datadog.Trace.Telemetry.Metrics.CountCIVisibility.ITRSkipped => "civisibility",
            Datadog.Trace.Telemetry.Metrics.CountCIVisibility.ITRUnskippable => "civisibility",
            Datadog.Trace.Telemetry.Metrics.CountCIVisibility.ITRForcedRun => "civisibility",
            Datadog.Trace.Telemetry.Metrics.CountCIVisibility.CodeCoverageIsEmpty => "civisibility",
            Datadog.Trace.Telemetry.Metrics.CountCIVisibility.CodeCoverageErrors => "civisibility",
            _ => null,
        };
}