// <copyright company="Datadog">
// Unless explicitly stated otherwise all files in this repository are licensed under the Apache 2 License.
// This product includes software developed at Datadog (https://www.datadoghq.com/). Copyright 2017 Datadog, Inc.
// </copyright>
// <auto-generated/>

#nullable enable

namespace Datadog.Trace.Telemetry.Metrics;
internal static partial class GaugeExtensions
{
    /// <summary>
    /// The number of separate metrics in the <see cref="Datadog.Trace.Telemetry.Metrics.Gauge" /> metric.
    /// </summary>
    public const int Length = 3;

    /// <summary>
    /// Gets the metric name for the provided metric
    /// </summary>
    /// <param name="metric">The metric to get the name for</param>
    /// <returns>The datadog metric name</returns>
    public static string GetName(this Datadog.Trace.Telemetry.Metrics.Gauge metric)
        => metric switch
        {
            Datadog.Trace.Telemetry.Metrics.Gauge.StatsBuckets => "stats_buckets",
            Datadog.Trace.Telemetry.Metrics.Gauge.Instrumentations => "instrumentations",
            Datadog.Trace.Telemetry.Metrics.Gauge.DirectLogQueue => "direct_log_queue.length",
            _ => null!,
        };

    /// <summary>
    /// Gets whether the metric is a "common" metric, used by all tracers
    /// </summary>
    /// <param name="metric">The metric to check</param>
    /// <returns>True if the metric is a "common" metric, used by all languages</returns>
    public static bool IsCommon(this Datadog.Trace.Telemetry.Metrics.Gauge metric)
        => metric switch
        {
            Datadog.Trace.Telemetry.Metrics.Gauge.Instrumentations => false,
            Datadog.Trace.Telemetry.Metrics.Gauge.DirectLogQueue => false,
            _ => true,
        };

    /// <summary>
    /// Gets the custom namespace for the provided metric
    /// </summary>
    /// <param name="metric">The metric to get the name for</param>
    /// <returns>The datadog metric name</returns>
    public static string? GetNamespace(this Datadog.Trace.Telemetry.Metrics.Gauge metric)
        => metric switch
        {
            _ => null,
        };
}