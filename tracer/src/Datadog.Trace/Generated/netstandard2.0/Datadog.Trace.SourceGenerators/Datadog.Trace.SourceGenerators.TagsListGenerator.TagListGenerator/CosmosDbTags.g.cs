// <auto-generated/>
#nullable enable

using Datadog.Trace.Processors;

namespace Datadog.Trace.Tagging
{
    partial class CosmosDbTags
    {
        private static readonly byte[] SpanKindBytes = Datadog.Trace.Vendors.MessagePack.StringEncoding.UTF8.GetBytes("span.kind");
        private static readonly byte[] InstrumentationNameBytes = Datadog.Trace.Vendors.MessagePack.StringEncoding.UTF8.GetBytes("component");
        private static readonly byte[] DbTypeBytes = Datadog.Trace.Vendors.MessagePack.StringEncoding.UTF8.GetBytes("db.type");
        private static readonly byte[] ContainerIdBytes = Datadog.Trace.Vendors.MessagePack.StringEncoding.UTF8.GetBytes("cosmosdb.container");
        private static readonly byte[] DatabaseIdBytes = Datadog.Trace.Vendors.MessagePack.StringEncoding.UTF8.GetBytes("db.name");
        private static readonly byte[] HostBytes = Datadog.Trace.Vendors.MessagePack.StringEncoding.UTF8.GetBytes("out.host");

        public override string? GetTag(string key)
        {
            return key switch
            {
                "span.kind" => SpanKind,
                "component" => InstrumentationName,
                "db.type" => DbType,
                "cosmosdb.container" => ContainerId,
                "db.name" => DatabaseId,
                "out.host" => Host,
                _ => base.GetTag(key),
            };
        }

        public override void SetTag(string key, string value)
        {
            switch(key)
            {
                case "db.type": 
                    DbType = value;
                    break;
                case "cosmosdb.container": 
                    ContainerId = value;
                    break;
                case "db.name": 
                    DatabaseId = value;
                    break;
                case "out.host": 
                    Host = value;
                    break;
                default: 
                    base.SetTag(key, value);
                    break;
            }
        }

        protected override int WriteAdditionalTags(ref byte[] bytes, ref int offset, ITagProcessor[] tagProcessors)
        {
            var count = 0;
            if (SpanKind != null)
            {
                count++;
                WriteTag(ref bytes, ref offset, SpanKindBytes, SpanKind, tagProcessors);
            }

            if (InstrumentationName != null)
            {
                count++;
                WriteTag(ref bytes, ref offset, InstrumentationNameBytes, InstrumentationName, tagProcessors);
            }

            if (DbType != null)
            {
                count++;
                WriteTag(ref bytes, ref offset, DbTypeBytes, DbType, tagProcessors);
            }

            if (ContainerId != null)
            {
                count++;
                WriteTag(ref bytes, ref offset, ContainerIdBytes, ContainerId, tagProcessors);
            }

            if (DatabaseId != null)
            {
                count++;
                WriteTag(ref bytes, ref offset, DatabaseIdBytes, DatabaseId, tagProcessors);
            }

            if (Host != null)
            {
                count++;
                WriteTag(ref bytes, ref offset, HostBytes, Host, tagProcessors);
            }

            return count + base.WriteAdditionalTags(ref bytes, ref offset, tagProcessors);
        }

        protected override void WriteAdditionalTags(System.Text.StringBuilder sb)
        {
            if (SpanKind != null)
            {
                sb.Append("span.kind (tag):")
                  .Append(SpanKind)
                  .Append(',');
            }

            if (InstrumentationName != null)
            {
                sb.Append("component (tag):")
                  .Append(InstrumentationName)
                  .Append(',');
            }

            if (DbType != null)
            {
                sb.Append("db.type (tag):")
                  .Append(DbType)
                  .Append(',');
            }

            if (ContainerId != null)
            {
                sb.Append("cosmosdb.container (tag):")
                  .Append(ContainerId)
                  .Append(',');
            }

            if (DatabaseId != null)
            {
                sb.Append("db.name (tag):")
                  .Append(DatabaseId)
                  .Append(',');
            }

            if (Host != null)
            {
                sb.Append("out.host (tag):")
                  .Append(Host)
                  .Append(',');
            }

            base.WriteAdditionalTags(sb);
        }
    }
}
