// <auto-generated/>
#nullable enable

using Datadog.Trace.Processors;
using Datadog.Trace.Tagging;

namespace Datadog.Trace.Tagging
{
    partial class RabbitMQTags
    {
        // SpanKind => span.kind
        private static readonly byte[] SpanKindBytes = new byte[] { 115, 112, 97, 110, 46, 107, 105, 110, 100 };
        // InstrumentationName => component
        private static readonly byte[] InstrumentationNameBytes = new byte[] { 99, 111, 109, 112, 111, 110, 101, 110, 116 };
        // Command => amqp.command
        private static readonly byte[] CommandBytes = new byte[] { 97, 109, 113, 112, 46, 99, 111, 109, 109, 97, 110, 100 };
        // DeliveryMode => amqp.delivery_mode
        private static readonly byte[] DeliveryModeBytes = new byte[] { 97, 109, 113, 112, 46, 100, 101, 108, 105, 118, 101, 114, 121, 95, 109, 111, 100, 101 };
        // Exchange => amqp.exchange
        private static readonly byte[] ExchangeBytes = new byte[] { 97, 109, 113, 112, 46, 101, 120, 99, 104, 97, 110, 103, 101 };
        // RoutingKey => amqp.routing_key
        private static readonly byte[] RoutingKeyBytes = new byte[] { 97, 109, 113, 112, 46, 114, 111, 117, 116, 105, 110, 103, 95, 107, 101, 121 };
        // MessageSize => message.size
        private static readonly byte[] MessageSizeBytes = new byte[] { 109, 101, 115, 115, 97, 103, 101, 46, 115, 105, 122, 101 };
        // Queue => amqp.queue
        private static readonly byte[] QueueBytes = new byte[] { 97, 109, 113, 112, 46, 113, 117, 101, 117, 101 };

        public override string? GetTag(string key)
        {
            return key switch
            {
                "span.kind" => SpanKind,
                "component" => InstrumentationName,
                "amqp.command" => Command,
                "amqp.delivery_mode" => DeliveryMode,
                "amqp.exchange" => Exchange,
                "amqp.routing_key" => RoutingKey,
                "message.size" => MessageSize,
                "amqp.queue" => Queue,
                _ => base.GetTag(key),
            };
        }

        public override void SetTag(string key, string value)
        {
            switch(key)
            {
                case "component": 
                    InstrumentationName = value;
                    break;
                case "amqp.command": 
                    Command = value;
                    break;
                case "amqp.delivery_mode": 
                    DeliveryMode = value;
                    break;
                case "amqp.exchange": 
                    Exchange = value;
                    break;
                case "amqp.routing_key": 
                    RoutingKey = value;
                    break;
                case "message.size": 
                    MessageSize = value;
                    break;
                case "amqp.queue": 
                    Queue = value;
                    break;
                default: 
                    base.SetTag(key, value);
                    break;
            }
        }

        public override void EnumerateTags<TProcessor>(TProcessor processor)
        {
            if (SpanKind != null)
            {
                processor.Process(new TagItem<string>("span.kind", SpanKind, SpanKindBytes));
            }

            if (InstrumentationName != null)
            {
                processor.Process(new TagItem<string>("component", InstrumentationName, InstrumentationNameBytes));
            }

            if (Command != null)
            {
                processor.Process(new TagItem<string>("amqp.command", Command, CommandBytes));
            }

            if (DeliveryMode != null)
            {
                processor.Process(new TagItem<string>("amqp.delivery_mode", DeliveryMode, DeliveryModeBytes));
            }

            if (Exchange != null)
            {
                processor.Process(new TagItem<string>("amqp.exchange", Exchange, ExchangeBytes));
            }

            if (RoutingKey != null)
            {
                processor.Process(new TagItem<string>("amqp.routing_key", RoutingKey, RoutingKeyBytes));
            }

            if (MessageSize != null)
            {
                processor.Process(new TagItem<string>("message.size", MessageSize, MessageSizeBytes));
            }

            if (Queue != null)
            {
                processor.Process(new TagItem<string>("amqp.queue", Queue, QueueBytes));
            }

            base.EnumerateTags(processor);
        }

        protected override int WriteAdditionalTags(ref byte[] bytes, ref int offset, ITagProcessor[] tagProcessors)
        {
            var count = 0;
            if (SpanKind != null)
            {
                count++;
                WriteTag(ref bytes, ref offset, SpanKindBytes, SpanKind, tagProcessors);
            }

            if (InstrumentationName != null)
            {
                count++;
                WriteTag(ref bytes, ref offset, InstrumentationNameBytes, InstrumentationName, tagProcessors);
            }

            if (Command != null)
            {
                count++;
                WriteTag(ref bytes, ref offset, CommandBytes, Command, tagProcessors);
            }

            if (DeliveryMode != null)
            {
                count++;
                WriteTag(ref bytes, ref offset, DeliveryModeBytes, DeliveryMode, tagProcessors);
            }

            if (Exchange != null)
            {
                count++;
                WriteTag(ref bytes, ref offset, ExchangeBytes, Exchange, tagProcessors);
            }

            if (RoutingKey != null)
            {
                count++;
                WriteTag(ref bytes, ref offset, RoutingKeyBytes, RoutingKey, tagProcessors);
            }

            if (MessageSize != null)
            {
                count++;
                WriteTag(ref bytes, ref offset, MessageSizeBytes, MessageSize, tagProcessors);
            }

            if (Queue != null)
            {
                count++;
                WriteTag(ref bytes, ref offset, QueueBytes, Queue, tagProcessors);
            }

            return count + base.WriteAdditionalTags(ref bytes, ref offset, tagProcessors);
        }

        protected override void WriteAdditionalTags(System.Text.StringBuilder sb)
        {
            if (SpanKind != null)
            {
                sb.Append("span.kind (tag):")
                  .Append(SpanKind)
                  .Append(',');
            }

            if (InstrumentationName != null)
            {
                sb.Append("component (tag):")
                  .Append(InstrumentationName)
                  .Append(',');
            }

            if (Command != null)
            {
                sb.Append("amqp.command (tag):")
                  .Append(Command)
                  .Append(',');
            }

            if (DeliveryMode != null)
            {
                sb.Append("amqp.delivery_mode (tag):")
                  .Append(DeliveryMode)
                  .Append(',');
            }

            if (Exchange != null)
            {
                sb.Append("amqp.exchange (tag):")
                  .Append(Exchange)
                  .Append(',');
            }

            if (RoutingKey != null)
            {
                sb.Append("amqp.routing_key (tag):")
                  .Append(RoutingKey)
                  .Append(',');
            }

            if (MessageSize != null)
            {
                sb.Append("message.size (tag):")
                  .Append(MessageSize)
                  .Append(',');
            }

            if (Queue != null)
            {
                sb.Append("amqp.queue (tag):")
                  .Append(Queue)
                  .Append(',');
            }

            base.WriteAdditionalTags(sb);
        }
    }
}
