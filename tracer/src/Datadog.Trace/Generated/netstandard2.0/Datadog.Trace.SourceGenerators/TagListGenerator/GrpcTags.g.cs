// <copyright company="Datadog">
// Unless explicitly stated otherwise all files in this repository are licensed under the Apache 2 License.
// This product includes software developed at Datadog (https://www.datadoghq.com/). Copyright 2017 Datadog, Inc.
// </copyright>
// <auto-generated/>

#nullable enable

using Datadog.Trace.Processors;
using Datadog.Trace.Tagging;
using System;

namespace Datadog.Trace.Tagging
{
    partial class GrpcTags
    {
        // SpanKindBytes = MessagePack.Serialize("span.kind");
        private static ReadOnlySpan<byte> SpanKindBytes => new byte[] { 169, 115, 112, 97, 110, 46, 107, 105, 110, 100 };
        // InstrumentationNameBytes = MessagePack.Serialize("component");
        private static ReadOnlySpan<byte> InstrumentationNameBytes => new byte[] { 169, 99, 111, 109, 112, 111, 110, 101, 110, 116 };
        // MethodKindBytes = MessagePack.Serialize("grpc.method.kind");
        private static ReadOnlySpan<byte> MethodKindBytes => new byte[] { 176, 103, 114, 112, 99, 46, 109, 101, 116, 104, 111, 100, 46, 107, 105, 110, 100 };
        // MethodNameBytes = MessagePack.Serialize("grpc.method.name");
        private static ReadOnlySpan<byte> MethodNameBytes => new byte[] { 176, 103, 114, 112, 99, 46, 109, 101, 116, 104, 111, 100, 46, 110, 97, 109, 101 };
        // MethodPathBytes = MessagePack.Serialize("grpc.method.path");
        private static ReadOnlySpan<byte> MethodPathBytes => new byte[] { 176, 103, 114, 112, 99, 46, 109, 101, 116, 104, 111, 100, 46, 112, 97, 116, 104 };
        // MethodPackageBytes = MessagePack.Serialize("grpc.method.package");
        private static ReadOnlySpan<byte> MethodPackageBytes => new byte[] { 179, 103, 114, 112, 99, 46, 109, 101, 116, 104, 111, 100, 46, 112, 97, 99, 107, 97, 103, 101 };
        // MethodServiceBytes = MessagePack.Serialize("grpc.method.service");
        private static ReadOnlySpan<byte> MethodServiceBytes => new byte[] { 179, 103, 114, 112, 99, 46, 109, 101, 116, 104, 111, 100, 46, 115, 101, 114, 118, 105, 99, 101 };
        // StatusCodeBytes = MessagePack.Serialize("grpc.status.code");
        private static ReadOnlySpan<byte> StatusCodeBytes => new byte[] { 176, 103, 114, 112, 99, 46, 115, 116, 97, 116, 117, 115, 46, 99, 111, 100, 101 };

        public override string? GetTag(string key)
        {
            return key switch
            {
                "span.kind" => SpanKind,
                "component" => InstrumentationName,
                "grpc.method.kind" => MethodKind,
                "grpc.method.name" => MethodName,
                "grpc.method.path" => MethodPath,
                "grpc.method.package" => MethodPackage,
                "grpc.method.service" => MethodService,
                "grpc.status.code" => StatusCode,
                _ => base.GetTag(key),
            };
        }

        public override void SetTag(string key, string value)
        {
            switch(key)
            {
                case "grpc.method.kind": 
                    MethodKind = value;
                    break;
                case "grpc.method.name": 
                    MethodName = value;
                    break;
                case "grpc.method.path": 
                    MethodPath = value;
                    break;
                case "grpc.method.package": 
                    MethodPackage = value;
                    break;
                case "grpc.method.service": 
                    MethodService = value;
                    break;
                case "grpc.status.code": 
                    StatusCode = value;
                    break;
                case "span.kind": 
                case "component": 
                    Logger.Value.Warning("Attempted to set readonly tag {TagName} on {TagType}. Ignoring.", key, nameof(GrpcTags));
                    break;
                default: 
                    base.SetTag(key, value);
                    break;
            }
        }

        public override void EnumerateTags<TProcessor>(ref TProcessor processor)
        {
            if (SpanKind is not null)
            {
                processor.Process(new TagItem<string>("span.kind", SpanKind, SpanKindBytes));
            }

            if (InstrumentationName is not null)
            {
                processor.Process(new TagItem<string>("component", InstrumentationName, InstrumentationNameBytes));
            }

            if (MethodKind is not null)
            {
                processor.Process(new TagItem<string>("grpc.method.kind", MethodKind, MethodKindBytes));
            }

            if (MethodName is not null)
            {
                processor.Process(new TagItem<string>("grpc.method.name", MethodName, MethodNameBytes));
            }

            if (MethodPath is not null)
            {
                processor.Process(new TagItem<string>("grpc.method.path", MethodPath, MethodPathBytes));
            }

            if (MethodPackage is not null)
            {
                processor.Process(new TagItem<string>("grpc.method.package", MethodPackage, MethodPackageBytes));
            }

            if (MethodService is not null)
            {
                processor.Process(new TagItem<string>("grpc.method.service", MethodService, MethodServiceBytes));
            }

            if (StatusCode is not null)
            {
                processor.Process(new TagItem<string>("grpc.status.code", StatusCode, StatusCodeBytes));
            }

            base.EnumerateTags(ref processor);
        }

        protected override void WriteAdditionalTags(System.Text.StringBuilder sb)
        {
            if (SpanKind is not null)
            {
                sb.Append("span.kind (tag):")
                  .Append(SpanKind)
                  .Append(',');
            }

            if (InstrumentationName is not null)
            {
                sb.Append("component (tag):")
                  .Append(InstrumentationName)
                  .Append(',');
            }

            if (MethodKind is not null)
            {
                sb.Append("grpc.method.kind (tag):")
                  .Append(MethodKind)
                  .Append(',');
            }

            if (MethodName is not null)
            {
                sb.Append("grpc.method.name (tag):")
                  .Append(MethodName)
                  .Append(',');
            }

            if (MethodPath is not null)
            {
                sb.Append("grpc.method.path (tag):")
                  .Append(MethodPath)
                  .Append(',');
            }

            if (MethodPackage is not null)
            {
                sb.Append("grpc.method.package (tag):")
                  .Append(MethodPackage)
                  .Append(',');
            }

            if (MethodService is not null)
            {
                sb.Append("grpc.method.service (tag):")
                  .Append(MethodService)
                  .Append(',');
            }

            if (StatusCode is not null)
            {
                sb.Append("grpc.status.code (tag):")
                  .Append(StatusCode)
                  .Append(',');
            }

            base.WriteAdditionalTags(sb);
        }
    }
}
