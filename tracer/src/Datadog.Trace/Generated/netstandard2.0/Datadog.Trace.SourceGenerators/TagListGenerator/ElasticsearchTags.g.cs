// <copyright company="Datadog">
// Unless explicitly stated otherwise all files in this repository are licensed under the Apache 2 License.
// This product includes software developed at Datadog (https://www.datadoghq.com/). Copyright 2017 Datadog, Inc.
// </copyright>
// <auto-generated/>

#nullable enable

using Datadog.Trace.Processors;
using Datadog.Trace.Tagging;
using System;

namespace Datadog.Trace.ClrProfiler.AutoInstrumentation.Elasticsearch
{
    partial class ElasticsearchTags
    {
        // SpanKindBytes = MessagePack.Serialize("span.kind");
#if NETCOREAPP
        private static ReadOnlySpan<byte> SpanKindBytes => new byte[] { 169, 115, 112, 97, 110, 46, 107, 105, 110, 100 };
#else
        private static readonly byte[] SpanKindBytes = new byte[] { 169, 115, 112, 97, 110, 46, 107, 105, 110, 100 };
#endif
        // InstrumentationNameBytes = MessagePack.Serialize("component");
#if NETCOREAPP
        private static ReadOnlySpan<byte> InstrumentationNameBytes => new byte[] { 169, 99, 111, 109, 112, 111, 110, 101, 110, 116 };
#else
        private static readonly byte[] InstrumentationNameBytes = new byte[] { 169, 99, 111, 109, 112, 111, 110, 101, 110, 116 };
#endif
        // ActionBytes = MessagePack.Serialize("elasticsearch.action");
#if NETCOREAPP
        private static ReadOnlySpan<byte> ActionBytes => new byte[] { 180, 101, 108, 97, 115, 116, 105, 99, 115, 101, 97, 114, 99, 104, 46, 97, 99, 116, 105, 111, 110 };
#else
        private static readonly byte[] ActionBytes = new byte[] { 180, 101, 108, 97, 115, 116, 105, 99, 115, 101, 97, 114, 99, 104, 46, 97, 99, 116, 105, 111, 110 };
#endif
        // MethodBytes = MessagePack.Serialize("elasticsearch.method");
#if NETCOREAPP
        private static ReadOnlySpan<byte> MethodBytes => new byte[] { 180, 101, 108, 97, 115, 116, 105, 99, 115, 101, 97, 114, 99, 104, 46, 109, 101, 116, 104, 111, 100 };
#else
        private static readonly byte[] MethodBytes = new byte[] { 180, 101, 108, 97, 115, 116, 105, 99, 115, 101, 97, 114, 99, 104, 46, 109, 101, 116, 104, 111, 100 };
#endif
        // UrlBytes = MessagePack.Serialize("elasticsearch.url");
#if NETCOREAPP
        private static ReadOnlySpan<byte> UrlBytes => new byte[] { 177, 101, 108, 97, 115, 116, 105, 99, 115, 101, 97, 114, 99, 104, 46, 117, 114, 108 };
#else
        private static readonly byte[] UrlBytes = new byte[] { 177, 101, 108, 97, 115, 116, 105, 99, 115, 101, 97, 114, 99, 104, 46, 117, 114, 108 };
#endif
        // HostBytes = MessagePack.Serialize("out.host");
#if NETCOREAPP
        private static ReadOnlySpan<byte> HostBytes => new byte[] { 168, 111, 117, 116, 46, 104, 111, 115, 116 };
#else
        private static readonly byte[] HostBytes = new byte[] { 168, 111, 117, 116, 46, 104, 111, 115, 116 };
#endif

        public override string? GetTag(string key)
        {
            return key switch
            {
                "span.kind" => SpanKind,
                "component" => InstrumentationName,
                "elasticsearch.action" => Action,
                "elasticsearch.method" => Method,
                "elasticsearch.url" => Url,
                "out.host" => Host,
                _ => base.GetTag(key),
            };
        }

        public override void SetTag(string key, string value)
        {
            switch(key)
            {
                case "elasticsearch.action": 
                    Action = value;
                    break;
                case "elasticsearch.method": 
                    Method = value;
                    break;
                case "elasticsearch.url": 
                    Url = value;
                    break;
                case "out.host": 
                    Host = value;
                    break;
                case "span.kind": 
                case "component": 
                    Logger.Value.Warning("Attempted to set readonly tag {TagName} on {TagType}. Ignoring.", key, nameof(ElasticsearchTags));
                    break;
                default: 
                    base.SetTag(key, value);
                    break;
            }
        }

        public override void EnumerateTags<TProcessor>(ref TProcessor processor)
        {
            if (SpanKind is not null)
            {
                processor.Process(new TagItem<string>("span.kind", SpanKind, SpanKindBytes));
            }

            if (InstrumentationName is not null)
            {
                processor.Process(new TagItem<string>("component", InstrumentationName, InstrumentationNameBytes));
            }

            if (Action is not null)
            {
                processor.Process(new TagItem<string>("elasticsearch.action", Action, ActionBytes));
            }

            if (Method is not null)
            {
                processor.Process(new TagItem<string>("elasticsearch.method", Method, MethodBytes));
            }

            if (Url is not null)
            {
                processor.Process(new TagItem<string>("elasticsearch.url", Url, UrlBytes));
            }

            if (Host is not null)
            {
                processor.Process(new TagItem<string>("out.host", Host, HostBytes));
            }

            base.EnumerateTags(ref processor);
        }

        protected override void WriteAdditionalTags(System.Text.StringBuilder sb)
        {
            if (SpanKind is not null)
            {
                sb.Append("span.kind (tag):")
                  .Append(SpanKind)
                  .Append(',');
            }

            if (InstrumentationName is not null)
            {
                sb.Append("component (tag):")
                  .Append(InstrumentationName)
                  .Append(',');
            }

            if (Action is not null)
            {
                sb.Append("elasticsearch.action (tag):")
                  .Append(Action)
                  .Append(',');
            }

            if (Method is not null)
            {
                sb.Append("elasticsearch.method (tag):")
                  .Append(Method)
                  .Append(',');
            }

            if (Url is not null)
            {
                sb.Append("elasticsearch.url (tag):")
                  .Append(Url)
                  .Append(',');
            }

            if (Host is not null)
            {
                sb.Append("out.host (tag):")
                  .Append(Host)
                  .Append(',');
            }

            base.WriteAdditionalTags(sb);
        }
    }
}
