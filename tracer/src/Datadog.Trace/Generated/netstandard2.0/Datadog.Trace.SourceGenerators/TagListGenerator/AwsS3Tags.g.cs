// <copyright company="Datadog">
// Unless explicitly stated otherwise all files in this repository are licensed under the Apache 2 License.
// This product includes software developed at Datadog (https://www.datadoghq.com/). Copyright 2017 Datadog, Inc.
// </copyright>
// <auto-generated/>

#nullable enable

using Datadog.Trace.Processors;
using Datadog.Trace.Tagging;
using System;

namespace Datadog.Trace.Tagging
{
    partial class AwsS3Tags
    {
        // BucketNameBytes = MessagePack.Serialize("bucketname");
        private static ReadOnlySpan<byte> BucketNameBytes => new byte[] { 170, 98, 117, 99, 107, 101, 116, 110, 97, 109, 101 };
        // ObjectKeyBytes = MessagePack.Serialize("objectkey");
        private static ReadOnlySpan<byte> ObjectKeyBytes => new byte[] { 169, 111, 98, 106, 101, 99, 116, 107, 101, 121 };
        // SpanKindBytes = MessagePack.Serialize("span.kind");
        private static ReadOnlySpan<byte> SpanKindBytes => new byte[] { 169, 115, 112, 97, 110, 46, 107, 105, 110, 100 };

        public override string? GetTag(string key)
        {
            return key switch
            {
                "bucketname" => BucketName,
                "objectkey" => ObjectKey,
                "span.kind" => SpanKind,
                _ => base.GetTag(key),
            };
        }

        public override void SetTag(string key, string value)
        {
            switch(key)
            {
                case "bucketname": 
                    BucketName = value;
                    break;
                case "objectkey": 
                    ObjectKey = value;
                    break;
                case "span.kind": 
                    Logger.Value.Warning("Attempted to set readonly tag {TagName} on {TagType}. Ignoring.", key, nameof(AwsS3Tags));
                    break;
                default: 
                    base.SetTag(key, value);
                    break;
            }
        }

        public override void EnumerateTags<TProcessor>(ref TProcessor processor)
        {
            if (BucketName is not null)
            {
                processor.Process(new TagItem<string>("bucketname", BucketName, BucketNameBytes));
            }

            if (ObjectKey is not null)
            {
                processor.Process(new TagItem<string>("objectkey", ObjectKey, ObjectKeyBytes));
            }

            if (SpanKind is not null)
            {
                processor.Process(new TagItem<string>("span.kind", SpanKind, SpanKindBytes));
            }

            base.EnumerateTags(ref processor);
        }

        protected override void WriteAdditionalTags(System.Text.StringBuilder sb)
        {
            if (BucketName is not null)
            {
                sb.Append("bucketname (tag):")
                  .Append(BucketName)
                  .Append(',');
            }

            if (ObjectKey is not null)
            {
                sb.Append("objectkey (tag):")
                  .Append(ObjectKey)
                  .Append(',');
            }

            if (SpanKind is not null)
            {
                sb.Append("span.kind (tag):")
                  .Append(SpanKind)
                  .Append(',');
            }

            base.WriteAdditionalTags(sb);
        }
    }
}
