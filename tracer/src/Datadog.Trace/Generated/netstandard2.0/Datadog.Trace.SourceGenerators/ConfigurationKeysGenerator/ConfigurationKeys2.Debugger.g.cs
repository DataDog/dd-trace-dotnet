// <copyright company="Datadog">
// Unless explicitly stated otherwise all files in this repository are licensed under the Apache 2 License.
// This product includes software developed at Datadog (https://www.datadoghq.com/). Copyright 2017 Datadog, Inc.
// </copyright>
// <auto-generated/>

#nullable enable

// This file is auto-generated from supported-configurations.json and supported-configurations-docs.yaml
// Do not edit this file directly. The source generator will regenerate it on build.
// NOTE: If you remove keys/products from the JSON, run 'dotnet clean' to remove old generated files.

namespace Datadog.Trace.Configuration;

internal static partial class ConfigurationKeys2
{
    internal static class Debugger
    {

        /// <summary>
        /// Configuration key to enable tag code origin for span.
        /// Default value is false.
        /// </summary>
        public const string CodeOriginForSpansEnabled = "DD_CODE_ORIGIN_FOR_SPANS_ENABLED";

        /// <summary>
        /// Configuration key for setting the number of frames to be tagged in exit span code origin.
        /// Default value is <c>8</c>.
        /// </summary>
        public const string CodeOriginForSpansMaxUserFrames = "DD_CODE_ORIGIN_FOR_SPANS_MAX_USER_FRAMES";

        /// <summary>
        /// Configuration key for the interval (in seconds) between sending probe statuses.
        /// Default value is 3600.
        /// </summary>
        public const string DynamicInstrumentationDiagnosticsInterval = "DD_DYNAMIC_INSTRUMENTATION_DIAGNOSTICS_INTERVAL";

        /// <summary>
        /// Configuration key for enabling or disabling Dynamic Instrumentation.
        /// Default value is false (disabled).
        /// </summary>
        public const string DynamicInstrumentationEnabled = "DD_DYNAMIC_INSTRUMENTATION_ENABLED";

        /// <summary>
        /// Configuration key for the max object depth to serialize for probe snapshots.
        /// Default value is 1.
        /// </summary>
        public const string DynamicInstrumentationMaxDepthToSerialize = "DD_DYNAMIC_INSTRUMENTATION_MAX_DEPTH_TO_SERIALIZE";

        /// <summary>
        /// Configuration key for the maximum duration (in milliseconds) to run serialization for probe snapshots.
        /// Default value is 150 ms.
        /// </summary>
        public const string DynamicInstrumentationMaxTimeToSerialize = "DD_DYNAMIC_INSTRUMENTATION_MAX_TIME_TO_SERIALIZE";

        /// <summary>
        /// Configuration key for set of identifiers that are excluded from redaction decisions.
        /// </summary>
        public const string DynamicInstrumentationRedactedExcludedIdentifiers = "DD_DYNAMIC_INSTRUMENTATION_REDACTED_EXCLUDED_IDENTIFIERS";

        /// <summary>
        /// Configuration key for set of identifiers that are used in redaction decisions.
        /// </summary>
        public const string DynamicInstrumentationRedactedIdentifiers = "DD_DYNAMIC_INSTRUMENTATION_REDACTED_IDENTIFIERS";

        /// <summary>
        /// Configuration key for set of types that are used in redaction decisions.
        /// </summary>
        public const string DynamicInstrumentationRedactedTypes = "DD_DYNAMIC_INSTRUMENTATION_REDACTED_TYPES";

        /// <summary>
        /// Configuration key for set of identifiers that are excluded from redaction decisions.
        /// </summary>
        public const string DynamicInstrumentationRedactionExcludedIdentifiers = "DD_DYNAMIC_INSTRUMENTATION_REDACTION_EXCLUDED_IDENTIFIERS";

        /// <summary>
        /// Configuration key for the maximum upload batch size.
        /// Default value is 100.
        /// </summary>
        public const string DynamicInstrumentationUploadBatchSize = "DD_DYNAMIC_INSTRUMENTATION_UPLOAD_BATCH_SIZE";

        /// <summary>
        /// Configuration key for the interval (in milliseconds) between flushing statuses.
        /// Default value is 0 (dynamic).
        /// </summary>
        public const string DynamicInstrumentationUploadFlushInterval = "DD_DYNAMIC_INSTRUMENTATION_UPLOAD_FLUSH_INTERVAL";

        /// <summary>
        /// The old configuration key for enabling or disabling Exception Replay.
        /// Default value is false (disabled).
        /// </summary>
        public const string ExceptionDebuggingEnabled = "DD_EXCEPTION_DEBUGGING_ENABLED";

        /// <summary>
        /// Configuration key to enable capturing the variables of all the frames in exception call stack.
        /// Default value is false.
        /// </summary>
        public const string ExceptionReplayCaptureFullCallstackEnabled = "DD_EXCEPTION_REPLAY_CAPTURE_FULL_CALLSTACK_ENABLED";

        /// <summary>
        /// Configuration key for the maximum number of frames in a call stack we would like to capture values for.
        /// </summary>
        public const string ExceptionReplayCaptureMaxFrames = "DD_EXCEPTION_REPLAY_CAPTURE_MAX_FRAMES";

        /// <summary>
        /// Configuration key for enabling or disabling Exception Replay.
        /// Default value is false (disabled).
        /// </summary>
        public const string ExceptionReplayEnabled = "DD_EXCEPTION_REPLAY_ENABLED";

        /// <summary>
        /// Configuration key for setting the maximum number of exceptions to be analyzed by Exception Replay within a 1-second time interval.
        /// Default value is <c>100</c>.
        /// </summary>
        public const string ExceptionReplayMaxExceptionAnalysisLimit = "DD_EXCEPTION_REPLAY_MAX_EXCEPTION_ANALYSIS_LIMIT";

        /// <summary>
        /// Configuration key for the interval used to track exceptions
        /// Default value is <c>1</c>h.
        /// </summary>
        public const string ExceptionReplayRateLimitSeconds = "DD_EXCEPTION_REPLAY_RATE_LIMIT_SECONDS";

        /// <summary>
        /// Configuration key for the maximum symbol size to upload (in bytes).
        /// Default value is 1 mb.
        /// </summary>
        public const string SymbolDatabaseBatchSizeBytes = "DD_SYMBOL_DATABASE_BATCH_SIZE_BYTES";

        /// <summary>
        /// Configuration key for enabling or disabling compression for symbols payload.
        /// Default value is true (enabled).
        /// </summary>
        public const string SymbolDatabaseCompressionEnabled = "DD_SYMBOL_DATABASE_COMPRESSION_ENABLED";

        /// <summary>
        /// Configuration key for a separated comma list of libraries to exclude in the 3rd party detection
        /// Default value is empty.
        /// </summary>
        public const string SymbolDatabaseThirdPartyDetectionExcludes = "DD_SYMBOL_DATABASE_THIRD_PARTY_DETECTION_EXCLUDES";

        /// <summary>
        /// Configuration key for a separated comma list of libraries to include in the 3rd party detection
        /// Default value is empty.
        /// </summary>
        public const string SymbolDatabaseThirdPartyDetectionIncludes = "DD_SYMBOL_DATABASE_THIRD_PARTY_DETECTION_INCLUDES";

        /// <summary>
        /// Configuration key for allowing upload of symbol data (such as method names, parameter names, etc) to Datadog.
        /// Default value is true (enabled).
        /// </summary>
        public const string SymbolDatabaseUploadEnabled = "DD_SYMBOL_DATABASE_UPLOAD_ENABLED";

        /// <summary>
        /// Configuration key for a separated comma list of libraries to exclude for the 3rd party detection
        /// Default value is empty.
        /// </summary>
        public const string ThirdPartyDetectionExcludes = "DD_THIRD_PARTY_DETECTION_EXCLUDES";

        /// <summary>
        /// Configuration key for a separated comma list of libraries to include in the 3rd party detection
        /// Default value is empty.
        /// </summary>
        public const string ThirdPartyDetectionIncludes = "DD_THIRD_PARTY_DETECTION_INCLUDES";
    }
}
