// <copyright company="Datadog">
// Unless explicitly stated otherwise all files in this repository are licensed under the Apache 2 License.
// This product includes software developed at Datadog (https://www.datadoghq.com/). Copyright 2017 Datadog, Inc.
// </copyright>
// <auto-generated/>

#nullable enable

using System.Threading;

namespace Datadog.Trace.Telemetry;
internal partial class CiVisibilityMetricsTelemetryCollector
{
    private const int DistributionCIVisibilityLength = 28;

    /// <summary>
    /// Creates the buffer for the <see cref="Datadog.Trace.Telemetry.Metrics.DistributionCIVisibility" /> values.
    /// </summary>
    private static AggregatedDistribution[] GetDistributionCIVisibilityBuffer()
        => new AggregatedDistribution[]
        {
            // endpoint_payload.bytes, index = 0
            new(new[] { "endpoint:test_cycle" }),
            new(new[] { "endpoint:code_coverage" }),
            // endpoint_payload.requests_ms, index = 2
            new(new[] { "endpoint:test_cycle" }),
            new(new[] { "endpoint:code_coverage" }),
            // endpoint_payload.events_count, index = 4
            new(new[] { "endpoint:test_cycle" }),
            new(new[] { "endpoint:code_coverage" }),
            // endpoint_payload.events_serialization_ms, index = 6
            new(new[] { "endpoint:test_cycle" }),
            new(new[] { "endpoint:code_coverage" }),
            // git.command_ms, index = 8
            new(new[] { "command:get_repository" }),
            new(new[] { "command:get_branch" }),
            new(new[] { "command:get_remote" }),
            new(new[] { "command:get_head" }),
            new(new[] { "command:check_shallow" }),
            new(new[] { "command:unshallow" }),
            new(new[] { "command:get_local_commits" }),
            new(new[] { "command:get_objects" }),
            new(new[] { "command:pack_objects" }),
            // git_requests.search_commits_ms, index = 17
            new(null),
            // git_requests.objects_pack_ms, index = 18
            new(null),
            // git_requests.objects_pack_bytes, index = 19
            new(null),
            // git_requests.objects_pack_files, index = 20
            new(null),
            // git_requests.settings_ms, index = 21
            new(null),
            // itr_skippable_tests.request_ms, index = 22
            new(null),
            // itr_skippable_tests.response_bytes, index = 23
            new(null),
            // code_coverage.files, index = 24
            new(null),
            // early_flake_detection.request_ms, index = 25
            new(null),
            // early_flake_detection.response_bytes, index = 26
            new(null),
            // early_flake_detection.response_tests, index = 27
            new(null),
        };

    /// <summary>
    /// Gets an array of metric counts, indexed by integer value of the <see cref="Datadog.Trace.Telemetry.Metrics.DistributionCIVisibility" />.
    /// Each value represents the number of unique entries in the buffer returned by <see cref="GetDistributionCIVisibilityBuffer()" />
    /// It is equal to the cardinality of the tag combinations (or 1 if there are no tags)
    /// </summary>
    private static int[] DistributionCIVisibilityEntryCounts { get; }
        = new int[]{ 2, 2, 2, 2, 9, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, };

    public void RecordDistributionCIVisibilityEndpointPayloadBytes(Datadog.Trace.Telemetry.Metrics.MetricTags.CIVisibilityEndpoints tag, double value)
    {
        var index = 0 + (int)tag;
        _buffer.DistributionCIVisibility[index].TryEnqueue(value);
    }

    public void RecordDistributionCIVisibilityEndpointPayloadRequestsMs(Datadog.Trace.Telemetry.Metrics.MetricTags.CIVisibilityEndpoints tag, double value)
    {
        var index = 2 + (int)tag;
        _buffer.DistributionCIVisibility[index].TryEnqueue(value);
    }

    public void RecordDistributionCIVisibilityEndpointPayloadEventsCount(Datadog.Trace.Telemetry.Metrics.MetricTags.CIVisibilityEndpoints tag, double value)
    {
        var index = 4 + (int)tag;
        _buffer.DistributionCIVisibility[index].TryEnqueue(value);
    }

    public void RecordDistributionCIVisibilityEndpointEventsSerializationMs(Datadog.Trace.Telemetry.Metrics.MetricTags.CIVisibilityEndpoints tag, double value)
    {
        var index = 6 + (int)tag;
        _buffer.DistributionCIVisibility[index].TryEnqueue(value);
    }

    public void RecordDistributionCIVisibilityGitCommandMs(Datadog.Trace.Telemetry.Metrics.MetricTags.CIVisibilityCommands tag, double value)
    {
        var index = 8 + (int)tag;
        _buffer.DistributionCIVisibility[index].TryEnqueue(value);
    }

    public void RecordDistributionCIVisibilityGitRequestsSearchCommitsMs(double value)
    {
        _buffer.DistributionCIVisibility[17].TryEnqueue(value);
    }

    public void RecordDistributionCIVisibilityGitRequestsObjectsPackMs(double value)
    {
        _buffer.DistributionCIVisibility[18].TryEnqueue(value);
    }

    public void RecordDistributionCIVisibilityGitRequestsObjectsPackBytes(double value)
    {
        _buffer.DistributionCIVisibility[19].TryEnqueue(value);
    }

    public void RecordDistributionCIVisibilityGitRequestsObjectsPackFiles(double value)
    {
        _buffer.DistributionCIVisibility[20].TryEnqueue(value);
    }

    public void RecordDistributionCIVisibilityGitRequestsSettingsMs(double value)
    {
        _buffer.DistributionCIVisibility[21].TryEnqueue(value);
    }

    public void RecordDistributionCIVisibilityITRSkippableTestsRequestMs(double value)
    {
        _buffer.DistributionCIVisibility[22].TryEnqueue(value);
    }

    public void RecordDistributionCIVisibilityITRSkippableTestsResponseBytes(double value)
    {
        _buffer.DistributionCIVisibility[23].TryEnqueue(value);
    }

    public void RecordDistributionCIVisibilityCodeCoverageFiles(double value)
    {
        _buffer.DistributionCIVisibility[24].TryEnqueue(value);
    }

    public void RecordDistributionCIVisibilityEarlyFlakeDetectionRequestMs(double value)
    {
        _buffer.DistributionCIVisibility[25].TryEnqueue(value);
    }

    public void RecordDistributionCIVisibilityEarlyFlakeDetectionResponseBytes(double value)
    {
        _buffer.DistributionCIVisibility[26].TryEnqueue(value);
    }

    public void RecordDistributionCIVisibilityEarlyFlakeDetectionResponseTests(double value)
    {
        _buffer.DistributionCIVisibility[27].TryEnqueue(value);
    }
}