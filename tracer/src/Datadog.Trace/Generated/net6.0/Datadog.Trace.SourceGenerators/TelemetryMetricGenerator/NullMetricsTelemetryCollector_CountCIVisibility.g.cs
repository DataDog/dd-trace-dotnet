// <copyright company="Datadog">
// Unless explicitly stated otherwise all files in this repository are licensed under the Apache 2 License.
// This product includes software developed at Datadog (https://www.datadoghq.com/). Copyright 2017 Datadog, Inc.
// </copyright>
// <auto-generated/>

#nullable enable

using System.Threading;

namespace Datadog.Trace.Internal.Telemetry;
internal partial class NullMetricsTelemetryCollector
{

    public void RecordCountCIVisibilityEventCreated(Datadog.Trace.Internal.Telemetry.Metrics.MetricTags.CIVisibilityTestFramework tag1, Datadog.Trace.Internal.Telemetry.Metrics.MetricTags.CIVisibilityTestingEventTypeWithCodeOwnerAndSupportedCiAndBenchmark tag2, int increment = 1)
    {
    }

    public void RecordCountCIVisibilityEventFinished(Datadog.Trace.Internal.Telemetry.Metrics.MetricTags.CIVisibilityTestFramework tag1, Datadog.Trace.Internal.Telemetry.Metrics.MetricTags.CIVisibilityTestingEventTypeWithCodeOwnerAndSupportedCiAndBenchmarkAndEarlyFlakeDetectionAndRum tag2, int increment = 1)
    {
    }

    public void RecordCountCIVisibilityCodeCoverageStarted(Datadog.Trace.Internal.Telemetry.Metrics.MetricTags.CIVisibilityTestFramework tag1, Datadog.Trace.Internal.Telemetry.Metrics.MetricTags.CIVisibilityCoverageLibrary tag2, int increment = 1)
    {
    }

    public void RecordCountCIVisibilityCodeCoverageFinished(Datadog.Trace.Internal.Telemetry.Metrics.MetricTags.CIVisibilityTestFramework tag1, Datadog.Trace.Internal.Telemetry.Metrics.MetricTags.CIVisibilityCoverageLibrary tag2, int increment = 1)
    {
    }

    public void RecordCountCIVisibilityManualApiEvent(Datadog.Trace.Internal.Telemetry.Metrics.MetricTags.CIVisibilityTestingEventType tag, int increment = 1)
    {
    }

    public void RecordCountCIVisibilityEventsEnqueueForSerialization(int increment = 1)
    {
    }

    public void RecordCountCIVisibilityEndpointPayloadRequests(Datadog.Trace.Internal.Telemetry.Metrics.MetricTags.CIVisibilityEndpointAndCompression tag, int increment = 1)
    {
    }

    public void RecordCountCIVisibilityEndpointPayloadRequestsErrors(Datadog.Trace.Internal.Telemetry.Metrics.MetricTags.CIVisibilityEndpoints tag1, Datadog.Trace.Internal.Telemetry.Metrics.MetricTags.CIVisibilityErrorType tag2, int increment = 1)
    {
    }

    public void RecordCountCIVisibilityEndpointPayloadDropped(Datadog.Trace.Internal.Telemetry.Metrics.MetricTags.CIVisibilityEndpoints tag, int increment = 1)
    {
    }

    public void RecordCountCIVisibilityGitCommand(Datadog.Trace.Internal.Telemetry.Metrics.MetricTags.CIVisibilityCommands tag, int increment = 1)
    {
    }

    public void RecordCountCIVisibilityGitCommandErrors(Datadog.Trace.Internal.Telemetry.Metrics.MetricTags.CIVisibilityCommands tag1, Datadog.Trace.Internal.Telemetry.Metrics.MetricTags.CIVisibilityExitCodes tag2, int increment = 1)
    {
    }

    public void RecordCountCIVisibilityGitRequestsSearchCommits(Datadog.Trace.Internal.Telemetry.Metrics.MetricTags.CIVisibilityRequestCompressed tag, int increment = 1)
    {
    }

    public void RecordCountCIVisibilityGitRequestsSearchCommitsErrors(Datadog.Trace.Internal.Telemetry.Metrics.MetricTags.CIVisibilityErrorType tag, int increment = 1)
    {
    }

    public void RecordCountCIVisibilityGitRequestsObjectsPack(Datadog.Trace.Internal.Telemetry.Metrics.MetricTags.CIVisibilityRequestCompressed tag, int increment = 1)
    {
    }

    public void RecordCountCIVisibilityGitRequestsObjectsPackErrors(Datadog.Trace.Internal.Telemetry.Metrics.MetricTags.CIVisibilityErrorType tag, int increment = 1)
    {
    }

    public void RecordCountCIVisibilityGitRequestsSettings(Datadog.Trace.Internal.Telemetry.Metrics.MetricTags.CIVisibilityRequestCompressed tag, int increment = 1)
    {
    }

    public void RecordCountCIVisibilityGitRequestsSettingsErrors(Datadog.Trace.Internal.Telemetry.Metrics.MetricTags.CIVisibilityErrorType tag, int increment = 1)
    {
    }

    public void RecordCountCIVisibilityGitRequestsSettingsResponse(Datadog.Trace.Internal.Telemetry.Metrics.MetricTags.CIVisibilityITRSettingsResponse tag, int increment = 1)
    {
    }

    public void RecordCountCIVisibilityITRSkippableTestsRequest(Datadog.Trace.Internal.Telemetry.Metrics.MetricTags.CIVisibilityRequestCompressed tag, int increment = 1)
    {
    }

    public void RecordCountCIVisibilityITRSkippableTestsRequestErrors(Datadog.Trace.Internal.Telemetry.Metrics.MetricTags.CIVisibilityErrorType tag, int increment = 1)
    {
    }

    public void RecordCountCIVisibilityITRSkippableTestsResponseTests(int increment = 1)
    {
    }

    public void RecordCountCIVisibilityITRSkippableTestsResponseSuites(int increment = 1)
    {
    }

    public void RecordCountCIVisibilityITRSkipped(Datadog.Trace.Internal.Telemetry.Metrics.MetricTags.CIVisibilityTestingEventType tag, int increment = 1)
    {
    }

    public void RecordCountCIVisibilityITRUnskippable(Datadog.Trace.Internal.Telemetry.Metrics.MetricTags.CIVisibilityTestingEventType tag, int increment = 1)
    {
    }

    public void RecordCountCIVisibilityITRForcedRun(Datadog.Trace.Internal.Telemetry.Metrics.MetricTags.CIVisibilityTestingEventType tag, int increment = 1)
    {
    }

    public void RecordCountCIVisibilityCodeCoverageIsEmpty(int increment = 1)
    {
    }

    public void RecordCountCIVisibilityCodeCoverageErrors(int increment = 1)
    {
    }

    public void RecordCountCIVisibilityEarlyFlakeDetectionRequest(Datadog.Trace.Internal.Telemetry.Metrics.MetricTags.CIVisibilityRequestCompressed tag, int increment = 1)
    {
    }

    public void RecordCountCIVisibilityEarlyFlakeDetectionRequestErrors(Datadog.Trace.Internal.Telemetry.Metrics.MetricTags.CIVisibilityErrorType tag, int increment = 1)
    {
    }
}