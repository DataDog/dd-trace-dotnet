// <copyright company="Datadog">
// Unless explicitly stated otherwise all files in this repository are licensed under the Apache 2 License.
// This product includes software developed at Datadog (https://www.datadoghq.com/). Copyright 2017 Datadog, Inc.
// </copyright>
// <auto-generated/>

#nullable enable

using Datadog.Trace.Processors;
using Datadog.Trace.Tagging;
using System;

namespace Datadog.Trace.Tagging
{
    partial class AzureServiceBusTags
    {
        // AnalyticsSampleRateBytes = MessagePack.Serialize("_dd1.sr.eausr");
        private static ReadOnlySpan<byte> AnalyticsSampleRateBytes => new byte[] { 173, 95, 100, 100, 49, 46, 115, 114, 46, 101, 97, 117, 115, 114 };
        // MessageQueueTimeMsBytes = MessagePack.Serialize("message.queue_time_ms");
        private static ReadOnlySpan<byte> MessageQueueTimeMsBytes => new byte[] { 181, 109, 101, 115, 115, 97, 103, 101, 46, 113, 117, 101, 117, 101, 95, 116, 105, 109, 101, 95, 109, 115 };
        // InstrumentationNameBytes = MessagePack.Serialize("component");
        private static ReadOnlySpan<byte> InstrumentationNameBytes => new byte[] { 169, 99, 111, 109, 112, 111, 110, 101, 110, 116 };
        // MessagingSourceNameBytes = MessagePack.Serialize("messaging.source.name");
        private static ReadOnlySpan<byte> MessagingSourceNameBytes => new byte[] { 181, 109, 101, 115, 115, 97, 103, 105, 110, 103, 46, 115, 111, 117, 114, 99, 101, 46, 110, 97, 109, 101 };
        // MessagingDestinationNameBytes = MessagePack.Serialize("messaging.destination.name");
        private static ReadOnlySpan<byte> MessagingDestinationNameBytes => new byte[] { 186, 109, 101, 115, 115, 97, 103, 105, 110, 103, 46, 100, 101, 115, 116, 105, 110, 97, 116, 105, 111, 110, 46, 110, 97, 109, 101 };
        // LegacyMessageBusDestinationBytes = MessagePack.Serialize("message_bus.destination");
        private static ReadOnlySpan<byte> LegacyMessageBusDestinationBytes => new byte[] { 183, 109, 101, 115, 115, 97, 103, 101, 95, 98, 117, 115, 46, 100, 101, 115, 116, 105, 110, 97, 116, 105, 111, 110 };
        // NetworkDestinationNameBytes = MessagePack.Serialize("network.destination.name");
        private static ReadOnlySpan<byte> NetworkDestinationNameBytes => new byte[] { 184, 110, 101, 116, 119, 111, 114, 107, 46, 100, 101, 115, 116, 105, 110, 97, 116, 105, 111, 110, 46, 110, 97, 109, 101 };
        // NetworkDestinationPortBytes = MessagePack.Serialize("network.destination.port");
        private static ReadOnlySpan<byte> NetworkDestinationPortBytes => new byte[] { 184, 110, 101, 116, 119, 111, 114, 107, 46, 100, 101, 115, 116, 105, 110, 97, 116, 105, 111, 110, 46, 112, 111, 114, 116 };
        // ServerAddressBytes = MessagePack.Serialize("server.address");
        private static ReadOnlySpan<byte> ServerAddressBytes => new byte[] { 174, 115, 101, 114, 118, 101, 114, 46, 97, 100, 100, 114, 101, 115, 115 };

        public override string? GetTag(string key)
        {
            return key switch
            {
                "component" => InstrumentationName,
                "messaging.source.name" => MessagingSourceName,
                "messaging.destination.name" => MessagingDestinationName,
                "message_bus.destination" => LegacyMessageBusDestination,
                "network.destination.name" => NetworkDestinationName,
                "network.destination.port" => NetworkDestinationPort,
                "server.address" => ServerAddress,
                _ => base.GetTag(key),
            };
        }

        public override void SetTag(string key, string value)
        {
            switch(key)
            {
                case "component": 
                    InstrumentationName = value;
                    break;
                case "messaging.source.name": 
                    MessagingSourceName = value;
                    break;
                case "messaging.destination.name": 
                    MessagingDestinationName = value;
                    break;
                case "message_bus.destination": 
                    LegacyMessageBusDestination = value;
                    break;
                case "network.destination.name": 
                    NetworkDestinationName = value;
                    break;
                case "network.destination.port": 
                    NetworkDestinationPort = value;
                    break;
                case "server.address": 
                    ServerAddress = value;
                    break;
                default: 
                    base.SetTag(key, value);
                    break;
            }
        }

        public override void EnumerateTags<TProcessor>(ref TProcessor processor)
        {
            if (InstrumentationName is not null)
            {
                processor.Process(new TagItem<string>("component", InstrumentationName, InstrumentationNameBytes));
            }

            if (MessagingSourceName is not null)
            {
                processor.Process(new TagItem<string>("messaging.source.name", MessagingSourceName, MessagingSourceNameBytes));
            }

            if (MessagingDestinationName is not null)
            {
                processor.Process(new TagItem<string>("messaging.destination.name", MessagingDestinationName, MessagingDestinationNameBytes));
            }

            if (LegacyMessageBusDestination is not null)
            {
                processor.Process(new TagItem<string>("message_bus.destination", LegacyMessageBusDestination, LegacyMessageBusDestinationBytes));
            }

            if (NetworkDestinationName is not null)
            {
                processor.Process(new TagItem<string>("network.destination.name", NetworkDestinationName, NetworkDestinationNameBytes));
            }

            if (NetworkDestinationPort is not null)
            {
                processor.Process(new TagItem<string>("network.destination.port", NetworkDestinationPort, NetworkDestinationPortBytes));
            }

            if (ServerAddress is not null)
            {
                processor.Process(new TagItem<string>("server.address", ServerAddress, ServerAddressBytes));
            }

            base.EnumerateTags(ref processor);
        }

        protected override void WriteAdditionalTags(System.Text.StringBuilder sb)
        {
            if (InstrumentationName is not null)
            {
                sb.Append("component (tag):")
                  .Append(InstrumentationName)
                  .Append(',');
            }

            if (MessagingSourceName is not null)
            {
                sb.Append("messaging.source.name (tag):")
                  .Append(MessagingSourceName)
                  .Append(',');
            }

            if (MessagingDestinationName is not null)
            {
                sb.Append("messaging.destination.name (tag):")
                  .Append(MessagingDestinationName)
                  .Append(',');
            }

            if (LegacyMessageBusDestination is not null)
            {
                sb.Append("message_bus.destination (tag):")
                  .Append(LegacyMessageBusDestination)
                  .Append(',');
            }

            if (NetworkDestinationName is not null)
            {
                sb.Append("network.destination.name (tag):")
                  .Append(NetworkDestinationName)
                  .Append(',');
            }

            if (NetworkDestinationPort is not null)
            {
                sb.Append("network.destination.port (tag):")
                  .Append(NetworkDestinationPort)
                  .Append(',');
            }

            if (ServerAddress is not null)
            {
                sb.Append("server.address (tag):")
                  .Append(ServerAddress)
                  .Append(',');
            }

            base.WriteAdditionalTags(sb);
        }
        public override double? GetMetric(string key)
        {
            return key switch
            {
                "_dd1.sr.eausr" => AnalyticsSampleRate,
                "message.queue_time_ms" => MessageQueueTimeMs,
                _ => base.GetMetric(key),
            };
        }

        public override void SetMetric(string key, double? value)
        {
            switch(key)
            {
                case "_dd1.sr.eausr": 
                    AnalyticsSampleRate = value;
                    break;
                case "message.queue_time_ms": 
                    MessageQueueTimeMs = value;
                    break;
                default: 
                    base.SetMetric(key, value);
                    break;
            }
        }

        public override void EnumerateMetrics<TProcessor>(ref TProcessor processor)
        {
            if (AnalyticsSampleRate is not null)
            {
                processor.Process(new TagItem<double>("_dd1.sr.eausr", AnalyticsSampleRate.Value, AnalyticsSampleRateBytes));
            }

            if (MessageQueueTimeMs is not null)
            {
                processor.Process(new TagItem<double>("message.queue_time_ms", MessageQueueTimeMs.Value, MessageQueueTimeMsBytes));
            }

            base.EnumerateMetrics(ref processor);
        }

        protected override void WriteAdditionalMetrics(System.Text.StringBuilder sb)
        {
            if (AnalyticsSampleRate is not null)
            {
                sb.Append("_dd1.sr.eausr (metric):")
                  .Append(AnalyticsSampleRate.Value)
                  .Append(',');
            }

            if (MessageQueueTimeMs is not null)
            {
                sb.Append("message.queue_time_ms (metric):")
                  .Append(MessageQueueTimeMs.Value)
                  .Append(',');
            }

            base.WriteAdditionalMetrics(sb);
        }
    }
}
