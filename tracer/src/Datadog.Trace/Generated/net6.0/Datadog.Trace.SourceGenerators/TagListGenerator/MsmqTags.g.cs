// <copyright company="Datadog">
// Unless explicitly stated otherwise all files in this repository are licensed under the Apache 2 License.
// This product includes software developed at Datadog (https://www.datadoghq.com/). Copyright 2017 Datadog, Inc.
// </copyright>
// <auto-generated/>

#nullable enable

using Datadog.Trace.Processors;
using Datadog.Trace.Tagging;
using System;

namespace Datadog.Trace.Tagging
{
    partial class MsmqTags
    {
        // CommandBytes = MessagePack.Serialize("msmq.command");
        private static ReadOnlySpan<byte> CommandBytes => new byte[] { 172, 109, 115, 109, 113, 46, 99, 111, 109, 109, 97, 110, 100 };
        // SpanKindBytes = MessagePack.Serialize("span.kind");
        private static ReadOnlySpan<byte> SpanKindBytes => new byte[] { 169, 115, 112, 97, 110, 46, 107, 105, 110, 100 };
        // InstrumentationNameBytes = MessagePack.Serialize("component");
        private static ReadOnlySpan<byte> InstrumentationNameBytes => new byte[] { 169, 99, 111, 109, 112, 111, 110, 101, 110, 116 };
        // HostBytes = MessagePack.Serialize("out.host");
        private static ReadOnlySpan<byte> HostBytes => new byte[] { 168, 111, 117, 116, 46, 104, 111, 115, 116 };
        // PathBytes = MessagePack.Serialize("msmq.queue.path");
        private static ReadOnlySpan<byte> PathBytes => new byte[] { 175, 109, 115, 109, 113, 46, 113, 117, 101, 117, 101, 46, 112, 97, 116, 104 };
        // MessageWithTransactionBytes = MessagePack.Serialize("msmq.message.transactional");
        private static ReadOnlySpan<byte> MessageWithTransactionBytes => new byte[] { 186, 109, 115, 109, 113, 46, 109, 101, 115, 115, 97, 103, 101, 46, 116, 114, 97, 110, 115, 97, 99, 116, 105, 111, 110, 97, 108 };
        // IsTransactionalQueueBytes = MessagePack.Serialize("msmq.queue.transactional");
        private static ReadOnlySpan<byte> IsTransactionalQueueBytes => new byte[] { 184, 109, 115, 109, 113, 46, 113, 117, 101, 117, 101, 46, 116, 114, 97, 110, 115, 97, 99, 116, 105, 111, 110, 97, 108 };

        public override string? GetTag(string key)
        {
            return key switch
            {
                "msmq.command" => Command,
                "span.kind" => SpanKind,
                "component" => InstrumentationName,
                "out.host" => Host,
                "msmq.queue.path" => Path,
                "msmq.message.transactional" => MessageWithTransaction,
                "msmq.queue.transactional" => IsTransactionalQueue,
                _ => base.GetTag(key),
            };
        }

        public override void SetTag(string key, string value)
        {
            switch(key)
            {
                case "msmq.command": 
                    Command = value;
                    break;
                case "out.host": 
                    Host = value;
                    break;
                case "msmq.queue.path": 
                    Path = value;
                    break;
                case "msmq.message.transactional": 
                    MessageWithTransaction = value;
                    break;
                case "msmq.queue.transactional": 
                    IsTransactionalQueue = value;
                    break;
                case "span.kind": 
                case "component": 
                    Logger.Value.Warning("Attempted to set readonly tag {TagName} on {TagType}. Ignoring.", key, nameof(MsmqTags));
                    break;
                default: 
                    base.SetTag(key, value);
                    break;
            }
        }

        public override void EnumerateTags<TProcessor>(ref TProcessor processor)
        {
            if (Command is not null)
            {
                processor.Process(new TagItem<string>("msmq.command", Command, CommandBytes));
            }

            if (SpanKind is not null)
            {
                processor.Process(new TagItem<string>("span.kind", SpanKind, SpanKindBytes));
            }

            if (InstrumentationName is not null)
            {
                processor.Process(new TagItem<string>("component", InstrumentationName, InstrumentationNameBytes));
            }

            if (Host is not null)
            {
                processor.Process(new TagItem<string>("out.host", Host, HostBytes));
            }

            if (Path is not null)
            {
                processor.Process(new TagItem<string>("msmq.queue.path", Path, PathBytes));
            }

            if (MessageWithTransaction is not null)
            {
                processor.Process(new TagItem<string>("msmq.message.transactional", MessageWithTransaction, MessageWithTransactionBytes));
            }

            if (IsTransactionalQueue is not null)
            {
                processor.Process(new TagItem<string>("msmq.queue.transactional", IsTransactionalQueue, IsTransactionalQueueBytes));
            }

            base.EnumerateTags(ref processor);
        }

        protected override void WriteAdditionalTags(System.Text.StringBuilder sb)
        {
            if (Command is not null)
            {
                sb.Append("msmq.command (tag):")
                  .Append(Command)
                  .Append(',');
            }

            if (SpanKind is not null)
            {
                sb.Append("span.kind (tag):")
                  .Append(SpanKind)
                  .Append(',');
            }

            if (InstrumentationName is not null)
            {
                sb.Append("component (tag):")
                  .Append(InstrumentationName)
                  .Append(',');
            }

            if (Host is not null)
            {
                sb.Append("out.host (tag):")
                  .Append(Host)
                  .Append(',');
            }

            if (Path is not null)
            {
                sb.Append("msmq.queue.path (tag):")
                  .Append(Path)
                  .Append(',');
            }

            if (MessageWithTransaction is not null)
            {
                sb.Append("msmq.message.transactional (tag):")
                  .Append(MessageWithTransaction)
                  .Append(',');
            }

            if (IsTransactionalQueue is not null)
            {
                sb.Append("msmq.queue.transactional (tag):")
                  .Append(IsTransactionalQueue)
                  .Append(',');
            }

            base.WriteAdditionalTags(sb);
        }
    }
}
