// <auto-generated/>
#nullable enable

using Datadog.Trace.Processors;
using Datadog.Trace.Tagging;

namespace Datadog.Trace.ClrProfiler.AutoInstrumentation.MongoDb
{
    partial class MongoDbTags
    {
        // SpanKind => span.kind
        private static readonly byte[] SpanKindBytes = new byte[] { 115, 112, 97, 110, 46, 107, 105, 110, 100 };
        // InstrumentationName => component
        private static readonly byte[] InstrumentationNameBytes = new byte[] { 99, 111, 109, 112, 111, 110, 101, 110, 116 };
        // DbName => db.name
        private static readonly byte[] DbNameBytes = new byte[] { 100, 98, 46, 110, 97, 109, 101 };
        // Query => mongodb.query
        private static readonly byte[] QueryBytes = new byte[] { 109, 111, 110, 103, 111, 100, 98, 46, 113, 117, 101, 114, 121 };
        // Collection => mongodb.collection
        private static readonly byte[] CollectionBytes = new byte[] { 109, 111, 110, 103, 111, 100, 98, 46, 99, 111, 108, 108, 101, 99, 116, 105, 111, 110 };
        // Host => out.host
        private static readonly byte[] HostBytes = new byte[] { 111, 117, 116, 46, 104, 111, 115, 116 };
        // Port => out.port
        private static readonly byte[] PortBytes = new byte[] { 111, 117, 116, 46, 112, 111, 114, 116 };

        public override string? GetTag(string key)
        {
            return key switch
            {
                "span.kind" => SpanKind,
                "component" => InstrumentationName,
                "db.name" => DbName,
                "mongodb.query" => Query,
                "mongodb.collection" => Collection,
                "out.host" => Host,
                "out.port" => Port,
                _ => base.GetTag(key),
            };
        }

        public override void SetTag(string key, string value)
        {
            switch(key)
            {
                case "db.name": 
                    DbName = value;
                    break;
                case "mongodb.query": 
                    Query = value;
                    break;
                case "mongodb.collection": 
                    Collection = value;
                    break;
                case "out.host": 
                    Host = value;
                    break;
                case "out.port": 
                    Port = value;
                    break;
                default: 
                    base.SetTag(key, value);
                    break;
            }
        }

        public override void EnumerateTags<TProcessor>(TProcessor processor)
        {
            if (SpanKind is not null)
            {
                processor.Process(new TagItem<string>("span.kind", SpanKind, SpanKindBytes));
            }

            if (InstrumentationName is not null)
            {
                processor.Process(new TagItem<string>("component", InstrumentationName, InstrumentationNameBytes));
            }

            if (DbName is not null)
            {
                processor.Process(new TagItem<string>("db.name", DbName, DbNameBytes));
            }

            if (Query is not null)
            {
                processor.Process(new TagItem<string>("mongodb.query", Query, QueryBytes));
            }

            if (Collection is not null)
            {
                processor.Process(new TagItem<string>("mongodb.collection", Collection, CollectionBytes));
            }

            if (Host is not null)
            {
                processor.Process(new TagItem<string>("out.host", Host, HostBytes));
            }

            if (Port is not null)
            {
                processor.Process(new TagItem<string>("out.port", Port, PortBytes));
            }

            base.EnumerateTags(processor);
        }

        protected override int WriteAdditionalTags(ref byte[] bytes, ref int offset, ITagProcessor[] tagProcessors)
        {
            var count = 0;
            if (SpanKind is not null)
            {
                count++;
                WriteTag(ref bytes, ref offset, SpanKindBytes, SpanKind, tagProcessors);
            }

            if (InstrumentationName is not null)
            {
                count++;
                WriteTag(ref bytes, ref offset, InstrumentationNameBytes, InstrumentationName, tagProcessors);
            }

            if (DbName is not null)
            {
                count++;
                WriteTag(ref bytes, ref offset, DbNameBytes, DbName, tagProcessors);
            }

            if (Query is not null)
            {
                count++;
                WriteTag(ref bytes, ref offset, QueryBytes, Query, tagProcessors);
            }

            if (Collection is not null)
            {
                count++;
                WriteTag(ref bytes, ref offset, CollectionBytes, Collection, tagProcessors);
            }

            if (Host is not null)
            {
                count++;
                WriteTag(ref bytes, ref offset, HostBytes, Host, tagProcessors);
            }

            if (Port is not null)
            {
                count++;
                WriteTag(ref bytes, ref offset, PortBytes, Port, tagProcessors);
            }

            return count + base.WriteAdditionalTags(ref bytes, ref offset, tagProcessors);
        }

        protected override void WriteAdditionalTags(System.Text.StringBuilder sb)
        {
            if (SpanKind is not null)
            {
                sb.Append("span.kind (tag):")
                  .Append(SpanKind)
                  .Append(',');
            }

            if (InstrumentationName is not null)
            {
                sb.Append("component (tag):")
                  .Append(InstrumentationName)
                  .Append(',');
            }

            if (DbName is not null)
            {
                sb.Append("db.name (tag):")
                  .Append(DbName)
                  .Append(',');
            }

            if (Query is not null)
            {
                sb.Append("mongodb.query (tag):")
                  .Append(Query)
                  .Append(',');
            }

            if (Collection is not null)
            {
                sb.Append("mongodb.collection (tag):")
                  .Append(Collection)
                  .Append(',');
            }

            if (Host is not null)
            {
                sb.Append("out.host (tag):")
                  .Append(Host)
                  .Append(',');
            }

            if (Port is not null)
            {
                sb.Append("out.port (tag):")
                  .Append(Port)
                  .Append(',');
            }

            base.WriteAdditionalTags(sb);
        }
    }
}
