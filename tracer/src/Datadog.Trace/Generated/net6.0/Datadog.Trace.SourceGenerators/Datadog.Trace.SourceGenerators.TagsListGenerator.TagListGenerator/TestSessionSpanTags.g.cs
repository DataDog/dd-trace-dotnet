// <auto-generated/>
#nullable enable

using Datadog.Trace.Processors;
using Datadog.Trace.Tagging;

namespace Datadog.Trace.Ci.Tagging
{
    partial class TestSessionSpanTags
    {
        // CommandBytes = System.Text.Encoding.UTF8.GetBytes("test.command");
        private static readonly byte[] CommandBytes = new byte[] { 116, 101, 115, 116, 46, 99, 111, 109, 109, 97, 110, 100 };
        // StatusBytes = System.Text.Encoding.UTF8.GetBytes("test.status");
        private static readonly byte[] StatusBytes = new byte[] { 116, 101, 115, 116, 46, 115, 116, 97, 116, 117, 115 };

        public override string? GetTag(string key)
        {
            return key switch
            {
                "test.command" => Command,
                "test.status" => Status,
                _ => base.GetTag(key),
            };
        }

        public override void SetTag(string key, string value)
        {
            switch(key)
            {
                case "test.command": 
                    Command = value;
                    break;
                case "test.status": 
                    Status = value;
                    break;
                default: 
                    base.SetTag(key, value);
                    break;
            }
        }

        public override void EnumerateTags<TProcessor>(ref TProcessor processor)
        {
            if (Command is not null)
            {
                processor.Process(new TagItem<string>("test.command", Command, CommandBytes));
            }

            if (Status is not null)
            {
                processor.Process(new TagItem<string>("test.status", Status, StatusBytes));
            }

            base.EnumerateTags(ref processor);
        }

        protected override void WriteAdditionalTags(System.Text.StringBuilder sb)
        {
            if (Command is not null)
            {
                sb.Append("test.command (tag):")
                  .Append(Command)
                  .Append(',');
            }

            if (Status is not null)
            {
                sb.Append("test.status (tag):")
                  .Append(Status)
                  .Append(',');
            }

            base.WriteAdditionalTags(sb);
        }
    }
}
