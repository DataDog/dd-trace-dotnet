// <auto-generated/>
#nullable enable

using Datadog.Trace.Processors;
using Datadog.Trace.Tagging;

namespace Datadog.Trace.Tagging
{
    partial class InstrumentationTags
    {
        // AnalyticsSampleRate => _dd1.sr.eausr
        private static readonly byte[] AnalyticsSampleRateBytes = new byte[] { 95, 100, 100, 49, 46, 115, 114, 46, 101, 97, 117, 115, 114 };

        public override double? GetMetric(string key)
        {
            return key switch
            {
                "_dd1.sr.eausr" => AnalyticsSampleRate,
                _ => base.GetMetric(key),
            };
        }

        public override void SetMetric(string key, double? value)
        {
            switch(key)
            {
                case "_dd1.sr.eausr": 
                    AnalyticsSampleRate = value;
                    break;
                default: 
                    base.SetMetric(key, value);
                    break;
            }
        }

        public override void EnumerateMetrics<TProcessor>(TProcessor processor)
        {
            if (AnalyticsSampleRate != null)
            {
                processor.Process(new TagItem<double>("_dd1.sr.eausr", AnalyticsSampleRate.Value, AnalyticsSampleRateBytes));
            }

            base.EnumerateMetrics(processor);
        }

        protected override int WriteAdditionalMetrics(ref byte[] bytes, ref int offset, ITagProcessor[] tagProcessors)
        {
            var count = 0;
            if (AnalyticsSampleRate != null)
            {
                count++;
                WriteMetric(ref bytes, ref offset, AnalyticsSampleRateBytes, AnalyticsSampleRate.Value, tagProcessors);
            }

            return count + base.WriteAdditionalMetrics(ref bytes, ref offset, tagProcessors);
        }

        protected override void WriteAdditionalMetrics(System.Text.StringBuilder sb)
        {
            if (AnalyticsSampleRate != null)
            {
                sb.Append("_dd1.sr.eausr (metric):")
                  .Append(AnalyticsSampleRate.Value)
                  .Append(',');
            }

            base.WriteAdditionalMetrics(sb);
        }
    }
}
