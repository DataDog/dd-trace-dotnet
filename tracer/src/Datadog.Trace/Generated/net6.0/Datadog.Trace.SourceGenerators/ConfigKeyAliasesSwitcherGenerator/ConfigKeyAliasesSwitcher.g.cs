using System;

namespace Datadog.Trace.Configuration;
// <copyright company="Datadog">
// Unless explicitly stated otherwise all files in this repository are licensed under the Apache 2 License.
// This product includes software developed at Datadog (https://www.datadoghq.com/). Copyright 2017 Datadog, Inc.
// </copyright>
// <auto-generated/>

#nullable enable


/// <summary>
/// Generated configuration key matcher that handles main keys and aliases.
/// This file is auto-generated from supported-configurations.json and supported-configurations-docs.yaml. Do not edit this file directly. The source generator will regenerate it on build.
/// </summary>
internal static partial class ConfigKeyAliasesSwitcher
{
    /// <summary>
    /// Gets all aliases for the given configuration key.
    /// </summary>
    /// <param name="mainKey">The configuration key.</param>
    /// <returns>An array of aliases for the key, or empty array if no aliases exist.</returns>
    public static string[] GetAliases(string mainKey)
    {
        switch (mainKey)
        {
            case "DD_AGENT_HOST":
                return new string[]
                {
                    "DATADOG_TRACE_AGENT_HOSTNAME_OPTIMIZED",
                    "DD_TRACE_AGENT_HOSTNAME"
                };
            case "DD_API_SECURITY_ENABLED":
                return new string[]
                {
                    "DD_EXPERIMENTAL_API_SECURITY_ENABLED"
                };
            case "DD_EXCEPTION_REPLAY_ENABLED":
                return new string[]
                {
                    "DD_EXCEPTION_DEBUGGING_ENABLED"
                };
            case "DD_REMOTE_CONFIG_POLL_INTERVAL_SECONDS":
                return new string[]
                {
                    "DD_INTERNAL_RCM_POLL_INTERVAL"
                };
            case "DD_SERVICE":
                return new string[]
                {
                    "DD_SERVICE_NAME"
                };
            case "DD_TAGS":
                return new string[]
                {
                    "DD_TRACE_GLOBAL_TAGS"
                };
            case "DD_TRACE_AGENT_PORT":
                return new string[]
                {
                    "DATADOG_TRACE_AGENT_PORT"
                };
            case "DD_TRACE_CLIENT_IP_HEADER":
                return new string[]
                {
                    "DD_APPSEC_IPHEADER"
                };
            case "DD_TRACE_CONFIG_FILE":
                return new string[]
                {
                    "DD_DOTNET_TRACER_CONFIG_FILE"
                };
            case "DD_TRACE_HTTP_CLIENT_ERROR_STATUSES":
                return new string[]
                {
                    "DD_HTTP_CLIENT_ERROR_STATUSES"
                };
            case "DD_TRACE_HTTP_SERVER_ERROR_STATUSES":
                return new string[]
                {
                    "DD_HTTP_SERVER_ERROR_STATUSES"
                };
            case "DD_TRACE_OTEL_ENABLED":
                return new string[]
                {
                    "DD_TRACE_ACTIVITY_LISTENER_ENABLED"
                };
            case "DD_TRACE_PROPAGATION_STYLE_EXTRACT":
                return new string[]
                {
                    "DD_PROPAGATION_STYLE_EXTRACT",
                    "DD_TRACE_PROPAGATION_STYLE"
                };
            case "DD_TRACE_PROPAGATION_STYLE_INJECT":
                return new string[]
                {
                    "DD_PROPAGATION_STYLE_INJECT",
                    "DD_TRACE_PROPAGATION_STYLE"
                };
            case "DD_TRACE_RATE_LIMIT":
                return new string[]
                {
                    "DD_MAX_TRACES_PER_SECOND"
                };
            case "OTEL_EXPORTER_OTLP_METRICS_HEADERS":
                return new string[]
                {
                    "OTEL_EXPORTER_OTLP_HEADERS"
                };
            case "OTEL_EXPORTER_OTLP_METRICS_PROTOCOL":
                return new string[]
                {
                    "OTEL_EXPORTER_OTLP_PROTOCOL"
                };
            case "OTEL_EXPORTER_OTLP_METRICS_TIMEOUT":
                return new string[]
                {
                    "OTEL_EXPORTER_OTLP_TIMEOUT"
                };
            default:
                return Array.Empty<string>();
        }
    }
}