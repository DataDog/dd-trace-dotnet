// <copyright company="Datadog">
// Unless explicitly stated otherwise all files in this repository are licensed under the Apache 2 License.
// This product includes software developed at Datadog (https://www.datadoghq.com/). Copyright 2017 Datadog, Inc.
// </copyright>
// <auto-generated/>

#nullable enable

// This file is auto-generated from supported-configurations.json and supported-configurations-docs.yaml
// Do not edit this file directly. The source generator will regenerate it on build.
// NOTE: If you remove keys/products from the JSON, run 'dotnet clean' and remove old generated files.
namespace Datadog.Trace.Configuration;

/// <summary>
/// String constants for standard Datadog configuration keys.
/// Auto-generated from supported-configurations.json and supported-configurations-docs.yaml
/// </summary>
internal static partial class ConfigurationKeys
{
    /// <summary>
    /// Configuration key for configuring the interval (in seconds) for sending stats (aka trace metrics)
    /// 
    /// # Keys without documentation in ConfigurationKeys.cs
    /// # These keys exist in supported-configurations.json but need documentation
    /// </summary>
    public const string StatsComputationInterval = "_DD_TRACE_STATS_COMPUTATION_INTERVAL";

    /// <summary>
    /// Configuration key for the Agent host where the Tracer can send traces.
    /// Overridden by <see cref="Datadog.Trace.Configuration.ExporterSettings.AgentUri"/> if present.
    /// Default value is "localhost".
    /// </summary>
    /// <seealso cref="Datadog.Trace.Configuration.ExporterSettings.AgentUri"/>
    public const string AgentHost = "DD_AGENT_HOST";

    /// <summary>
    /// Configuration key for setting the API key, used by the Agent.
    /// </summary>
    public const string ApiKey = "DD_API_KEY";

    public const string RareSamplerEnabled = "DD_APM_ENABLE_RARE_SAMPLER";

    /// <summary>
    /// Used to force a specific port binding for the Trace Agent.
    /// Default value is 8126.
    /// </summary>
    /// <seealso cref="Datadog.Trace.Configuration.ExporterSettings.AgentUri"/>
    public const string TraceAgentPortKey = "DD_APM_RECEIVER_PORT";

    /// <summary>
    /// Configuration key for the unix domain socket where the Tracer can send traces.
    /// Default value is <c>null</c>.
    /// </summary>
    /// <seealso cref="Datadog.Trace.Configuration.ExporterSettings.TracesUnixDomainSocketPath"/>
    public const string TracesUnixDomainSocketPath = "DD_APM_RECEIVER_SOCKET";

    /// <summary>
    /// Configuration key for enabling or disabling the generation of APM traces.
    /// Default value is true (enabled).
    /// </summary>
    public const string ApmTracingEnabled = "DD_APM_TRACING_ENABLED";

    /// <summary>
    /// Configuration key for deactivating reading the application monitoring config file through libdatadog (hands off config).
    /// True by default
    /// </summary>
    public const string ApplicationMonitoringConfigFileEnabled = "DD_APPLICATION_MONITORING_CONFIG_FILE_ENABLED";

    /// <summary>
    /// Configuration key for setting DBM propagation mode
    /// Default value is disabled, expected values are either: disabled, service or full
    /// </summary>
    /// <seealso cref="Datadog.Trace.Configuration.TracerSettings.DbmPropagationMode"/>
    public const string DbmPropagationMode = "DD_DBM_PROPAGATION_MODE";

    /// <summary>
    /// Configuration key for enabling or disabling the use of System.Diagnostics.DiagnosticSource.
    /// Default value is <c>true</c> (enabled).
    /// </summary>
    public const string DiagnosticSourceEnabled = "DD_DIAGNOSTIC_SOURCE_ENABLED";

    /// <summary>
    /// Configuration key for a list of integrations to disable. All other integrations remain enabled.
    /// Default is empty (all integrations are enabled).
    /// Supports multiple values separated with semi-colons.
    /// </summary>
    /// <seealso cref="Datadog.Trace.Configuration.TracerSettings.DisabledIntegrationNames"/>
    public const string DisabledIntegrations = "DD_DISABLED_INTEGRATIONS";

    /// <summary>
    /// Configuration key for arguments to pass to the DogStatsD process.
    /// </summary>
    public const string DogStatsDArgs = "DD_DOGSTATSD_ARGS";

    /// <summary>
    /// Configuration key for when a standalone instance of DogStatsD needs to be started.
    /// </summary>
    public const string DogStatsDPath = "DD_DOGSTATSD_PATH";

    /// <summary>
    /// Configuration key for the named pipe that DogStatsD binds to.
    /// Default value is <c>null</c>.
    /// </summary>
    /// <seealso cref="Datadog.Trace.Configuration.ExporterSettings.MetricsPipeName"/>
    public const string MetricsPipeName = "DD_DOGSTATSD_PIPE_NAME";

    /// <summary>
    /// Configuration key for the DogStatsd port where the Tracer can send metrics.
    /// Default value is 8125.
    /// </summary>
    /// <seealso cref="Datadog.Trace.Configuration.ExporterSettings.DogStatsdPort"/>
    public const string DogStatsdPort = "DD_DOGSTATSD_PORT";

    /// <summary>
    /// Configuration key for the unix domain socket that DogStatsD binds to.
    /// Default value is <c>null</c>.
    /// </summary>
    /// <seealso cref="Datadog.Trace.Configuration.ExporterSettings.MetricsUnixDomainSocketPath"/>
    public const string MetricsUnixDomainSocketPath = "DD_DOGSTATSD_SOCKET";

    /// <summary>
    /// Configuration key for the location where the Tracer can send DogStatsD metrics.
    /// Default value is "udp://127.0.0.1:8125".
    /// </summary>
    /// <seealso cref="Datadog.Trace.Configuration.ExporterSettings.AgentUri"/>
    public const string MetricsUri = "DD_DOGSTATSD_URL";

    /// <summary>
    /// Configuration key for the application's environment. Sets the "env" tag on every <see cref="Span"/>.
    /// </summary>
    /// <seealso cref="Datadog.Trace.Configuration.TracerSettings.Environment"/>
    public const string Environment = "DD_ENV";

    public const string PropagateProcessTags = "DD_EXPERIMENTAL_PROPAGATE_PROCESS_TAGS_ENABLED";

    /// <summary>
    /// Configuration key for the application's git commit hash. Sets the "_dd.git.commit.sha" tag on every <see cref="Span"/>.
    /// </summary>
    /// <seealso cref="Datadog.Trace.Configuration.TracerSettings.GitCommitSha"/>
    public const string GitCommitSha = "DD_GIT_COMMIT_SHA";

    /// <summary>
    /// Configuration key for the application's git repo URL. Sets the "_dd.git.repository_url" tag on every <see cref="Span"/>.
    /// </summary>
    /// <seealso cref="Datadog.Trace.Configuration.TracerSettings.GitRepositoryUrl"/>
    public const string GitRepositoryUrl = "DD_GIT_REPOSITORY_URL";

    /// <summary>
    /// Configuration key for the application's client http statuses to set spans as errors by.
    /// </summary>
    /// <seealso cref="Datadog.Trace.Configuration.TracerSettings.HttpClientErrorStatusCodes"/>
    public const string DeprecatedHttpClientErrorStatusCodes = "DD_HTTP_CLIENT_ERROR_STATUSES";

    /// <summary>
    /// Configuration key for the application's server http statuses to set spans as errors by.
    /// </summary>
    /// <seealso cref="Datadog.Trace.Configuration.TracerSettings.HttpServerErrorStatusCodes"/>
    public const string DeprecatedHttpServerErrorStatusCodes = "DD_HTTP_SERVER_ERROR_STATUSES";

    /// <summary>
    /// Configuration key for enabling/disabling reporting query string
    /// Default value is true
    /// </summary>
    /// <seealso cref="Datadog.Trace.Configuration.TracerSettings.QueryStringReportingEnabled"/>
    public const string QueryStringReportingEnabled = "DD_HTTP_SERVER_TAG_QUERY_STRING";

    /// <summary>
    /// Configuration key for setting the max size of the querystring to report, before obfuscation
    /// Default value is 5000, 0 means that we don't limit the size.
    /// </summary>
    /// <seealso cref="Datadog.Trace.Configuration.TracerSettings.QueryStringReportingSize"/>
    public const string QueryStringReportingSize = "DD_HTTP_SERVER_TAG_QUERY_STRING_SIZE";

    /// <summary>
    /// Configuration key for enabling or disabling the injection of products via single step instrumentation.
    /// </summary>
    public const string SsiDeployed = "DD_INJECTION_ENABLED";

    /// <summary>
    /// Configuration key for enabling or disabling the Tracer's debugger mode.
    /// Default value is false (disabled).
    /// </summary>
    public const string WaitForDebuggerAttach = "DD_INTERNAL_WAIT_FOR_DEBUGGER_ATTACH";

    /// <summary>
    /// Configuration key for enabling or disabling the Tracer's native debugger mode.
    /// Default value is false (disabled).
    /// </summary>
    public const string WaitForNativeDebuggerAttach = "DD_INTERNAL_WAIT_FOR_NATIVE_DEBUGGER_ATTACH";

    /// <summary>
    /// Configuration key for enabling or disabling the automatic injection
    /// of correlation identifiers into the logging context.
    /// </summary>
    /// <seealso cref="Datadog.Trace.Configuration.TracerSettings.LogsInjectionEnabled"/>
    public const string LogsInjectionEnabled = "DD_LOGS_INJECTION";

    /// <summary>
    /// Configuration key for setting the approximate maximum size,
    /// in bytes, for Tracer log files.
    /// Default value is 10 MB.
    /// </summary>
    public const string MaxLogFileSize = "DD_MAX_LOGFILE_SIZE";

    /// <summary>
    /// Configuration key for setting the number of traces allowed
    /// to be submitted per second.
    /// </summary>
    /// <seealso cref="Datadog.Trace.Configuration.TracerSettings.MaxTracesSubmittedPerSecond"/>
    [System.Obsolete("This parameter is obsolete and should be replaced by `DD_TRACE_RATE_LIMIT`")]
    public const string MaxTracesSubmittedPerSecond = "DD_MAX_TRACES_PER_SECOND";

    /// <summary>
    /// Configuration key for enabling or disabling runtime metrics sent to DogStatsD.
    /// Default value is <c>false</c> (disabled).
    /// </summary>
    public const string RuntimeMetricsEnabled = "DD_RUNTIME_METRICS_ENABLED";

    /// <summary>
    /// Configuration key for the application's default service name.
    /// Used as the service name for top-level spans,
    /// and used to determine service name of some child spans.
    /// </summary>
    /// <seealso cref="Datadog.Trace.Configuration.TracerSettings.ServiceName"/>
    public const string ServiceName = "DD_SERVICE";

    /// <summary>
    /// Configuration key for setting the default Datadog destination site.
    /// Defaults to "datadoghq.com".
    /// </summary>
    public const string Site = "DD_SITE";

    /// <summary>
    /// Configuration key for setting custom <em>span</em> sampling rules based on glob patterns.
    /// Comma separated list of span sampling rules.
    /// The rule is matched in order of specification. The first match in a list is used.
    /// The supported glob pattern characters are '*' and '?'.
    /// A '*' matches any contiguous substring.
    /// A '?' matches exactly one character.
    /// 
    /// Per entry:
    ///     The item "service" is a glob pattern string, to match on the service name.
    ///         Optional and defaults to '*'.
    ///     The item "name" is a glob pattern string, to match on the operation name.
    ///         Optional and defaults to '*'.
    ///     The item "sample_rate" is a float and is the probability of keeping a matched span.
    ///         Optional and defaults to 1.0 (keep all).
    ///     The item "max_per_second" is a float and is the maximum number of spans that can be kept per second for the rule.
    ///         Optional and defaults to unlimited.
    /// 
    /// Examples:
    /// Match all spans that have a service name of "cart" and an operation name of "checkout" with a kept limit of 1000 per second.
    ///     "[{"service": "cart", "name": "checkout", "max_per_second": 1000}]"
    /// 
    /// Match 50% of spans that have a service name of "cart" and an operation name of "checkout" with a kept limit of 1000 per second.
    ///     "[{"service": "cart", "name": "checkout", "sample_rate": 0.5, "max_per_second": 1000}]"
    /// 
    /// Match all spans that start with "cart" without any limits and any operation name.
    ///     "[{"service": "cart*"}]"
    /// </summary>
    /// <seealso cref="Datadog.Trace.Configuration.TracerSettings.SpanSamplingRules"/>
    public const string SpanSamplingRules = "DD_SPAN_SAMPLING_RULES";

    /// <summary>
    /// Configuration key for a list of tags to be applied globally to spans.
    /// Supports multiple key key-value pairs which are comma-separated, and for which the key and
    /// value are colon-separated. For example Key1:Value1, Key2:Value2
    /// </summary>
    /// <seealso cref="Datadog.Trace.Configuration.TracerSettings.GlobalTags"/>
    public const string GlobalTags = "DD_TAGS";

    /// <summary>
    /// Configuration key for arguments to pass to the Trace Agent process.
    /// </summary>
    public const string TraceAgentArgs = "DD_TRACE_AGENT_ARGS";

    /// <summary>
    /// Configuration key for when a standalone instance of the Trace Agent needs to be started.
    /// </summary>
    public const string TraceAgentPath = "DD_TRACE_AGENT_PATH";

    /// <summary>
    /// Configuration key for the Agent port where the Tracer can send traces.
    /// Default value is 8126.
    /// </summary>
    /// <seealso cref="Datadog.Trace.Configuration.ExporterSettings.AgentUri"/>
    public const string AgentPort = "DD_TRACE_AGENT_PORT";

    /// <summary>
    /// Configuration key for the Agent URL where the Tracer can send traces.
    /// Default value is "http://localhost:8126".
    /// </summary>
    /// <seealso cref="Datadog.Trace.Configuration.ExporterSettings.AgentUri"/>
    public const string AgentUri = "DD_TRACE_AGENT_URL";

    /// <summary>
    /// Configuration key for enabling or disabling default Analytics.
    /// </summary>
    /// <seealso cref="Datadog.Trace.Configuration.TracerSettings.AnalyticsEnabled"/>
    [System.Obsolete("Deprecated - App Analytics is deprecated")]
    public const string GlobalAnalyticsEnabled = "DD_TRACE_ANALYTICS_ENABLED";

    /// <summary>
    /// Configuration key for toggling span pointers on AWS requests.
    /// Default value is true
    /// </summary>
    public const string SpanPointersEnabled = "DD_TRACE_AWS_ADD_SPAN_POINTERS";

    /// <summary>
    /// Configuration key for enabling or disabling span links creation for Azure EventHubs batch operations.
    /// When enabled, TryAdd spans are created and linked to the send span.
    /// When disabled, TryAdd spans are not created, and therefore they are never linked to the send span.
    /// Default value is <c>true</c> (enabled).
    /// </summary>
    /// <seealso cref="Datadog.Trace.Configuration.TracerSettings.AzureEventHubsBatchLinksEnabled"/>
    public const string AzureEventHubsBatchLinksEnabled = "DD_TRACE_AZURE_EVENTHUBS_BATCH_LINKS_ENABLED";

    /// <summary>
    /// Configuration key to enable or disable the creation of individual message spans and span links
    /// when using Azure Service Bus batch operations.
    /// Default value is <c>true</c> (enabled).
    /// </summary>
    /// <seealso cref="Datadog.Trace.Configuration.TracerSettings.AzureServiceBusBatchLinksEnabled"/>
    public const string AzureServiceBusBatchLinksEnabled = "DD_TRACE_AZURE_SERVICEBUS_BATCH_LINKS_ENABLED";

    /// <summary>
    /// Configuration key to set the maximum number of bytes that can be
    /// injected into the baggage header when propagating to a downstream service.
    /// Default value is 8192 bytes.
    /// </summary>
    /// <seealso cref="Datadog.Trace.Configuration.TracerSettings.BaggageMaximumBytes"/>
    public const string BaggageMaximumBytes = "DD_TRACE_BAGGAGE_MAX_BYTES";

    /// <summary>
    /// Configuration key to set the maximum number of items that can be
    /// injected into the baggage header when propagating to a downstream service.
    /// Default value is 64 items.
    /// </summary>
    /// <seealso cref="Datadog.Trace.Configuration.TracerSettings.BaggageMaximumItems"/>
    public const string BaggageMaximumItems = "DD_TRACE_BAGGAGE_MAX_ITEMS";

    /// <summary>
    /// Configuration key for controlling which baggage keys are converted into span tags.
    /// Default value is "user.id,session.id,account.id".
    /// 
    /// Behavior options:
    /// - Empty string: No baggage keys are converted into span tags (feature disabled)
    /// - Comma-separated list: Only baggage keys matching exact, case-sensitive names in the list are added as span tags
    /// - Wildcard (*): All baggage keys are converted into span tags
    /// </summary>
    /// <seealso cref="Datadog.Trace.Configuration.TracerSettings.BaggageTagKeys"/>
    public const string BaggageTagKeys = "DD_TRACE_BAGGAGE_TAG_KEYS";

    /// <summary>
    /// Configuration key for setting the batch interval in milliseconds for the serialization queue.
    /// Set to 0 to disable.
    /// </summary>
    public const string SerializationBatchInterval = "DD_TRACE_BATCH_INTERVAL";

    /// <summary>
    /// Configuration key for setting the size in bytes of the trace buffer
    /// </summary>
    public const string BufferSize = "DD_TRACE_BUFFER_SIZE";

    /// <summary>
    /// Configuration key indicating if the header should be collected. The default for DD_TRACE_CLIENT_IP_ENABLED is false.
    /// </summary>
    /// <seealso cref="Datadog.Trace.Configuration.TracerSettings.IpHeaderEnabled"/>
    public const string IpHeaderEnabled = "DD_TRACE_CLIENT_IP_ENABLED";

    /// <summary>
    /// Configuration key indicating the optional name of the custom header to take into account to report the ip address from.
    /// If this variable is set all other IP related headers should be ignored
    /// Default value is null (do not override).
    /// </summary>
    /// <seealso cref="Datadog.Trace.Configuration.TracerSettings.IpHeader"/>
    public const string IpHeader = "DD_TRACE_CLIENT_IP_HEADER";

    /// <summary>
    /// Configuration key for the path to the configuration file.
    /// Can only be set with an environment variable
    /// or in the <c>app.config</c>/<c>web.config</c> file.
    /// </summary>
    public const string ConfigurationFileName = "DD_TRACE_CONFIG_FILE";

    /// <summary>
    /// Use libdatadog data pipeline to send traces.
    /// Default value is <c>false</c> (disabled).
    /// </summary>
    public const string TraceDataPipelineEnabled = "DD_TRACE_DATA_PIPELINE_ENABLED";

    /// <summary>
    /// Configuration key for enabling or disabling the Tracer's debug mode.
    /// Default value is false (disabled).
    /// </summary>
    public const string DebugEnabled = "DD_TRACE_DEBUG";

    /// <summary>
    /// Configuration key for a list of ActivitySource names (supports globbing) that will be disabled.
    /// Default is empty (all ActivitySources will be subscribed to by default).
    /// <para><b>Disabling ActivitySources may break distributed tracing if those Activities are used to propagate trace context.</b></para>
    /// <para>
    /// Supports multiple values separated with commas.
    /// For example: "SomeGlob.*.PatternSource,Some.Specific.Source"
    /// </para>
    /// <remarks>
    /// <para>
    /// When the tracer doesn't subscribe to an ActivitySource, we will <em>NOT</em> propagate the trace context from those Activities (we don't see them anymore).
    /// <br/><b>This means that distributed tracing flows that rely on these Activities for context propagation
    /// will break and cause disconnected traces.</b>
    /// </para>
    /// <para>
    /// Potential impact on distributed tracing:
    /// <list type="bullet">
    /// <item>
    ///   <description>
    ///     Service A -> Ignored Activity -> Service B
    ///     <para>Creates a single trace with Service A as root and Service B as child</para>
    ///   </description>
    /// </item>
    /// <item>
    ///   <description>
    ///     Service A -> Disabled Activity -> Service B
    ///     <para>Creates TWO separate traces with Service A and Service B each as root spans</para>
    ///   </description>
    /// </item>
    /// </list>
    /// </para>
    /// </remarks>
    /// </summary>
    public const string DisabledActivitySources = "DD_TRACE_DISABLED_ACTIVITY_SOURCES";

    /// <summary>
    /// Configuration key for the comma-separated list of user disabled
    /// ADO.NET CommandType names that should not have Span created for them.
    /// <para>"InterceptableDbCommand" and "ProfiledDbCommand" are always disabled by default.</para>
    /// </summary>
    /// <seealso cref="Datadog.Trace.Configuration.TracerSettings.DisabledAdoNetCommandTypes"/>
    public const string DisabledAdoNetCommandTypes = "DD_TRACE_DISABLED_ADONET_COMMAND_TYPES";

    /// <summary>
    /// Configuration key for enabling or disabling the Tracer.
    /// Default value is true (enabled).
    /// </summary>
    /// <seealso cref="Datadog.Trace.Configuration.TracerSettings.TraceEnabled"/>
    public const string TraceEnabled = "DD_TRACE_ENABLED";

    /// <summary>
    /// Configuration key for controlling whether route parameters in ASP.NET and ASP.NET Core resource names
    /// should be expanded with their values. Only applies when
    /// <see cref="ConfigurationKeys.FeatureFlags.RouteTemplateResourceNamesEnabled"/> is enabled.
    /// </summary>
    /// <seealso cref="Datadog.Trace.Configuration.TracerSettings.ExpandRouteTemplatesEnabled"/>
    public const string ExpandRouteTemplatesEnabled = "DD_TRACE_EXPAND_ROUTE_TEMPLATES_ENABLED";

    /// <summary>
    /// Configuration key to enable experimental features.
    /// </summary>
    public const string ExperimentalFeaturesEnabled = "DD_TRACE_EXPERIMENTAL_FEATURES_ENABLED";

    /// <summary>
    /// Configuration key for enabling the tagging of every telemetry event with git metadata.
    /// Default value is true (enabled).
    /// </summary>
    /// <seealso cref="Datadog.Trace.Configuration.TracerSettings.GitMetadataEnabled"/>
    public const string GitMetadataEnabled = "DD_TRACE_GIT_METADATA_ENABLED";

    /// <summary>
    /// Configuration key for specifying which GraphQL error extensions to capture.
    /// A comma-separated list of extension keys to capture. Empty or not present means no extensions are captured.
    /// </summary>
    /// <seealso cref="Datadog.Trace.Configuration.TracerSettings.GraphQLErrorExtensions"/>
    public const string GraphQLErrorExtensions = "DD_TRACE_GRAPHQL_ERROR_EXTENSIONS";

    /// <summary>
    /// Configuration key for a map of metadata keys to tag names.
    /// Automatically apply GRPC metadata values as tags on traces.
    /// </summary>
    /// <seealso cref="Datadog.Trace.Configuration.TracerSettings.HeaderTags"/>
    public const string GrpcTags = "DD_TRACE_GRPC_TAGS";

    /// <summary>
    /// Configuration key for a map of header keys to tag names.
    /// Automatically apply header values as tags on traces.
    /// </summary>
    /// <seealso cref="Datadog.Trace.Configuration.TracerSettings.HeaderTags"/>
    public const string HeaderTags = "DD_TRACE_HEADER_TAGS";

    /// <summary>
    /// Configuration key for the application's client http statuses to set spans as errors by.
    /// </summary>
    /// <seealso cref="Datadog.Trace.Configuration.TracerSettings.HttpClientErrorStatusCodes"/>
    public const string HttpClientErrorStatusCodes = "DD_TRACE_HTTP_CLIENT_ERROR_STATUSES";

    /// <summary>
    /// Configuration key for overriding which URLs are skipped by the tracer.
    /// </summary>
    /// <seealso cref="Datadog.Trace.Configuration.TracerSettings.HttpClientExcludedUrlSubstrings"/>
    public const string HttpClientExcludedUrlSubstrings = "DD_TRACE_HTTP_CLIENT_EXCLUDED_URL_SUBSTRINGS";

    /// <summary>
    /// Configuration key for the application's server http statuses to set spans as errors by.
    /// </summary>
    /// <seealso cref="Datadog.Trace.Configuration.TracerSettings.HttpServerErrorStatusCodes"/>
    public const string HttpServerErrorStatusCodes = "DD_TRACE_HTTP_SERVER_ERROR_STATUSES";

    /// <summary>
    /// Configuration key to enable or disable the creation of a span context on exiting a successful Kafka
    /// Consumer.Consume() call, and closing the scope on entering Consumer.Consume().
    /// Default value is <c>true</c> (enabled).
    /// </summary>
    /// <seealso cref="Datadog.Trace.Configuration.TracerSettings.KafkaCreateConsumerScopeEnabled"/>
    public const string KafkaCreateConsumerScopeEnabled = "DD_TRACE_KAFKA_CREATE_CONSUMER_SCOPE_ENABLED";

    /// <summary>
    /// Configuration key for setting the directory of the .NET Tracer logs.
    /// Overrides the value in <see cref="Datadog.Trace.Configuration.ConfigurationKeys.TraceLogPath"/> if present.
    /// Default value is "%ProgramData%"\Datadog .NET Tracer\logs\" on Windows
    /// or "/var/log/datadog/dotnet/" on Linux.
    /// </summary>
    public const string LogDirectory = "DD_TRACE_LOG_DIRECTORY";

    [System.Obsolete("Deprecated, use DD_TRACE_LOG_DIRECTORY instead, and make sure it is a directory and not a file path")]
    public const string TraceLogPath = "DD_TRACE_LOG_PATH";

    /// <summary>
    /// Configuration key for locations to write internal diagnostic logs.
    /// Currently only <c>file</c> is supported
    /// Defaults to <c>file</c>
    /// </summary>
    public const string LogSinks = "DD_TRACE_LOG_SINKS";

    /// <summary>
    /// Configuration key for setting in number of days when to delete log files based on their last writetime date.
    /// </summary>
    public const string LogFileRetentionDays = "DD_TRACE_LOGFILE_RETENTION_DAYS";

    /// <summary>
    /// Configuration key for setting the number of seconds between,
    /// identical log messages, for Tracer log files.
    /// Default value is 0 and setting to 0 disables rate limiting.
    /// </summary>
    public const string LogRateLimit = "DD_TRACE_LOGGING_RATE";

    /// <summary>
    /// Configuration key for enabling automatic instrumentation on specified methods.
    /// Default value is "" (disabled).
    /// </summary>
    public const string TraceMethods = "DD_TRACE_METHODS";

    /// <summary>
    /// Configuration key for enabling or disabling internal metrics sent to DogStatsD.
    /// Default value is <c>false</c> (disabled).
    /// </summary>
    public const string TracerMetricsEnabled = "DD_TRACE_METRICS_ENABLED";

    /// <summary>
    /// Configuration key for specifying a custom regex to obfuscate query strings.
    /// Default value is in TracerSettingsConstants
    ///  WARNING: This regex cause crashes under netcoreapp2.1 / linux / arm64, dont use on manual instrumentation in this environment
    /// </summary>
    /// <seealso cref="Datadog.Trace.Configuration.TracerSettings.ObfuscationQueryStringRegex"/>
    public const string ObfuscationQueryStringRegex = "DD_TRACE_OBFUSCATION_QUERY_STRING_REGEXP";

    /// <summary>
    /// Configuration key for specifying a timeout in milliseconds to the execution of the query string obfuscation regex
    /// Default value is 200ms
    /// </summary>
    /// <seealso cref="Datadog.Trace.Configuration.TracerSettings.ObfuscationQueryStringRegexTimeout"/>
    public const string ObfuscationQueryStringRegexTimeout = "DD_TRACE_OBFUSCATION_QUERY_STRING_REGEXP_TIMEOUT";

    /// <summary>
    /// Configuration key to enable sending partial traces to the agent
    /// </summary>
    public const string PartialFlushEnabled = "DD_TRACE_PARTIAL_FLUSH_ENABLED";

    /// <summary>
    /// Configuration key to set the minimum number of closed spans in a trace before it's partially flushed
    /// </summary>
    public const string PartialFlushMinSpans = "DD_TRACE_PARTIAL_FLUSH_MIN_SPANS";

    /// <summary>
    /// Configuration key for automatically populating the peer.service tag
    /// from predefined precursor attributes when the span attribute schema is v0.
    /// This is ignored when the span attribute schema is v1 or later.
    /// Default value is false
    /// </summary>
    public const string PeerServiceDefaultsEnabled = "DD_TRACE_PEER_SERVICE_DEFAULTS_ENABLED";

    /// <summary>
    /// Configuration key for a map of services to rename.
    /// </summary>
    /// <seealso cref="Datadog.Trace.Configuration.TracerSettings.PeerServiceNameMappings"/>
    public const string PeerServiceNameMappings = "DD_TRACE_PEER_SERVICE_MAPPING";

    /// <summary>
    /// Configuration key for the named pipe where the Tracer can send traces.
    /// Default value is <c>null</c>.
    /// </summary>
    /// <seealso cref="Datadog.Trace.Configuration.ExporterSettings.TracesPipeName"/>
    public const string TracesPipeName = "DD_TRACE_PIPE_NAME";

    /// <summary>
    /// Configuration key for setting the timeout in milliseconds for named pipes communication.
    /// Default value is <c>0</c>.
    /// </summary>
    /// <seealso cref="Datadog.Trace.Configuration.ExporterSettings.TracesPipeTimeoutMs"/>
    public const string TracesPipeTimeoutMs = "DD_TRACE_PIPE_TIMEOUT_MS";

    /// <summary>
    /// Configuration key for setting the header extraction propagation behavior. Accepted values are:
    /// <ul>
    ///   <li>continue: Extracted span context becomes the parent and baggage is propagated</li>
    ///   <li>restart: Extracted span context becomes a span link (a new trace is started) and baggage is propagated</li>
    ///   <li>ignore: We disregard the incoming trace context headers and we also disregard baggage</li>
    /// </ul>
    /// Default value is continue.
    /// </summary>
    public const string PropagationBehaviorExtract = "DD_TRACE_PROPAGATION_BEHAVIOR_EXTRACT";

    /// <summary>
    /// Configuration key to configure if propagation should only extract the first header once a configure
    /// propagator extracts a valid trace context.
    /// </summary>
    /// <seealso cref="Datadog.Trace.Configuration.TracerSettings.PropagationExtractFirstOnly"/>
    public const string PropagationExtractFirstOnly = "DD_TRACE_PROPAGATION_EXTRACT_FIRST";

    /// <summary>
    /// Configuration key for setting the header extraction propagation style.
    /// If DD_TRACE_PROPAGATION_STYLE is also defined, this value overrides the header extraction styles.
    /// </summary>
    /// <seealso cref="Datadog.Trace.Propagators.ContextPropagationHeaderStyle"/>
    /// <seealso cref="Datadog.Trace.Configuration.TracerSettings.PropagationStyleExtract"/>
    public const string PropagationStyleExtract = "DD_TRACE_PROPAGATION_STYLE_EXTRACT";

    /// <summary>
    /// Configuration key for setting the header injection propagation style.
    /// If DD_TRACE_PROPAGATION_STYLE is also defined, this value overrides the header injection styles.
    /// </summary>
    /// <seealso cref="Datadog.Trace.Propagators.ContextPropagationHeaderStyle"/>
    /// <seealso cref="Datadog.Trace.Configuration.TracerSettings.PropagationStyleInject"/>
    public const string PropagationStyleInject = "DD_TRACE_PROPAGATION_STYLE_INJECT";

    /// <summary>
    /// Configuration key for setting the number of traces allowed
    /// to be submitted per second.
    /// </summary>
    /// <seealso cref="Datadog.Trace.Configuration.TracerSettings.MaxTracesSubmittedPerSecond"/>
    public const string TraceRateLimit = "DD_TRACE_RATE_LIMIT";

    /// <summary>
    /// Configuration key for unifying client service names when the span
    /// attribute schema is v0. This is ignored when the span attribute
    /// schema is v1 or later.
    /// Default value is false
    /// </summary>
    public const string RemoveClientServiceNamesEnabled = "DD_TRACE_REMOVE_INTEGRATION_SERVICE_NAMES_ENABLED";

    /// <summary>
    /// Configuration key for setting the global rate for the sampler.
    /// </summary>
    public const string GlobalSamplingRate = "DD_TRACE_SAMPLE_RATE";

    /// <summary>
    /// Configuration key for setting custom sampling rules based on regular expressions.
    /// Semi-colon separated list of sampling rules.
    /// The rule is matched in order of specification. The first match in a list is used.
    /// 
    /// Per entry:
    ///   The item "sample_rate" is required in decimal format.
    ///   The item "service" is optional in regular expression format, to match on service name.
    ///   The item "name" is optional in regular expression format, to match on operation name.
    /// 
    /// To give a rate of 50% to any traces in a service starting with the text "cart":
    ///   '[{"sample_rate":0.5, "service":"cart.*"}]'
    /// 
    /// To give a rate of 20% to any traces which have an operation name of "http.request":
    ///   '[{"sample_rate":0.2, "name":"http.request"}]'
    /// 
    /// To give a rate of 100% to any traces within a service named "background" and with an operation name of "sql.query":
    ///   '[{"sample_rate":1.0, "service":"background", "name":"sql.query"}]
    /// 
    /// To give a rate of 10% to all traces
    ///   '[{"sample_rate":0.1}]'
    /// 
    /// To configure multiple rules, separate by semi-colon and order from most specific to least specific:
    ///   '[{"sample_rate":0.5, "service":"cart.*"}, {"sample_rate":0.2, "name":"http.request"}, {"sample_rate":1.0, "service":"background", "name":"sql.query"}, {"sample_rate":0.1}]'
    /// 
    /// If no rules are specified, or none match, default internal sampling logic will be used.
    /// </summary>
    /// <seealso cref="Datadog.Trace.Configuration.TracerSettings.CustomSamplingRules"/>
    public const string CustomSamplingRules = "DD_TRACE_SAMPLING_RULES";

    /// <summary>
    /// Configuration key for setting the format of <see cref="Datadog.Trace.Configuration.TracerSettings.CustomSamplingRules"/>.
    /// Valid values are <c>regex</c> or <c>glob</c>.
    /// If the value is not recognized, trace sampling rules are disabled.
    /// </summary>
    public const string CustomSamplingRulesFormat = "DD_TRACE_SAMPLING_RULES_FORMAT";

    /// <summary>
    /// Configuration key for a map of services to rename.
    /// </summary>
    /// <seealso cref="Datadog.Trace.Configuration.TracerSettings.ServiceNameMappings"/>
    public const string ServiceNameMappings = "DD_TRACE_SERVICE_MAPPING";

    /// <summary>
    /// Configuration key for setting the schema version for service naming and span attributes
    /// Accepted values are: "v1", "v0"
    /// Default value is "v0"
    /// </summary>
    public const string MetadataSchemaVersion = "DD_TRACE_SPAN_ATTRIBUTE_SCHEMA";

    /// <summary>
    /// Configuration key for enabling or disabling the diagnostic log at startup
    /// </summary>
    /// <seealso cref="Datadog.Trace.Configuration.TracerSettings.StartupDiagnosticLogEnabled"/>
    public const string StartupDiagnosticLogEnabled = "DD_TRACE_STARTUP_LOGS";

    /// <summary>
    /// Configuration key for enabling computation of stats (aka trace metrics) on the tracer side
    /// </summary>
    public const string StatsComputationEnabled = "DD_TRACE_STATS_COMPUTATION_ENABLED";

    /// <summary>
    /// Configuration key for the application's version. Sets the "version" tag on every <see cref="Span"/>.
    /// </summary>
    /// <seealso cref="Datadog.Trace.Configuration.TracerSettings.ServiceVersion"/>
    public const string ServiceVersion = "DD_VERSION";
}
