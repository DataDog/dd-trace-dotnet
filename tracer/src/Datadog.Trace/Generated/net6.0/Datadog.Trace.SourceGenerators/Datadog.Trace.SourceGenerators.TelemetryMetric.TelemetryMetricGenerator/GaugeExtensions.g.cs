// <auto-generated/>
#nullable enable

namespace Datadog.Trace.Telemetry.Metrics;
internal static partial class GaugeExtensions
{
    /// <summary>
    /// The number of members in the enum.
    /// </summary>
    public const int Length = 4;

    /// <summary>
    /// Gets the metric name for the provided metric
    /// </summary>
    /// <param name="metric">The metric to get the name for</param>
    /// <returns>The datadog metric name</returns>
    public static string GetName(this Datadog.Trace.Telemetry.Metrics.Gauge metric)
        => metric switch
        {
            Datadog.Trace.Telemetry.Metrics.Gauge.StatsBuckets => "stats_buckets",
            Datadog.Trace.Telemetry.Metrics.Gauge.Instrumentations => "instrumentations",
            Datadog.Trace.Telemetry.Metrics.Gauge.DirectLogQueue => "direct_log_queue",
            Datadog.Trace.Telemetry.Metrics.Gauge.NativeInitTime => "native_init_time",
            _ => null!,
        };

    /// <summary>
    /// Gets whether the metric is a "common" metric, used by all tracers
    /// </summary>
    /// <param name="metric">The metric to check</param>
    /// <returns>True if the metric is a "common" metric, used by all languages</returns>
    public static bool IsCommon(this Datadog.Trace.Telemetry.Metrics.Gauge metric)
        => metric switch
        {
            Datadog.Trace.Telemetry.Metrics.Gauge.StatsBuckets => true,
            Datadog.Trace.Telemetry.Metrics.Gauge.Instrumentations => false,
            Datadog.Trace.Telemetry.Metrics.Gauge.DirectLogQueue => false,
            Datadog.Trace.Telemetry.Metrics.Gauge.NativeInitTime => false,
            _ => false,
        };

    /// <summary>
    /// Gets the number of tags the metric should have
    /// </summary>
    /// <param name="metric">The metric to check</param>
    /// <returns>The number of tags the metric should have</returns>
    public static int ExpectedTags(this Datadog.Trace.Telemetry.Metrics.Gauge metric)
        => metric switch
        {
            Datadog.Trace.Telemetry.Metrics.Gauge.StatsBuckets => 0,
            Datadog.Trace.Telemetry.Metrics.Gauge.Instrumentations => 1,
            Datadog.Trace.Telemetry.Metrics.Gauge.DirectLogQueue => 0,
            Datadog.Trace.Telemetry.Metrics.Gauge.NativeInitTime => 0,
            _ => 0,
        };

    /// <summary>
    /// Gets the custom namespace for the provided metric
    /// </summary>
    /// <param name="metric">The metric to get the name for</param>
    /// <returns>The datadog metric name</returns>
    public static string? GetNamespace(this Datadog.Trace.Telemetry.Metrics.Gauge metric)
        => metric switch
        {
            _ => null,
        };
}