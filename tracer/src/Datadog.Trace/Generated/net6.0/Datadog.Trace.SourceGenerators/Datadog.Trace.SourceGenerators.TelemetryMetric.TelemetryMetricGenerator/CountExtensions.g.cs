// <auto-generated/>
#nullable enable

namespace Datadog.Trace.Telemetry.Metrics;
internal static partial class CountExtensions
{
    /// <summary>
    /// The number of separate metrics in the <see cref="Datadog.Trace.Telemetry.Metrics.Count" /> metric.
    /// </summary>
    public const int Length = 28;

    /// <summary>
    /// Gets the metric name for the provided metric
    /// </summary>
    /// <param name="metric">The metric to get the name for</param>
    /// <returns>The datadog metric name</returns>
    public static string GetName(this Datadog.Trace.Telemetry.Metrics.Count metric)
        => metric switch
        {
            Datadog.Trace.Telemetry.Metrics.Count.LogCreated => "log_created",
            Datadog.Trace.Telemetry.Metrics.Count.IntegrationsError => "integrations_error",
            Datadog.Trace.Telemetry.Metrics.Count.SpanCreated => "span_created",
            Datadog.Trace.Telemetry.Metrics.Count.SpanFinished => "span_finished",
            Datadog.Trace.Telemetry.Metrics.Count.SpanSampled => "span_sampled",
            Datadog.Trace.Telemetry.Metrics.Count.SpanDropped => "span_dropped",
            Datadog.Trace.Telemetry.Metrics.Count.TraceCreated => "trace_created",
            Datadog.Trace.Telemetry.Metrics.Count.TraceEnqueued => "trace_enqueued",
            Datadog.Trace.Telemetry.Metrics.Count.TraceSampled => "trace_sampled",
            Datadog.Trace.Telemetry.Metrics.Count.TraceDropped => "trace_dropped",
            Datadog.Trace.Telemetry.Metrics.Count.TraceSent => "trace_sent",
            Datadog.Trace.Telemetry.Metrics.Count.TraceApiRequests => "trace_api.requests",
            Datadog.Trace.Telemetry.Metrics.Count.TraceApiResponses => "trace_api.responses",
            Datadog.Trace.Telemetry.Metrics.Count.TraceApiErrors => "trace_api.errors",
            Datadog.Trace.Telemetry.Metrics.Count.TracePartialFlush => "trace_partial_flush",
            Datadog.Trace.Telemetry.Metrics.Count.ContextHeaderStyleInjected => "context_header_style.injected",
            Datadog.Trace.Telemetry.Metrics.Count.ContextHeaderStyleExtracted => "context_header_style.extracted",
            Datadog.Trace.Telemetry.Metrics.Count.StatsApiRequests => "stats_api.requests",
            Datadog.Trace.Telemetry.Metrics.Count.StatsApiResponses => "stats_api.responses",
            Datadog.Trace.Telemetry.Metrics.Count.StatsApiErrors => "stats_api.errors",
            Datadog.Trace.Telemetry.Metrics.Count.TelemetryApiRequests => "telemetry_api.requests",
            Datadog.Trace.Telemetry.Metrics.Count.TelemetryApiResponses => "telemetry_api.responses",
            Datadog.Trace.Telemetry.Metrics.Count.TelemetryApiErrors => "telemetry_api.errors",
            Datadog.Trace.Telemetry.Metrics.Count.VersionConflictTracerCreated => "version_conflict_tracer_created",
            Datadog.Trace.Telemetry.Metrics.Count.DirectLogLogs => "direct_log_logs",
            Datadog.Trace.Telemetry.Metrics.Count.DirectLogApiRequests => "direct_log_api.requests",
            Datadog.Trace.Telemetry.Metrics.Count.DirectLogApiResponses => "direct_log_api.responses",
            Datadog.Trace.Telemetry.Metrics.Count.DirectLogApiErrors => "direct_log_api.errors.responses",
            _ => null!,
        };

    /// <summary>
    /// Gets whether the metric is a "common" metric, used by all tracers
    /// </summary>
    /// <param name="metric">The metric to check</param>
    /// <returns>True if the metric is a "common" metric, used by all languages</returns>
    public static bool IsCommon(this Datadog.Trace.Telemetry.Metrics.Count metric)
        => metric switch
        {
            Datadog.Trace.Telemetry.Metrics.Count.VersionConflictTracerCreated => false,
            Datadog.Trace.Telemetry.Metrics.Count.DirectLogLogs => false,
            Datadog.Trace.Telemetry.Metrics.Count.DirectLogApiRequests => false,
            Datadog.Trace.Telemetry.Metrics.Count.DirectLogApiResponses => false,
            Datadog.Trace.Telemetry.Metrics.Count.DirectLogApiErrors => false,
            _ => true,
        };

    /// <summary>
    /// Gets the custom namespace for the provided metric
    /// </summary>
    /// <param name="metric">The metric to get the name for</param>
    /// <returns>The datadog metric name</returns>
    public static string? GetNamespace(this Datadog.Trace.Telemetry.Metrics.Count metric)
        => metric switch
        {
            _ => null,
        };
}