//------------------------------------------------------------------------------
// <auto-generated />
// This file was automatically generated by the UpdateVendors tool.
//------------------------------------------------------------------------------
#pragma warning disable CS0618, CS0649, CS1574, CS1580, CS1581, CS1584, CS1591, CS1573, CS8018, SYSLIB0011, SYSLIB0032
#nullable enable
using global::System;
using global::System.Collections.Generic;
using global::System.IO;
using global::System.Linq;
#if !NETFRAMEWORK
using global::System.Net.Http;
#endif
using global::System.Threading;
using global::System.Threading.Tasks;
using System.Collections;
using System.ComponentModel;
using System.Diagnostics.CodeAnalysis;
using System.Globalization;
using System.Reflection;
using System.Runtime.CompilerServices;
using System.Text;
using System.Text.RegularExpressions;
using Datadog.Trace.Vendors.Serilog.Capturing;
using Datadog.Trace.Vendors.Serilog.Configuration;
using Datadog.Trace.Vendors.Serilog.Context;
using Datadog.Trace.Vendors.Serilog.Core;
using Datadog.Trace.Vendors.Serilog.Core.Enrichers;
using Datadog.Trace.Vendors.Serilog.Core.Filters;
using Datadog.Trace.Vendors.Serilog.Core.Pipeline;
using Datadog.Trace.Vendors.Serilog.Core.Sinks;
using Datadog.Trace.Vendors.Serilog.Data;
using Datadog.Trace.Vendors.Serilog.Debugging;
using Datadog.Trace.Vendors.Serilog.Events;
using Datadog.Trace.Vendors.Serilog.Formatting.Json;
using Datadog.Trace.Vendors.Serilog.Parsing;
using Datadog.Trace.Vendors.Serilog.Policies;
using Datadog.Trace.Vendors.Serilog.Rendering;
using Datadog.Trace.Vendors.Serilog.Settings.KeyValuePairs;
// Copyright 2013-2015 Serilog Contributors
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

namespace Datadog.Trace.Vendors.Serilog.Settings.KeyValuePairs;

static class CallableConfigurationMethodFinder
{
    [RequiresUnreferencedCode("Configuration methods are not trimming safe")]
    internal static IList<MethodInfo> FindConfigurationMethods(IEnumerable<Assembly> configurationAssemblies, Type configType)
    {
        var methods = configurationAssemblies
            .SelectMany(
                [RequiresUnreferencedCode("Configuration methods are not trimming safe")]
                (a) => a.ExportedTypes
                .Where(t => t.IsSealed && t.IsAbstract && !t.IsNested))
            .SelectMany(t => t.GetMethods(BindingFlags.Static | BindingFlags.Public))
            .Where(m => m.IsDefined(typeof(ExtensionAttribute), false) &&
                        m.GetParameters()[0].ParameterType == configType)
            .ToList();

        // some configuration methods are not extension methods. They are added manually
        // so they can be discovered

        // WriteTo.Sink(params ILogEventSink[]) is not an extension method
        // and we want to expose WriteTo.Sink(ILogEventSink sink) to the config system
        if (configType == typeof(LoggerSinkConfiguration))
            methods.AddRange(SurrogateConfigurationMethods.WriteTo);

        // AuditTo.Sink(params ILogEventSink[]) is not an extension method
        // and we want to expose WriteTo.Sink(ILogEventSink sink) to the config system
        if (configType == typeof(LoggerAuditSinkConfiguration))
            methods.AddRange(SurrogateConfigurationMethods.AuditTo);

        // FromLogContext is an instance method rather than an extension.
        if (configType == typeof(LoggerEnrichmentConfiguration))
            methods.AddRange(SurrogateConfigurationMethods.Enrich);

        // Some of the useful Destructure configuration methods are defined as methods rather than extension methods
        if (configType == typeof(LoggerDestructuringConfiguration))
            methods.AddRange(SurrogateConfigurationMethods.Destructure);

        // Some of the useful Filter configuration methods are defined as methods rather than extension methods
        if (configType == typeof(LoggerFilterConfiguration))
            methods.AddRange(SurrogateConfigurationMethods.Filter);

        return methods;
    }
}
