//------------------------------------------------------------------------------
// <auto-generated />
// This file was automatically generated by the UpdateVendors tool.
//------------------------------------------------------------------------------
#pragma warning disable CS0618, CS0649, CS1574, CS1580, CS1581, CS1584, CS1591, CS1573, CS8018, SYSLIB0011, SYSLIB0032
#nullable enable
using global::System;
using global::System.Collections.Generic;
using global::System.IO;
using global::System.Linq;
#if !NETFRAMEWORK
using global::System.Net.Http;
#endif
using global::System.Threading;
using global::System.Threading.Tasks;
using System.Collections;
using System.ComponentModel;
using System.Diagnostics.CodeAnalysis;
using System.Globalization;
using System.Reflection;
using System.Runtime.CompilerServices;
using System.Text;
using System.Text.RegularExpressions;
using Datadog.Trace.Vendors.Serilog.Capturing;
using Datadog.Trace.Vendors.Serilog.Configuration;
using Datadog.Trace.Vendors.Serilog.Context;
using Datadog.Trace.Vendors.Serilog.Core;
using Datadog.Trace.Vendors.Serilog.Core.Enrichers;
using Datadog.Trace.Vendors.Serilog.Core.Filters;
using Datadog.Trace.Vendors.Serilog.Core.Pipeline;
using Datadog.Trace.Vendors.Serilog.Core.Sinks;
using Datadog.Trace.Vendors.Serilog.Data;
using Datadog.Trace.Vendors.Serilog.Debugging;
using Datadog.Trace.Vendors.Serilog.Events;
using Datadog.Trace.Vendors.Serilog.Formatting.Json;
using Datadog.Trace.Vendors.Serilog.Parsing;
using Datadog.Trace.Vendors.Serilog.Policies;
using Datadog.Trace.Vendors.Serilog.Rendering;
using Datadog.Trace.Vendors.Serilog.Settings.KeyValuePairs;
// Copyright 2013-2015 Serilog Contributors
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.



// General-purpose type; not all features are used here.
// ReSharper disable MemberCanBePrivate.Global
// ReSharper disable MemberCanBeProtected.Global

namespace Datadog.Trace.Vendors.Serilog.Context;

class EnricherStack : IEnumerable<ILogEventEnricher>
{
    readonly EnricherStack? _under;
    readonly ILogEventEnricher? _top;

    EnricherStack()
    {
    }

    EnricherStack(EnricherStack under, ILogEventEnricher top)
    {
        _under = Guard.AgainstNull(under);
        Count = under.Count + 1;
        _top = top;
    }

    public Enumerator GetEnumerator() => new(this);

    IEnumerator<ILogEventEnricher> IEnumerable<ILogEventEnricher>.GetEnumerator() => new Enumerator(this);

    IEnumerator IEnumerable.GetEnumerator() => new Enumerator(this);

    public int Count { get; }

    public static EnricherStack Empty { get; } = new();

    public bool IsEmpty => _under == null;

    public EnricherStack Push(ILogEventEnricher t) => new(this, t);

    public ILogEventEnricher Top => _top!;

    internal struct Enumerator : IEnumerator<ILogEventEnricher>
    {
        readonly EnricherStack _stack;
        EnricherStack _top;
        ILogEventEnricher? _current;

        public Enumerator(EnricherStack stack)
        {
            _stack = stack;
            _top = stack;
            _current = null;
        }

        public bool MoveNext()
        {
            if (_top.IsEmpty)
                return false;
            _current = _top.Top;
            _top = _top._under!;
            return true;
        }

        public void Reset()
        {
            _top = _stack;
            _current = null;
        }

        public ILogEventEnricher Current => _current!;

        object IEnumerator.Current => _current!;

        public void Dispose()
        {
        }
    }
}
