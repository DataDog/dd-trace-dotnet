//------------------------------------------------------------------------------
// <auto-generated />
// This file was automatically generated by the UpdateVendors tool.
//------------------------------------------------------------------------------
#pragma warning disable CS0618, CS0649, CS1574, CS1580, CS1581, CS1584, CS1591, CS1573, CS8018, SYSLIB0011, SYSLIB0032
#pragma warning disable CS8600, CS8601, CS8602, CS8603, CS8604, CS8618, CS8620, CS8714, CS8762, CS8765, CS8766, CS8767, CS8768, CS8769, CS8612, CS8629, CS8774
// Decompiled with JetBrains decompiler
// Type: System.Reflection.Metadata.DocumentNameBlobHandle
// Assembly: System.Reflection.Metadata, Version=7.0.0.2, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a
// MVID: 2EB35F4B-CF50-496F-AFB8-CC6F6F79CB72

using System;
using System.Diagnostics.CodeAnalysis;


#nullable enable
namespace Datadog.Trace.VendoredMicrosoftCode.System.Reflection.Metadata
{
  /// <summary>
  /// <see cref="T:System.Reflection.Metadata.BlobHandle" /> representing a blob on #Blob heap in Portable PDB
  /// structured as Document Name.
  /// </summary>
  /// <remarks>
  /// The kind of the handle is <see cref="F:System.Reflection.Metadata.HandleKind.Blob" />.
  /// The handle is a specialization of <see cref="T:System.Reflection.Metadata.BlobHandle" /> and doesn't have a distinct kind.
  /// </remarks>
  internal readonly struct DocumentNameBlobHandle : IEquatable<DocumentNameBlobHandle>
  {
    private readonly int _heapOffset;

    private DocumentNameBlobHandle(int heapOffset) => this._heapOffset = heapOffset;

    internal static DocumentNameBlobHandle FromOffset(int heapOffset) => new DocumentNameBlobHandle(heapOffset);

    public static implicit operator BlobHandle(DocumentNameBlobHandle handle) => BlobHandle.FromOffset(handle._heapOffset);

    public static explicit operator DocumentNameBlobHandle(BlobHandle handle)
    {
      if (handle.IsVirtual)
        Throw.InvalidCast();
      return DocumentNameBlobHandle.FromOffset(handle.GetHeapOffset());
    }

    public bool IsNil => this._heapOffset == 0;

    public override bool Equals([NotNullWhen(true)] object? obj) => obj is DocumentNameBlobHandle other && this.Equals(other);

    public bool Equals(DocumentNameBlobHandle other) => this._heapOffset == other._heapOffset;

    public override int GetHashCode() => this._heapOffset;

    public static bool operator ==(DocumentNameBlobHandle left, DocumentNameBlobHandle right) => left.Equals(right);

    public static bool operator !=(DocumentNameBlobHandle left, DocumentNameBlobHandle right) => !left.Equals(right);
  }
}
