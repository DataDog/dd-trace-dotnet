//------------------------------------------------------------------------------
// <auto-generated />
// This file was automatically generated by the UpdateVendors tool.
//------------------------------------------------------------------------------
#pragma warning disable CS0618, CS0649, CS1574, CS1580, CS1581, CS1584, CS1591, CS1573, CS8018, SYSLIB0011, SYSLIB0032
#pragma warning disable CS8600, CS8601, CS8602, CS8603, CS8604, CS8618, CS8620, CS8714, CS8762, CS8765, CS8766, CS8767, CS8768, CS8769, CS8612, CS8629, CS8774
// Decompiled with JetBrains decompiler
// Type: System.Reflection.Metadata.Ecma335.MethodSignatureEncoder
// Assembly: System.Reflection.Metadata, Version=7.0.0.2, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a
// MVID: 2EB35F4B-CF50-496F-AFB8-CC6F6F79CB72


#nullable enable
using System;

namespace Datadog.Trace.VendoredMicrosoftCode.System.Reflection.Metadata.Ecma335
{
  internal readonly struct MethodSignatureEncoder
  {
    public BlobBuilder Builder { get; }

    public bool HasVarArgs { get; }

    public MethodSignatureEncoder(BlobBuilder builder, bool hasVarArgs)
    {
      this.Builder = builder;
      this.HasVarArgs = hasVarArgs;
    }

    /// <summary>
    /// Encodes return type and parameters.
    /// Returns a pair of encoders that must be used in the order they appear in the parameter list.
    /// </summary>
    /// <param name="parameterCount">Number of parameters.</param>
    /// <param name="returnType">Use first, to encode the return types.</param>
    /// <param name="parameters">Use second, to encode the actual parameters.</param>
    public void Parameters(
      int parameterCount,
      out ReturnTypeEncoder returnType,
      out ParametersEncoder parameters)
    {
      if ((uint) parameterCount > 536870911U)
        Throw.ArgumentOutOfRange(nameof (parameterCount));
      this.Builder.WriteCompressedInteger(parameterCount);
      returnType = new ReturnTypeEncoder(this.Builder);
      parameters = new ParametersEncoder(this.Builder, this.HasVarArgs);
    }

    /// <summary>Encodes return type and parameters.</summary>
    /// <param name="parameterCount">Number of parameters.</param>
    /// <param name="returnType">Called first, to encode the return type.</param>
    /// <param name="parameters">Called second, to encode the actual parameters.</param>
    /// <exception cref="T:System.ArgumentNullException"><paramref name="returnType" /> or <paramref name="parameters" /> is null.</exception>
    public void Parameters(
      int parameterCount,
      Action<ReturnTypeEncoder> returnType,
      Action<ParametersEncoder> parameters)
    {
      if (returnType == null)
        Throw.ArgumentNull(nameof (returnType));
      if (parameters == null)
        Throw.ArgumentNull(nameof (parameters));
      ReturnTypeEncoder returnType1;
      ParametersEncoder parameters1;
      this.Parameters(parameterCount, out returnType1, out parameters1);
      returnType(returnType1);
      parameters(parameters1);
    }
  }
}
