//------------------------------------------------------------------------------
// <auto-generated />
// This file was automatically generated by the UpdateVendors tool.
//------------------------------------------------------------------------------
#pragma warning disable CS0618, CS0649, CS1574, CS1580, CS1581, CS1584, CS1591, CS1573, CS8018, SYSLIB0011, SYSLIB0032
#pragma warning disable CS8600, CS8601, CS8602, CS8603, CS8604, CS8618, CS8620, CS8714, CS8762, CS8765, CS8766, CS8767, CS8768, CS8769, CS8612, CS8629, CS8774
// Decompiled with JetBrains decompiler
// Type: System.Reflection.Internal.ByteArrayMemoryProvider
// Assembly: System.Reflection.Metadata, Version=7.0.0.2, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a
// MVID: 2EB35F4B-CF50-496F-AFB8-CC6F6F79CB72

using System.IO;
using System.Threading;
using Datadog.Trace.VendoredMicrosoftCode.System.Collections.Immutable;
#pragma warning disable CS8625

#nullable enable
namespace Datadog.Trace.VendoredMicrosoftCode.System.Reflection.Internal
{
    internal sealed class ByteArrayMemoryProvider : MemoryBlockProvider
  {

    #nullable disable
    private readonly ImmutableArray<byte> _array;
    private PinnedObject _pinned;


    #nullable enable
    public ByteArrayMemoryProvider(ImmutableArray<byte> array) => this._array = array;

    protected override void Dispose(bool disposing) => Interlocked.Exchange<PinnedObject>(ref this._pinned, (PinnedObject) null)?.Dispose();

    public override int Size => this._array.Length;

    public ImmutableArray<byte> Array => this._array;

    protected override AbstractMemoryBlock GetMemoryBlockImpl(int start, int size) => (AbstractMemoryBlock) new ByteArrayMemoryBlock(this, start, size);

    public override Stream GetStream(out StreamConstraints constraints)
    {
      constraints = new StreamConstraints((object) null, 0L, this.Size);
      return (Stream) new ImmutableMemoryStream(this._array);
    }

    internal unsafe byte* Pointer
    {
      get
      {
        if (this._pinned == null)
        {
          PinnedObject pinnedObject = new PinnedObject((object) ImmutableByteArrayInterop.DangerousGetUnderlyingArray(this._array));
          if (Interlocked.CompareExchange<PinnedObject>(ref this._pinned, pinnedObject, (PinnedObject) null) != null)
            pinnedObject.Dispose();
        }
        return this._pinned.Pointer;
      }
    }
  }
}
