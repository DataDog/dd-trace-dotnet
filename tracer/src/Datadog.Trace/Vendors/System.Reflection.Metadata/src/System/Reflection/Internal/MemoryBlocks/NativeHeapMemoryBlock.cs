//------------------------------------------------------------------------------
// <auto-generated />
// This file was automatically generated by the UpdateVendors tool.
//------------------------------------------------------------------------------
#pragma warning disable CS0618, CS0649, CS1574, CS1580, CS1581, CS1584, CS1591, CS1573, CS8018, SYSLIB0011, SYSLIB0032
#pragma warning disable CS8600, CS8601, CS8602, CS8603, CS8604, CS8618, CS8620, CS8714, CS8762, CS8765, CS8766, CS8767, CS8768, CS8769, CS8612, CS8629, CS8774
#nullable enable
// Decompiled with JetBrains decompiler
// Type: System.Reflection.Internal.NativeHeapMemoryBlock
// Assembly: System.Reflection.Metadata, Version=7.0.0.2, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a
// MVID: 2EB35F4B-CF50-496F-AFB8-CC6F6F79CB72

using System;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;
using System.Threading;

namespace Datadog.Trace.VendoredMicrosoftCode.System.Reflection.Internal
{
    /// <summary>Represents memory block allocated on native heap.</summary>
    /// <remarks>Owns the native memory resource.</remarks>
    internal sealed class NativeHeapMemoryBlock : AbstractMemoryBlock
  {
    private readonly NativeHeapMemoryBlock.DisposableData _data;
    private readonly int _size;

    internal NativeHeapMemoryBlock(int size)
    {
      this._data = new NativeHeapMemoryBlock.DisposableData(size);
      this._size = size;
    }

    public override void Dispose() => this._data.Dispose();

    public override unsafe byte* Pointer => this._data.Pointer;

    public override int Size => this._size;

    private sealed class DisposableData : CriticalDisposableObject
    {
      private IntPtr _pointer;

      public DisposableData(int size)
      {
        try
        {
        }
        finally
        {
          this._pointer = Marshal.AllocHGlobal(size);
        }
      }

      protected override void Release()
      {
        try
        {
        }
        finally
        {
          IntPtr hglobal = Interlocked.Exchange(ref this._pointer, IntPtr.Zero);
          if (hglobal != IntPtr.Zero)
            Marshal.FreeHGlobal(hglobal);
        }
      }

      public unsafe byte* Pointer => (byte*) (void*) this._pointer;
    }
  }
}
