//------------------------------------------------------------------------------
// <auto-generated />
// This file was automatically generated by the UpdateVendors tool.
//------------------------------------------------------------------------------
#pragma warning disable CS0618, CS0649, CS1574, CS1580, CS1581, CS1584, CS1591, CS1573, CS8018, SYSLIB0011, SYSLIB0032
#pragma warning disable CS8600, CS8601, CS8602, CS8603, CS8604, CS8618, CS8620, CS8714, CS8762, CS8765, CS8766, CS8767, CS8768, CS8769, CS8612, CS8629, CS8774
// Decompiled with JetBrains decompiler
// Type: System.Reflection.Metadata.AssemblyFile
// Assembly: System.Reflection.Metadata, Version=7.0.0.2, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a
// MVID: 2EB35F4B-CF50-496F-AFB8-CC6F6F79CB72


#nullable enable
namespace Datadog.Trace.VendoredMicrosoftCode.System.Reflection.Metadata
{
  internal readonly struct AssemblyFile
  {

    #nullable disable
    private readonly MetadataReader _reader;
    private readonly int _rowId;


    #nullable enable
    internal AssemblyFile(MetadataReader reader, AssemblyFileHandle handle)
    {
      this._reader = reader;
      this._rowId = handle.RowId;
    }

    private AssemblyFileHandle Handle => AssemblyFileHandle.FromRowId(this._rowId);

    /// <summary>True if the file contains metadata.</summary>
    /// <remarks>
    /// Corresponds to Flags field of File table in ECMA-335 Standard.
    /// </remarks>
    public bool ContainsMetadata => this._reader.FileTable.GetFlags(this.Handle) == 0U;

    /// <summary>File name with extension.</summary>
    /// <remarks>
    /// Corresponds to Name field of File table in ECMA-335 Standard.
    /// </remarks>
    public StringHandle Name => this._reader.FileTable.GetName(this.Handle);

    /// <summary>
    /// Hash value of the file content calculated using <see cref="P:System.Reflection.Metadata.AssemblyDefinition.HashAlgorithm" />.
    /// </summary>
    /// <remarks>
    /// Corresponds to HashValue field of File table in ECMA-335 Standard.
    /// </remarks>
    public BlobHandle HashValue => this._reader.FileTable.GetHashValue(this.Handle);

    public CustomAttributeHandleCollection GetCustomAttributes() => new CustomAttributeHandleCollection(this._reader, (EntityHandle) this.Handle);
  }
}
