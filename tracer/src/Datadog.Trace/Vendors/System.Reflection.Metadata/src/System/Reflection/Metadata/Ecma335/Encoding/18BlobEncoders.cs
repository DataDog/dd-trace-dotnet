//------------------------------------------------------------------------------
// <auto-generated />
// This file was automatically generated by the UpdateVendors tool.
//------------------------------------------------------------------------------
#pragma warning disable CS0618, CS0649, CS1574, CS1580, CS1581, CS1584, CS1591, CS1573, CS8018, SYSLIB0011, SYSLIB0032
#pragma warning disable CS8600, CS8601, CS8602, CS8603, CS8604, CS8618, CS8620, CS8714, CS8762, CS8765, CS8766, CS8767, CS8768, CS8769, CS8612, CS8629, CS8774
// Decompiled with JetBrains decompiler
// Type: System.Reflection.Metadata.Ecma335.CustomAttributeElementTypeEncoder
// Assembly: System.Reflection.Metadata, Version=7.0.0.2, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a
// MVID: 2EB35F4B-CF50-496F-AFB8-CC6F6F79CB72


#nullable enable
namespace Datadog.Trace.VendoredMicrosoftCode.System.Reflection.Metadata.Ecma335
{
  internal readonly struct CustomAttributeElementTypeEncoder
  {
    public BlobBuilder Builder { get; }

    public CustomAttributeElementTypeEncoder(BlobBuilder builder) => this.Builder = builder;

    private void WriteTypeCode(SerializationTypeCode value) => this.Builder.WriteByte((byte) value);

    public void Boolean() => this.WriteTypeCode(SerializationTypeCode.Boolean);

    public void Char() => this.WriteTypeCode(SerializationTypeCode.Char);

    public void SByte() => this.WriteTypeCode(SerializationTypeCode.SByte);

    public void Byte() => this.WriteTypeCode(SerializationTypeCode.Byte);

    public void Int16() => this.WriteTypeCode(SerializationTypeCode.Int16);

    public void UInt16() => this.WriteTypeCode(SerializationTypeCode.UInt16);

    public void Int32() => this.WriteTypeCode(SerializationTypeCode.Int32);

    public void UInt32() => this.WriteTypeCode(SerializationTypeCode.UInt32);

    public void Int64() => this.WriteTypeCode(SerializationTypeCode.Int64);

    public void UInt64() => this.WriteTypeCode(SerializationTypeCode.UInt64);

    public void Single() => this.WriteTypeCode(SerializationTypeCode.Single);

    public void Double() => this.WriteTypeCode(SerializationTypeCode.Double);

    public void String() => this.WriteTypeCode(SerializationTypeCode.String);

    public void PrimitiveType(PrimitiveSerializationTypeCode type)
    {
      if ((uint) (type - (byte) 2) <= 12U)
        this.WriteTypeCode((SerializationTypeCode) type);
      else
        Throw.ArgumentOutOfRange(nameof (type));
    }

    public void SystemType() => this.WriteTypeCode(SerializationTypeCode.Type);

    public void Enum(string enumTypeName)
    {
      if (enumTypeName == null)
        Throw.ArgumentNull(nameof (enumTypeName));
      if (enumTypeName.Length == 0)
        Throw.ArgumentEmptyString(nameof (enumTypeName));
      this.WriteTypeCode(SerializationTypeCode.Enum);
      this.Builder.WriteSerializedString(enumTypeName);
    }
  }
}
