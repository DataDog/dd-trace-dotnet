//------------------------------------------------------------------------------
// <auto-generated />
// This file was automatically generated by the UpdateVendors tool.
//------------------------------------------------------------------------------
#pragma warning disable CS0618, CS0649, CS1574, CS1580, CS1581, CS1584, CS1591, CS1573, CS8018, SYSLIB0011, SYSLIB0032
#pragma warning disable CS8600, CS8601, CS8602, CS8603, CS8604, CS8618, CS8620, CS8714, CS8762, CS8765, CS8766, CS8767, CS8768, CS8769, CS8612, CS8629, CS8774
// Decompiled with JetBrains decompiler
// Type: System.Reflection.Internal.MemoryMappedFileBlock
// Assembly: System.Reflection.Metadata, Version=7.0.0.2, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a
// MVID: 2EB35F4B-CF50-496F-AFB8-CC6F6F79CB72

using System;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;
using System.Threading;


#nullable enable
namespace Datadog.Trace.VendoredMicrosoftCode.System.Reflection.Internal
{
    internal sealed class MemoryMappedFileBlock : AbstractMemoryBlock
  {

    #nullable disable
    private readonly MemoryMappedFileBlock.DisposableData _data;
    private readonly int _size;


    #nullable enable
    internal MemoryMappedFileBlock(
      IDisposable accessor,
      SafeBuffer safeBuffer,
      long offset,
      int size)
    {
      this._data = new MemoryMappedFileBlock.DisposableData(accessor, safeBuffer, offset);
      this._size = size;
    }

    public override void Dispose() => this._data.Dispose();

    public override unsafe byte* Pointer => this._data.Pointer;

    public override int Size => this._size;


    #nullable disable
    private sealed class DisposableData : CriticalDisposableObject
    {
      private IDisposable _accessor;
      private SafeBuffer _safeBuffer;
      private unsafe byte* _pointer;

      public unsafe DisposableData(IDisposable accessor, SafeBuffer safeBuffer, long offset)
      {
        try
        {
        }
        finally
        {
          byte* pointer = (byte*) null;
          safeBuffer.AcquirePointer(ref pointer);
          this._accessor = accessor;
          this._safeBuffer = safeBuffer;
          this._pointer = pointer + offset;
        }
      }

      protected override unsafe void Release()
      {
        try
        {
        }
        finally
        {
          Interlocked.Exchange<SafeBuffer>(ref this._safeBuffer, (SafeBuffer) null)?.ReleasePointer();
          Interlocked.Exchange<IDisposable>(ref this._accessor, (IDisposable) null)?.Dispose();
        }
        this._pointer = (byte*) null;
      }

      public unsafe byte* Pointer => this._pointer;
    }
  }
}
