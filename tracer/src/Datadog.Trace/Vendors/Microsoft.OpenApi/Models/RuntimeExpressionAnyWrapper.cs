//------------------------------------------------------------------------------
// <auto-generated />
// This file was automatically generated by the UpdateVendoredCode tool.
//------------------------------------------------------------------------------
#pragma warning disable CS0618, CS0649, CS1574, CS1580, CS1581, CS1584, CS1591, CS1573, CS8018, SYSLIB0011, SYSLIB0023, SYSLIB0032
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT license.

using Datadog.Trace.Vendors.Microsoft.OpenApi.Any;
using Datadog.Trace.Vendors.Microsoft.OpenApi.Expressions;
using Datadog.Trace.Vendors.Microsoft.OpenApi.Interfaces;
using Datadog.Trace.Vendors.Microsoft.OpenApi.Writers;

namespace Datadog.Trace.Vendors.Microsoft.OpenApi.Models
{
    /// <summary>
    /// The wrapper either for <see cref="IOpenApiAny"/> or <see cref="RuntimeExpression"/>
    /// </summary>
    internal class RuntimeExpressionAnyWrapper : IOpenApiElement
    {
        private IOpenApiAny _any;
        private RuntimeExpression _expression;

        /// <summary>
        /// Parameterless constructor
        /// </summary>
        public RuntimeExpressionAnyWrapper() {}

        /// <summary>
        /// Initializes a copy of an <see cref="RuntimeExpressionAnyWrapper"/> object
        /// </summary>
        public RuntimeExpressionAnyWrapper(RuntimeExpressionAnyWrapper runtimeExpressionAnyWrapper)
        {
            Any = OpenApiAnyCloneHelper.CloneFromCopyConstructor<IOpenApiAny>(runtimeExpressionAnyWrapper?.Any);
            Expression = runtimeExpressionAnyWrapper?.Expression;
        }

        /// <summary>
        /// Gets/Sets the <see cref="IOpenApiAny"/>
        /// </summary>
        public IOpenApiAny Any
        {
            get
            {
                return _any;
            }
            set
            {
                _expression = null;
                _any = value;
            }
        }

        /// <summary>
        /// Gets/Set the <see cref="RuntimeExpression"/>
        /// </summary>
        public RuntimeExpression Expression
        {
            get
            {
                return _expression;
            }
            set
            {
                _any = null;
                _expression = value;
            }
        }

        /// <summary>
        /// Write <see cref="RuntimeExpressionAnyWrapper"/>
        /// </summary>
        public void WriteValue(IOpenApiWriter writer)
        {
            Utils.CheckArgumentNull(writer);

            if (_any != null)
            {
                writer.WriteAny(_any);
            }
            else if (_expression != null)
            {
                writer.WriteValue(_expression.Expression);
            }
        }
    }
}
