//------------------------------------------------------------------------------
// <auto-generated />
// This file was automatically generated by the UpdateVendors tool.
//------------------------------------------------------------------------------
#pragma warning disable CS0618, CS0649, CS1574, CS1580, CS1581, CS1584, CS1591, CS1573, CS8018, SYSLIB0011, SYSLIB0032
#pragma warning disable CS8600, CS8601, CS8602, CS8603, CS8604, CS8618, CS8620, CS8714, CS8762, CS8765, CS8766, CS8767, CS8768, CS8769, CS8612, CS8629, CS8774
// Decompiled with JetBrains decompiler
// Type: System.Collections.Immutable.IImmutableQueue`1
// Assembly: System.Collections.Immutable, Version=7.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a
// MVID: 5F9FF90F-0D16-4469-A104-76829D3705E2

using System.Collections;
using System.Collections.Generic;
using Datadog.Trace.VendoredMicrosoftCode.System.Collections.Generic;


#nullable enable
namespace Datadog.Trace.VendoredMicrosoftCode.System.Collections.Immutable
{
    /// <summary>Represents an immutable first-in, first-out collection of objects.
    /// 
    /// NuGet package: System.Collections.Immutable (about immutable collections and how to install)</summary>
    /// <typeparam name="T">The type of elements in the queue.</typeparam>
    internal interface IImmutableQueue<T> : IEnumerable<T>, IEnumerable
  {
    /// <summary>Gets a value that indicates whether this immutable queue is empty.</summary>
    /// <returns>
    /// <see langword="true" /> if this queue is empty; otherwise, <see langword="false" />.</returns>
    bool IsEmpty { get; }

    /// <summary>Returns a new queue with all the elements removed.</summary>
    /// <returns>An empty immutable queue.</returns>
    IImmutableQueue<T> Clear();

    /// <summary>Returns the element at the beginning of the immutable queue without removing it.</summary>
    /// <exception cref="T:System.InvalidOperationException">The queue is empty.</exception>
    /// <returns>The element at the beginning of the queue.</returns>
    T Peek();

    /// <summary>Adds an element to the end of the immutable queue, and returns the new queue.</summary>
    /// <param name="value">The element to add.</param>
    /// <returns>The new immutable queue with the specified element added.</returns>
    IImmutableQueue<T> Enqueue(T value);

    /// <summary>Removes the first element in the immutable queue, and returns the new queue.</summary>
    /// <exception cref="T:System.InvalidOperationException">The queue is empty.</exception>
    /// <returns>The new immutable queue with the first element removed. This value is never <see langword="null" />.</returns>
    IImmutableQueue<T> Dequeue();
  }
}
