//------------------------------------------------------------------------------
// <auto-generated />
// This file was automatically generated by the UpdateVendors tool.
//------------------------------------------------------------------------------
#pragma warning disable CS0618, CS0649, CS1574, CS1580, CS1581, CS1584, CS1591, CS1573, CS8018, SYSLIB0011, SYSLIB0032
#pragma warning disable CS8600, CS8601, CS8602, CS8603, CS8604, CS8618, CS8620, CS8714, CS8762, CS8765, CS8766, CS8767, CS8768, CS8769, CS8612, CS8629, CS8774
// Decompiled with JetBrains decompiler
// Type: System.Collections.Immutable.KeysOrValuesCollectionAccessor`3
// Assembly: System.Collections.Immutable, Version=7.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a
// MVID: 5F9FF90F-0D16-4469-A104-76829D3705E2

using System;
using System.Collections;
using System.Collections.Generic;
using Datadog.Trace.VendoredMicrosoftCode.System.Collections.Generic;
using System.Diagnostics;


#nullable enable
namespace Datadog.Trace.VendoredMicrosoftCode.System.Collections.Immutable
{
    internal abstract class KeysOrValuesCollectionAccessor<TKey, TValue, T> : 
    ICollection<T>,
    IEnumerable<T>,
    IEnumerable,
    ICollection
    where TKey : notnull
  {

    #nullable disable
    private readonly IImmutableDictionary<TKey, TValue> _dictionary;
    private readonly IEnumerable<T> _keysOrValues;


    #nullable enable
    protected KeysOrValuesCollectionAccessor(
      IImmutableDictionary<TKey, TValue> dictionary,
      IEnumerable<T> keysOrValues)
    {
      Requires.NotNull<IImmutableDictionary<TKey, TValue>>(dictionary, nameof (dictionary));
      Requires.NotNull<IEnumerable<T>>(keysOrValues, nameof (keysOrValues));
      this._dictionary = dictionary;
      this._keysOrValues = keysOrValues;
    }

    public bool IsReadOnly => true;

    public int Count => this._dictionary.Count;

    protected IImmutableDictionary<TKey, TValue> Dictionary => this._dictionary;

    public void Add(T item) => throw new NotSupportedException();

    public void Clear() => throw new NotSupportedException();

    public abstract bool Contains(T item);

    public void CopyTo(T[] array, int arrayIndex)
    {
      Requires.NotNull<T[]>(array, nameof (array));
      Requires.Range(arrayIndex >= 0, nameof (arrayIndex));
      Requires.Range(array.Length >= arrayIndex + this.Count, nameof (arrayIndex));
      foreach (T obj in this)
        array[arrayIndex++] = obj;
    }

    public bool Remove(T item) => throw new NotSupportedException();

    public IEnumerator<T> GetEnumerator() => this._keysOrValues.GetEnumerator();


    #nullable disable
    IEnumerator IEnumerable.GetEnumerator() => (IEnumerator) this.GetEnumerator();

    void ICollection.CopyTo(Array array, int arrayIndex)
    {
      Requires.NotNull<Array>(array, nameof (array));
      Requires.Range(arrayIndex >= 0, nameof (arrayIndex));
      Requires.Range(array.Length >= arrayIndex + this.Count, nameof (arrayIndex));
      foreach (T obj in this)
        array.SetValue((object) obj, arrayIndex++);
    }

    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
    bool ICollection.IsSynchronized => true;


    #nullable enable
    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
    object ICollection.SyncRoot => (object) this;
  }
}
