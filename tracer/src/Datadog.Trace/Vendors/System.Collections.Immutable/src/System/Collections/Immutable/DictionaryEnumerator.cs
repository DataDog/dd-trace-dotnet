//------------------------------------------------------------------------------
// <auto-generated />
// This file was automatically generated by the UpdateVendors tool.
//------------------------------------------------------------------------------
#pragma warning disable CS0618, CS0649, CS1574, CS1580, CS1581, CS1584, CS1591, CS1573, CS8018, SYSLIB0011, SYSLIB0032
#pragma warning disable CS8600, CS8601, CS8602, CS8603, CS8604, CS8618, CS8620, CS8714, CS8762, CS8765, CS8766, CS8767, CS8768, CS8769, CS8612, CS8629, CS8774
// Decompiled with JetBrains decompiler
// Type: System.Collections.Immutable.DictionaryEnumerator`2
// Assembly: System.Collections.Immutable, Version=7.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a
// MVID: 5F9FF90F-0D16-4469-A104-76829D3705E2

using System.Collections;
using System.Collections.Generic;
using Datadog.Trace.VendoredMicrosoftCode.System.Collections.Generic;


#nullable enable
namespace Datadog.Trace.VendoredMicrosoftCode.System.Collections.Immutable
{
    internal sealed class DictionaryEnumerator<TKey, TValue> : IDictionaryEnumerator, IEnumerator where TKey : notnull
    {

#nullable disable
        private readonly IEnumerator<KeyValuePair<TKey, TValue>> _inner;


#nullable enable
        internal DictionaryEnumerator(IEnumerator<KeyValuePair<TKey, TValue>> inner)
        {
            Requires.NotNull<IEnumerator<KeyValuePair<TKey, TValue>>>(inner, nameof(inner));
            this._inner = inner;
        }

        public DictionaryEntry Entry
        {
            get
            {
                KeyValuePair<TKey, TValue> current = this._inner.Current;
                var key = (object)current.Key;
                current = this._inner.Current;
                var local = (object)current.Value;
                return new DictionaryEntry((object)key, (object)local);
            }
        }

        public object Key => (object)this._inner.Current.Key;

        public object? Value => (object)this._inner.Current.Value;

        public object Current => (object)this.Entry;

        public bool MoveNext() => this._inner.MoveNext();

        public void Reset() => this._inner.Reset();
    }
}
