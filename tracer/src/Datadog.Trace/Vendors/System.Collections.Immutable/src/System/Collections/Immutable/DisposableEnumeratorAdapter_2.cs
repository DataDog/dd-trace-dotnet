//------------------------------------------------------------------------------
// <auto-generated />
// This file was automatically generated by the UpdateVendors tool.
//------------------------------------------------------------------------------
#pragma warning disable CS0618, CS0649, CS1574, CS1580, CS1581, CS1584, CS1591, CS1573, CS8018, SYSLIB0011, SYSLIB0032
#pragma warning disable CS8600, CS8601, CS8602, CS8603, CS8604, CS8618, CS8620, CS8714, CS8762, CS8765, CS8766, CS8767, CS8768, CS8769, CS8612, CS8629, CS8774
// Decompiled with JetBrains decompiler
// Type: System.Collections.Immutable.DisposableEnumeratorAdapter`2
// Assembly: System.Collections.Immutable, Version=7.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a
// MVID: 5F9FF90F-0D16-4469-A104-76829D3705E2

using System;
using System.Collections.Generic;
using Datadog.Trace.VendoredMicrosoftCode.System.Collections.Generic;


#nullable enable
namespace Datadog.Trace.VendoredMicrosoftCode.System.Collections.Immutable
{
    internal struct DisposableEnumeratorAdapter<T, TEnumerator> : IDisposable where TEnumerator : struct, IEnumerator<T>
  {

    #nullable disable
    private readonly IEnumerator<T> _enumeratorObject;
    private TEnumerator _enumeratorStruct;


    #nullable enable
    internal DisposableEnumeratorAdapter(TEnumerator enumerator)
    {
      this._enumeratorStruct = enumerator;
      this._enumeratorObject = (IEnumerator<T>) null;
    }

    internal DisposableEnumeratorAdapter(IEnumerator<T> enumerator)
    {
      this._enumeratorStruct = default (TEnumerator);
      this._enumeratorObject = enumerator;
    }

    public T Current => this._enumeratorObject == null ? this._enumeratorStruct.Current : this._enumeratorObject.Current;

    public bool MoveNext() => this._enumeratorObject == null ? this._enumeratorStruct.MoveNext() : this._enumeratorObject.MoveNext();

    public void Dispose()
    {
      if (this._enumeratorObject != null)
        this._enumeratorObject.Dispose();
      else
        this._enumeratorStruct.Dispose();
    }

    public DisposableEnumeratorAdapter<T, TEnumerator> GetEnumerator() => this;
  }
}
