//------------------------------------------------------------------------------
// <auto-generated />
// This file was automatically generated by the UpdateVendors tool.
//------------------------------------------------------------------------------
#pragma warning disable CS0618, CS0649, CS1574, CS1580, CS1581, CS1584, CS1591, CS1573, CS8018, SYSLIB0011, SYSLIB0032
#pragma warning disable CS8600, CS8601, CS8602, CS8603, CS8604, CS8618, CS8620, CS8714, CS8762, CS8765, CS8766, CS8767, CS8768, CS8769, CS8612, CS8629, CS8774
// Decompiled with JetBrains decompiler
// Type: System.Collections.Immutable.SecurePooledObject`1
// Assembly: System.Collections.Immutable, Version=7.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a
// MVID: 5F9FF90F-0D16-4469-A104-76829D3705E2

using System.Runtime.CompilerServices;
using System.Diagnostics.CodeAnalysis;


#nullable enable
namespace Datadog.Trace.VendoredMicrosoftCode.System.Collections.Immutable
{
    internal sealed class SecurePooledObject<T>
  {

    #nullable disable
    private readonly T _value;
    private int _owner;


    #nullable enable
    internal SecurePooledObject(T newValue)
    {
      Requires.NotNullAllowStructs<T>(newValue, nameof (newValue));
      this._value = newValue;
    }

    internal int Owner
    {
      get => this._owner;
      set => this._owner = value;
    }

    internal T Use<TCaller>(ref TCaller caller) where TCaller : struct, ISecurePooledObjectUser
    {
      if (!this.IsOwned<TCaller>(ref caller))
        Requires.FailObjectDisposed<TCaller>(caller);
      return this._value;
    }

    internal bool TryUse<TCaller>(ref TCaller caller, [MaybeNullWhen(false)] out T value) where TCaller : struct, ISecurePooledObjectUser
    {
      if (this.IsOwned<TCaller>(ref caller))
      {
        value = this._value;
        return true;
      }
      value = default (T);
      return false;
    }

    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    internal bool IsOwned<TCaller>(ref TCaller caller) where TCaller : struct, ISecurePooledObjectUser => caller.PoolUserId == this._owner;
  }
}
