//------------------------------------------------------------------------------
// <auto-generated />
// This file was automatically generated by the UpdateVendors tool.
//------------------------------------------------------------------------------
#pragma warning disable CS0618, CS0649, CS1574, CS1580, CS1581, CS1584, CS1591, CS1573, CS8018, SYSLIB0011, SYSLIB0032
#pragma warning disable CS8600, CS8601, CS8602, CS8603, CS8604, CS8618, CS8620, CS8714, CS8762, CS8765, CS8766, CS8767, CS8768, CS8769, CS8612, CS8629, CS8774
// Decompiled with JetBrains decompiler
// Type: System.Collections.Immutable.IImmutableListQueries`1
// Assembly: System.Collections.Immutable, Version=7.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a
// MVID: 5F9FF90F-0D16-4469-A104-76829D3705E2

using System;
using System.Collections;
using System.Collections.Generic;
using Datadog.Trace.VendoredMicrosoftCode.System.Collections.Generic;


#nullable enable
namespace Datadog.Trace.VendoredMicrosoftCode.System.Collections.Immutable
{
    internal interface IImmutableListQueries<T> : 
    IReadOnlyList<T>,
    IReadOnlyCollection<T>,
    IEnumerable<T>,
    IEnumerable
  {
    ImmutableList<TOutput> ConvertAll<TOutput>(Func<T, TOutput> converter);

    void ForEach(Action<T> action);

    ImmutableList<T> GetRange(int index, int count);

    void CopyTo(T[] array);

    void CopyTo(T[] array, int arrayIndex);

    void CopyTo(int index, T[] array, int arrayIndex, int count);

    bool Exists(Predicate<T> match);

    T? Find(Predicate<T> match);

    ImmutableList<T> FindAll(Predicate<T> match);

    int FindIndex(Predicate<T> match);

    int FindIndex(int startIndex, Predicate<T> match);

    int FindIndex(int startIndex, int count, Predicate<T> match);

    T? FindLast(Predicate<T> match);

    int FindLastIndex(Predicate<T> match);

    int FindLastIndex(int startIndex, Predicate<T> match);

    int FindLastIndex(int startIndex, int count, Predicate<T> match);

    bool TrueForAll(Predicate<T> match);

    int BinarySearch(T item);

    int BinarySearch(T item, IComparer<T>? comparer);

    int BinarySearch(int index, int count, T item, IComparer<T>? comparer);
  }
}
