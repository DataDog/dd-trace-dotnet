# Configuration Keys Documentation
# This file contains the documentation for each configuration key.
# The documentation supports multi-line strings and markdown formatting.
# Auto-generated from ConfigurationKeys.cs and its partial classes.
# Preserves exact formatting including empty lines, indentation, and ALL XML tags.

DD_AAS_ENABLE_CUSTOM_METRICS: |
  Used to force the loader to start dogstatsd (in case automatic instrumentation is disabled)

DD_AAS_ENABLE_CUSTOM_TRACING: |
  Used to force the loader to start the trace agent (in case automatic instrumentation is disabled)

DD_AGENT_HOST: |
  Configuration key for the Agent host where the Tracer can send traces.
  Overridden by <see cref="Datadog.Trace.Configuration.ExporterSettings.AgentUri"/> if present.
  Default value is "localhost".
  <seealso cref="Datadog.Trace.Configuration.ExporterSettings.AgentUri"/>

DD_API_KEY: |
  Configuration key for setting the API key, used by the Agent.

DD_APM_RECEIVER_PORT: |
  Used to force a specific port binding for the Trace Agent.
  Default value is 8126.
  <seealso cref="Datadog.Trace.Configuration.ExporterSettings.AgentUri"/>

DD_APM_RECEIVER_SOCKET: |
  Configuration key for the unix domain socket where the Tracer can send traces.
  Default value is <c>null</c>.
  <seealso cref="Datadog.Trace.Configuration.ExporterSettings.TracesUnixDomainSocketPath"/>

DD_APM_TRACING_ENABLED: |
  Configuration key for enabling or disabling the generation of APM traces.
  Default value is true (enabled).

DD_APPLICATION_MONITORING_CONFIG_FILE_ENABLED: |
  Configuration key for deactivating reading the application monitoring config file through libdatadog (hands off config).
  True by default

DD_APPSEC_ENABLED: |
  Configuration key for enabling or disabling the AppSec.
  Default value is false (disabled).

DD_APPSEC_EXTRA_HEADERS: |
  Comma separated keys indicating the optional custom headers the user wants to send.
  Default value is null.

DD_APPSEC_IPHEADER: |
  Configuration key indicating the optional name of the custom header to take into account for the ip address.
  Default value is null (do not override).

DD_APPSEC_RULES: |
  Override the default rules file provided. Must be a path to a valid JSON rules file.
  Default value is null (do not override).

DD_APPSEC_KEEP_TRACES: |
  Specifies if the AppSec traces should be explicitly kept or dropped.
  Default is true, to keep all traces, false means drop all traces (by setting AutoReject as sampling priority).
  For internal testing only.

DD_APPSEC_TRACE_RATE_LIMIT: |
  Limits the amount of AppSec traces sent per second with an integer value, strictly positive.

DD_APPSEC_WAF_TIMEOUT: |
  WAF timeout in microseconds of each WAF execution (the timeout value passed to ddwaf_run).

DD_APPSEC_RASP_ENABLED: |
  default value to true. Set to false to disable exploit prevention.

DD_APPSEC_STACK_TRACE_ENABLED: |
  with a default value of true, it allows a customer to disable the generation of stack traces, for any ASM-specific purpose such as RASP.

DD_APPSEC_MAX_STACK_TRACES: |
  with a default value of 2, defines the maximum number of stack traces to be reported due to RASP events. 0 for unlimited.

DD_APPSEC_MAX_STACK_TRACE_DEPTH: |
  with a default value of 32, defines the maximum depth of a stack trace to be reported due to RASP events. O for unlimited.

DD_APPSEC_MAX_STACK_TRACE_DEPTH_TOP_PERCENT: |
  with a default value of 75, defines the percentage of frames taken from the top of the stack when trimming. Min 0, Max 100

DD_APPSEC_OBFUSCATION_PARAMETER_KEY_REGEXP: |
  The regex that will be used to obfuscate possible sensitive data in keys that are highlighted WAF as potentially malicious

DD_APPSEC_OBFUSCATION_PARAMETER_VALUE_REGEXP: |
  The regex that will be used to obfuscate possible sensitive data in values that are highlighted WAF as potentially malicious

DD_APPSEC_HTTP_BLOCKED_TEMPLATE_HTML: |
  Blocking response template for HTML content. This template is used in combination with the status code to craft and send a response upon blocking the request.

DD_APPSEC_HTTP_BLOCKED_TEMPLATE_JSON: |
  Blocking response template for Json content. This template is used in combination with the status code to craft and send a response upon blocking the request.

DD_APPSEC_AUTOMATED_USER_EVENTS_TRACKING: |
  Deprecate. Automatic tracking of user events mode. Values can be disabled, safe or extended.
  This config is in the process of being deprecated. Please use DD_APPSEC_AUTO_USER_INSTRUMENTATION_MODE
  instead.
  Values will be automatically translated:
  disabled = disabled
  safe = anon
  extended = ident

DD_APPSEC_AUTO_USER_INSTRUMENTATION_MODE: |
  Automatic instrumentation of user event mode. Values can be ident, disabled, anon.

DD_API_SECURITY_ENABLED: |
  When ASM is enabled, collects in spans endpoints apis schemas analyzed by the waf, default value is true.

DD_API_SECURITY_SAMPLE_DELAY: |
  Api security sample delay in seconds , should be a float. Set to 0 for testing purposes. default value of 30.

DD_API_SECURITY_ENDPOINT_COLLECTION_ENABLED: |
  with a default value of true, it allows a customer to disable the collection of endpoints for API Security.

DD_API_SECURITY_ENDPOINT_COLLECTION_MESSAGE_LIMIT: |
  with a default value of 300, it defines the maximum number of endpoints to be collected (serialized) for API Security.

DD_API_SECURITY_PARSE_RESPONSE_BODY: |
  Enables the parsing of the response body in the API Security module. Defaults to true

DD_EXPERIMENTAL_APPSEC_USE_UNSAFE_ENCODER: |
  Use new unsafe encoder for the waf

DD_APPSEC_WAF_DEBUG: |
  Activate debug logs for the WAF

DD_APPSEC_SCA_ENABLED: |
  Activate SCA (Software Composition Analysis), used in the backend

DD_CIVISIBILITY_AGENTLESS_ENABLED: |
  Configuration key for enabling or disabling Agentless in CI Visibility.
  Default value is false (disabled).

DD_CIVISIBILITY_AGENTLESS_URL: |
  Configuration key for setting the agentless url endpoint

DD_CIVISIBILITY_CODE_COVERAGE_COLLECTORPATH: |
  Configuration key for setting the code coverage collector path

DD_CIVISIBILITY_CODE_COVERAGE_ENABLED: |
  Configuration key for enabling or disabling Code Coverage in CI Visibility.

DD_CIVISIBILITY_CODE_COVERAGE_ENABLE_JIT_OPTIMIZATIONS: |
  Configuration key for enabling or disabling jit optimizations in the Code Coverage

DD_CIVISIBILITY_CODE_COVERAGE_MODE: |
  Configuration key for selecting the code coverage mode LineExecution or LineCallCount

DD_CIVISIBILITY_CODE_COVERAGE_PATH: |
  Configuration key for setting the code coverage jsons destination path.

DD_CIVISIBILITY_CODE_COVERAGE_SNK_FILEPATH: |
  Configuration key for re-signing assemblies after the Code Coverage modification.

DD_CIVISIBILITY_DI_ENABLED: |
  Configuration key for a kill-switch that allows to explicitly disable dynamic instrumentation even if the remote setting is enabled.

DD_CIVISIBILITY_EARLY_FLAKE_DETECTION_ENABLED: |
  Configuration key for enabling or disabling the early flake detection feature in CI Visibility

DD_CIVISIBILITY_ENABLED: |
  Configuration key for enabling or disabling CI Visibility.
  Default value is false (disabled).

DD_CIVISIBILITY_EXTERNAL_CODE_COVERAGE_PATH: |
  Configuration key for setting the external code coverage file path

DD_CIVISIBILITY_FLAKY_RETRY_COUNT: |
  Configuration key for the maximum number of retry attempts for a single test case.

DD_CIVISIBILITY_FLAKY_RETRY_ENABLED: |
  Configuration key for a kill-switch that allows to explicitly disable retries even if the remote setting is enabled.

DD_CIVISIBILITY_FORCE_AGENT_EVP_PROXY: |
  Configuration key for forcing Agent's EVP Proxy

DD_CIVISIBILITY_GAC_INSTALL_ENABLED: |
  Configuration key for enabling or disabling Datadog.Trace GAC installation

DD_CIVISIBILITY_GIT_UPLOAD_ENABLED: |
  Configuration key for enabling or disabling Uploading Git Metadata in CI Visibility
  Default Value is false (disabled)

DD_CIVISIBILITY_IMPACTED_TESTS_DETECTION_ENABLED: |
  Configuration key for enabling Impacted Tests Detection.

DD_CIVISIBILITY_ITR_ENABLED: |
  Configuration key for enabling or disabling Intelligent Test Runner in CI Visibility
  Default Value is false (disabled)

DD_CIVISIBILITY_KNOWN_TESTS_ENABLED: |
  Configuration key for enabling or disabling the known tests feature in CI Visibility

DD_CIVISIBILITY_LOGS_ENABLED: |
  Configuration key for enabling or disabling Logs direct submission.
  Default value is false (disabled).

DD_CIVISIBILITY_RUM_FLUSH_WAIT_MILLIS: |
  Configuration key for set the rum flushing wait in milliseconds

DD_CIVISIBILITY_TESTSSKIPPING_ENABLED: |
  Configuration key for enabling or disabling Intelligent Test Runner test skipping feature in CI Visibility

DD_CIVISIBILITY_TOTAL_FLAKY_RETRY_COUNT: |
  Configuration key for the maximum number of retry attempts for the entire session.

DD_CODE_ORIGIN_FOR_SPANS_ENABLED: |
  Configuration key to enable tag code origin for span.
  Default value is false.

DD_CODE_ORIGIN_FOR_SPANS_MAX_USER_FRAMES: |
  Configuration key for setting the number of frames to be tagged in exit span code origin.
  Default value is <c>8</c>.

DD_DATA_STREAMS_ENABLED: |
  Enables data streams monitoring support
  <see cref="Datadog.Trace.Configuration.TracerSettings.IsDataStreamsMonitoringEnabled"/>

DD_DATA_STREAMS_LEGACY_HEADERS: |
  Configuration key for enabling legacy binary headers in Data Streams Monitoring.
  false by default if DSM is in default state, true otherwise
  <see cref="Datadog.Trace.Configuration.TracerSettings.IsDataStreamsLegacyHeadersEnabled"/>

DD_DBM_PROPAGATION_MODE: |
  Configuration key for setting DBM propagation mode
  Default value is disabled, expected values are either: disabled, service or full
  <seealso cref="Datadog.Trace.Configuration.TracerSettings.DbmPropagationMode"/>

DD_DIAGNOSTIC_SOURCE_ENABLED: |
  Configuration key for enabling or disabling the use of System.Diagnostics.DiagnosticSource.
  Default value is <c>true</c> (enabled).

DD_DISABLED_INTEGRATIONS: |
  Configuration key for a list of integrations to disable. All other integrations remain enabled.
  Default is empty (all integrations are enabled).
  Supports multiple values separated with semi-colons.
  <seealso cref="Datadog.Trace.Configuration.TracerSettings.DisabledIntegrationNames"/>

DD_DOGSTATSD_ARGS: |
  Configuration key for arguments to pass to the DogStatsD process.

DD_DOGSTATSD_PATH: |
  Configuration key for when a standalone instance of DogStatsD needs to be started.

DD_DOGSTATSD_PIPE_NAME: |
  Configuration key for the named pipe that DogStatsD binds to.
  Default value is <c>null</c>.
  <seealso cref="Datadog.Trace.Configuration.ExporterSettings.MetricsPipeName"/>

DD_DOGSTATSD_PORT: |
  Configuration key for the DogStatsd port where the Tracer can send metrics.
  Default value is 8125.
  <seealso cref="Datadog.Trace.Configuration.ExporterSettings.DogStatsdPort"/>

DD_DOGSTATSD_SOCKET: |
  Configuration key for the unix domain socket that DogStatsD binds to.
  Default value is <c>null</c>.
  <seealso cref="Datadog.Trace.Configuration.ExporterSettings.MetricsUnixDomainSocketPath"/>

DD_DOGSTATSD_URL: |
  Configuration key for the location where the Tracer can send DogStatsD metrics.
  Default value is "udp://127.0.0.1:8125".
  <seealso cref="Datadog.Trace.Configuration.ExporterSettings.AgentUri"/>

DD_DYNAMIC_INSTRUMENTATION_DIAGNOSTICS_INTERVAL: |
  Configuration key for the interval (in seconds) between sending probe statuses.
  Default value is 3600.

DD_DYNAMIC_INSTRUMENTATION_ENABLED: |
  Configuration key for enabling or disabling Dynamic Instrumentation.
  Default value is false (disabled).

DD_DYNAMIC_INSTRUMENTATION_MAX_DEPTH_TO_SERIALIZE: |
  Configuration key for the max object depth to serialize for probe snapshots.
  Default value is 1.

DD_DYNAMIC_INSTRUMENTATION_MAX_TIME_TO_SERIALIZE: |
  Configuration key for the maximum duration (in milliseconds) to run serialization for probe snapshots.
  Default value is 150 ms.

DD_DYNAMIC_INSTRUMENTATION_REDACTED_EXCLUDED_IDENTIFIERS: |
  Configuration key for set of identifiers that are excluded from redaction decisions.

DD_DYNAMIC_INSTRUMENTATION_REDACTED_IDENTIFIERS: |
  Configuration key for set of identifiers that are used in redaction decisions.

DD_DYNAMIC_INSTRUMENTATION_REDACTED_TYPES: |
  Configuration key for set of types that are used in redaction decisions.

DD_DYNAMIC_INSTRUMENTATION_REDACTION_EXCLUDED_IDENTIFIERS: |
  Configuration key for set of identifiers that are excluded from redaction decisions.

DD_DYNAMIC_INSTRUMENTATION_UPLOAD_BATCH_SIZE: |
  Configuration key for the maximum upload batch size.
  Default value is 100.

DD_DYNAMIC_INSTRUMENTATION_UPLOAD_FLUSH_INTERVAL: |
  Configuration key for the interval (in milliseconds) between flushing statuses.
  Default value is 0 (dynamic).

DD_ENV: |
  Configuration key for the application's environment. Sets the "env" tag on every <see cref="Span"/>.
  <seealso cref="Datadog.Trace.Configuration.TracerSettings.Environment"/>

DD_EXCEPTION_DEBUGGING_ENABLED: |
  The old configuration key for enabling or disabling Exception Replay.
  Default value is false (disabled).

DD_EXCEPTION_REPLAY_CAPTURE_FULL_CALLSTACK_ENABLED: |
  Configuration key to enable capturing the variables of all the frames in exception call stack.
  Default value is false.

DD_EXCEPTION_REPLAY_CAPTURE_MAX_FRAMES: |
  Configuration key for the maximum number of frames in a call stack we would like to capture values for.

DD_EXCEPTION_REPLAY_ENABLED: |
  Configuration key for enabling or disabling Exception Replay.
  Default value is false (disabled).

DD_EXCEPTION_REPLAY_MAX_EXCEPTION_ANALYSIS_LIMIT: |
  Configuration key for setting the maximum number of exceptions to be analyzed by Exception Replay within a 1-second time interval.
  Default value is <c>100</c>.

DD_EXCEPTION_REPLAY_RATE_LIMIT_SECONDS: |
  Configuration key for the interval used to track exceptions
  Default value is <c>1</c>h.

DD_GIT_COMMIT_SHA: |
  Configuration key for the application's git commit hash. Sets the "_dd.git.commit.sha" tag on every <see cref="Span"/>.
  <seealso cref="Datadog.Trace.Configuration.TracerSettings.GitCommitSha"/>

DD_GIT_REPOSITORY_URL: |
  Configuration key for the application's git repo URL. Sets the "_dd.git.repository_url" tag on every <see cref="Span"/>.
  <seealso cref="Datadog.Trace.Configuration.TracerSettings.GitRepositoryUrl"/>

DD_HTTP_CLIENT_ERROR_STATUSES: |
  Configuration key for the application's client http statuses to set spans as errors by.
  <seealso cref="Datadog.Trace.Configuration.TracerSettings.HttpClientErrorStatusCodes"/>

DD_HTTP_SERVER_ERROR_STATUSES: |
  Configuration key for the application's server http statuses to set spans as errors by.
  <seealso cref="Datadog.Trace.Configuration.TracerSettings.HttpServerErrorStatusCodes"/>

DD_HTTP_SERVER_TAG_QUERY_STRING: |
  Configuration key for enabling/disabling reporting query string
  Default value is true
  <seealso cref="Datadog.Trace.Configuration.TracerSettings.QueryStringReportingEnabled"/>

DD_HTTP_SERVER_TAG_QUERY_STRING_SIZE: |
  Configuration key for setting the max size of the querystring to report, before obfuscation
  Default value is 5000, 0 means that we don't limit the size.
  <seealso cref="Datadog.Trace.Configuration.TracerSettings.QueryStringReportingSize"/>

DD_IAST_COOKIE_FILTER_PATTERN: |
  Configuration key for number of rows to taint on each Db query in IAST.
  Default value is 1

DD_IAST_DB_ROWS_TO_TAINT: |
  Configuration key for number of rows to taint on each Db query in IAST.
  Default value is 1

DD_IAST_DEDUPLICATION_ENABLED: |
  Configuration key for enabling or disabling the vulnerability duplication detection.
  When enabled, a vulnerability will only be reported once in the lifetime of an app,
  instead of on every usage. Default value is true (enabled).

DD_IAST_ENABLED: |
  Configuration key for enabling or disabling the IAST.
  Default value is false (disabled).

DD_IAST_MAX_CONCURRENT_REQUESTS: |
  Configuration key for the maximum number of requests
  to be analyzed by IAST concurrently. Defaults to 2.

DD_IAST_MAX_RANGE_COUNT: |
  Configuration key for the maximum number of ranges
  a tainted object can hold. Defaults to 10.

DD_IAST_REDACTION_ENABLED: |
  Configuration key for specifying a custom regex to obfuscate source keys.
  Default value is in TracerSettings

DD_IAST_REDACTION_NAME_PATTERN: |
  Configuration key for specifying a custom regex to obfuscate source keys.
  Default value is in TracerSettings

DD_IAST_REDACTION_VALUE_PATTERN: |
  Configuration key for specifying a custom regex to obfuscate source values.
  Default value is in TracerSettings

DD_IAST_REGEXP_TIMEOUT: |
  Configuration key for specifying a timeout in milliseconds to the execution of regexes in IAST
  Default value is 200ms

DD_IAST_REQUEST_SAMPLING: |
  Configuration key for controlling the percentage of requests
  to be analyzed by IAST, between 1 and 100. Defaults to 30.

DD_IAST_TELEMETRY_VERBOSITY: |
  Configuration key for IAST verbosity.
  Default value is INFORMATION

DD_IAST_TRUNCATION_MAX_VALUE_LENGTH: |
  Configuration key for IAST evidence max lenght in chars.
  Default value is 250

DD_IAST_VULNERABILITIES_PER_REQUEST: |
  Configuration key for the maximum number of IAST vulnerabilities to
  detect in a request. Defaults to 2.

DD_IAST_WEAK_CIPHER_ALGORITHMS: |
  Configuration key for controlling which weak cipher algorithms are reported.

DD_IAST_WEAK_HASH_ALGORITHMS: |
  Configuration key for controlling which weak hashing algorithms are reported.

DD_INJECTION_ENABLED: |
  Configuration key for enabling or disabling the injection of products via single step instrumentation.

DD_INSTRUMENTATION_TELEMETRY_AGENTLESS_ENABLED: |
  Configuration key for sending telemetry direct to telemetry intake. If enabled, and
  <see cref="ConfigurationKeys.ApiKey"/> is set, sends telemetry direct to intake if agent is not
  available. Enabled by default if <see cref="ConfigurationKeys.ApiKey"/> is available.

DD_INSTRUMENTATION_TELEMETRY_AGENT_PROXY_ENABLED: |
  Configuration key for sending telemetry via agent proxy. If enabled, sends telemetry
  via agent proxy. Enabled by default. If disabled, or agent is not available, telemetry
  is sent to agentless endpoint, based on <see cref="Datadog.Trace.Configuration.ConfigurationKeys.CIVisibility.AgentlessEnabled"/> setting.

DD_INSTRUMENTATION_TELEMETRY_ENABLED: |
  Configuration key for enabling or disabling internal telemetry.
  Default value is <c>true</c> (enabled).

DD_INSTRUMENTATION_TELEMETRY_URL: |
  Configuration key for the telemetry URL where the Tracer sends telemetry. Only applies when agentless
  telemetry is in use (otherwise telemetry is sent to the agent using
  <see cref="Datadog.Trace.Configuration.ExporterSettings.AgentUri"/> instead)

DD_INTERNAL_TELEMETRY_DEBUG_ENABLED: |
  Configuration key for whether to enable debug mode of telemetry.
  <see cref="Datadog.Trace.Telemetry.TelemetrySettings.DebugEnabled"/>

DD_INTERNAL_WAIT_FOR_DEBUGGER_ATTACH: |
  Configuration key for enabling or disabling the Tracer's debugger mode.
  Default value is false (disabled).

DD_INTERNAL_WAIT_FOR_NATIVE_DEBUGGER_ATTACH: |
  Configuration key for enabling or disabling the Tracer's native debugger mode.
  Default value is false (disabled).

DD_LOGS_DIRECT_SUBMISSION_AZURE_FUNCTIONS_HOST_ENABLED: |
  Configuration key to enable or disable direct log submission for Azure Functions host.
  Default value is <c>false</c>.

DD_LOGS_DIRECT_SUBMISSION_BATCH_PERIOD_SECONDS: |
  Configuration key for the time to wait between checking for batches
  Default value is <c>2</c>s.

DD_LOGS_DIRECT_SUBMISSION_HOST: |
  Set the name of the originating host for direct logs submission.
  Required for direct logs submission (default is machine name).

DD_LOGS_DIRECT_SUBMISSION_INTEGRATIONS: |
  Configuration key for a list of direct log submission integrations to enable.
  Only selected integrations are enabled for direct log submission
  Default is empty (direct log submission disabled).
  Supports multiple values separated with semi-colons.

DD_LOGS_DIRECT_SUBMISSION_MAX_BATCH_SIZE: |
  Configuration key for the maximum number of logs to send at one time
  Default value is <c>1,000</c>, the maximum accepted by the Datadog log API

DD_LOGS_DIRECT_SUBMISSION_MAX_QUEUE_SIZE: |
  Configuration key for the maximum number of logs to hold in internal queue at any one time
  Default value is <c>100,000</c>.

DD_LOGS_DIRECT_SUBMISSION_MINIMUM_LEVEL: |
  Configuration key for the minimum level logs should have to be sent to the intake.
  Default value is <c>Information</c>.
  Should be one of <c>Verbose</c>,<c>Debug</c>,<c>Information</c>,<c>Warning</c>,<c>Error</c>,<c>Fatal</c>

DD_LOGS_DIRECT_SUBMISSION_SOURCE: |
  Set the originating source for direct logs submission.
  Default is 'csharp'

DD_LOGS_DIRECT_SUBMISSION_TAGS: |
  Configuration key for a list of tags to be applied globally to all logs directly submitted.
  Supports multiple key key-value pairs which are comma-separated, and for which the key and
  value are colon-separated. For example Key1:Value1, Key2:Value2. If not provided,
  <see cref="ConfigurationKeys.GlobalTags"/> are used instead

DD_LOGS_DIRECT_SUBMISSION_URL: |
  Configuration key for the url to send logs to.
  Default value uses the domain set in <see cref="ConfigurationKeys.Site"/>, so defaults to
  <c>https://http-intake.logs.datadoghq.com:443</c>.

DD_LOGS_INJECTION: |
  Configuration key for enabling or disabling the automatic injection
  of correlation identifiers into the logging context.
  <seealso cref="Datadog.Trace.Configuration.TracerSettings.LogsInjectionEnabled"/>

DD_MAX_LOGFILE_SIZE: |
  Configuration key for setting the approximate maximum size,
  in bytes, for Tracer log files.
  Default value is 10 MB.

DD_MAX_TRACES_PER_SECOND: |
  Configuration key for setting the number of traces allowed
  to be submitted per second.
  <seealso cref="Datadog.Trace.Configuration.TracerSettings.MaxTracesSubmittedPerSecond"/>

DD_METRICS_OTEL_ENABLED: |
  Enables experimental support for exporting OTLP metrics generated by the OpenTelemetry Metrics API.
  This feature is only available starting with .NET 6.0, as it relies on the BCL class MeterListener
  which is shipped in-box starting with .NET 6.

DD_METRICS_OTEL_METER_NAMES: |
  List of meters to add to the metrics exporter for the experimental OpenTelemetry Metrics API support.

DD_PROXY_HTTPS: |
  Configuration key to set a proxy server for https requests.

DD_PROXY_NO_PROXY: |
  Configuration key to set a list of hosts that should bypass the proxy.
  The list is space-separated.

DD_REMOTE_CONFIGURATION_ENABLED: |
  Is remote configuration management (RCM) enabled. Defaults to <c>true</c>. RCM requires
  the use of the full agent, so will not always be available. This switch is primarily
  intended for testing and for explicitly disabling RCM even though it is available.

DD_REMOTE_CONFIG_POLL_INTERVAL_SECONDS: |
  Configuration key for RCM poll interval (in seconds).
  Default value is 5 s
  Maximum value is 5 s

DD_RUNTIME_METRICS_ENABLED: |
  Configuration key for enabling or disabling runtime metrics sent to DogStatsD.
  Default value is <c>false</c> (disabled).

DD_SERVICE: |
  Configuration key for the application's default service name.
  Used as the service name for top-level spans,
  and used to determine service name of some child spans.
  <seealso cref="Datadog.Trace.Configuration.TracerSettings.ServiceName"/>

DD_SITE: |
  Configuration key for setting the default Datadog destination site.
  Defaults to "datadoghq.com".

DD_SPAN_SAMPLING_RULES: |
  Configuration key for setting custom <em>span</em> sampling rules based on glob patterns.
  Comma separated list of span sampling rules.
  The rule is matched in order of specification. The first match in a list is used.
  The supported glob pattern characters are '*' and '?'.
  A '*' matches any contiguous substring.
  A '?' matches exactly one character.

  Per entry:
      The item "service" is a glob pattern string, to match on the service name.
          Optional and defaults to '*'.
      The item "name" is a glob pattern string, to match on the operation name.
          Optional and defaults to '*'.
      The item "sample_rate" is a float and is the probability of keeping a matched span.
          Optional and defaults to 1.0 (keep all).
      The item "max_per_second" is a float and is the maximum number of spans that can be kept per second for the rule.
          Optional and defaults to unlimited.

  Examples:
  Match all spans that have a service name of "cart" and an operation name of "checkout" with a kept limit of 1000 per second.
      "[{"service": "cart", "name": "checkout", "max_per_second": 1000}]"

  Match 50% of spans that have a service name of "cart" and an operation name of "checkout" with a kept limit of 1000 per second.
      "[{"service": "cart", "name": "checkout", "sample_rate": 0.5, "max_per_second": 1000}]"

  Match all spans that start with "cart" without any limits and any operation name.
      "[{"service": "cart*"}]"
  <seealso cref="Datadog.Trace.Configuration.TracerSettings.SpanSamplingRules"/>

DD_SYMBOL_DATABASE_BATCH_SIZE_BYTES: |
  Configuration key for the maximum symbol size to upload (in bytes).
  Default value is 1 mb.

DD_SYMBOL_DATABASE_COMPRESSION_ENABLED: |
  Configuration key for enabling or disabling compression for symbols payload.
  Default value is true (enabled).

DD_SYMBOL_DATABASE_THIRD_PARTY_DETECTION_EXCLUDES: |
  Configuration key for a separated comma list of libraries to exclude in the 3rd party detection
  Default value is empty.

DD_SYMBOL_DATABASE_THIRD_PARTY_DETECTION_INCLUDES: |
  Configuration key for a separated comma list of libraries to include in the 3rd party detection
  Default value is empty.

DD_SYMBOL_DATABASE_UPLOAD_ENABLED: |
  Configuration key for allowing upload of symbol data (such as method names, parameter names, etc) to Datadog.
  Default value is true (enabled).

DD_TAGS: |
  Configuration key for a list of tags to be applied globally to spans.
  Supports multiple key key-value pairs which are comma-separated, and for which the key and
  value are colon-separated. For example Key1:Value1, Key2:Value2
  <seealso cref="Datadog.Trace.Configuration.TracerSettings.GlobalTags"/>

DD_TELEMETRY_DEPENDENCY_COLLECTION_ENABLED: |
  Configuration key for whether dependency data is sent via telemetry.
  Required for some ASM features. Default value is <c>true</c> (enabled).
  <see cref="Datadog.Trace.Telemetry.TelemetrySettings.DependencyCollectionEnabled"/>

DD_TELEMETRY_HEARTBEAT_INTERVAL: |
  Configuration key for how often telemetry should be sent, in seconds. Must be between 1 and 3600.
  For testing purposes. Defaults to 60
  <see cref="Datadog.Trace.Telemetry.TelemetrySettings.HeartbeatInterval"/>

DD_TELEMETRY_LOG_COLLECTION_ENABLED: |
  Configuration key for whether to enable redacted error log collection.

DD_TELEMETRY_METRICS_ENABLED: |
  Configuration key for whether telemetry metrics should be sent.
  <see cref="Datadog.Trace.Telemetry.TelemetrySettings.MetricsEnabled"/>

DD_TEST_MANAGEMENT_ATTEMPT_TO_FIX_RETRIES: |
  Configuration key for the number of retries to fix a flaky test.

DD_TEST_MANAGEMENT_ENABLED: |
  Configuration key for enabling or disabling the Test Management feature.

DD_TEST_SESSION_NAME: |
  Configuration key for set the test session name

DD_THIRD_PARTY_DETECTION_EXCLUDES: |
  Configuration key for a separated comma list of libraries to exclude for the 3rd party detection
  Default value is empty.

DD_THIRD_PARTY_DETECTION_INCLUDES: |
  Configuration key for a separated comma list of libraries to include in the 3rd party detection
  Default value is empty.

DD_TRACE_128_BIT_TRACEID_GENERATION_ENABLED: |
  Enables generating 128-bit trace ids instead of 64-bit trace ids.
  Note that a 128-bit trace id may be received from an upstream service or from
  an Activity even if we are not generating them ourselves.
  Default value is <c>true</c> (enabled).

DD_TRACE_128_BIT_TRACEID_LOGGING_ENABLED: |
  Enables injecting 128-bit trace ids into logs as a hexadecimal string.
  If disabled, 128-bit trace ids will be truncated to the lower 64 bits,
  and injected as decimal strings. 64-bit trace ids are
  always injected as decimal strings, regardless of this setting.
  If unset, this configuration will take the value of the <see cref="ConfigurationKeys.FeatureFlags.TraceId128BitGenerationEnabled"/> configuration,
  which is <c>true</c> by default.
  Note: This configuration can be set independently of the <see cref="ConfigurationKeys.FeatureFlags.TraceId128BitGenerationEnabled"/> configuration,
  so it's possible to inject 128-bit trace ids into logs even if the application is only generating 64-bit trace ids, since distributed traces from upstream
  services may contain 128-bit trace ids.

DD_TRACE_ACTIVITY_LISTENER_ENABLED: |
  Configuration key to enable or disable the ActivityListener.

DD_TRACE_AGENT_ARGS: |
  Configuration key for arguments to pass to the Trace Agent process.

DD_TRACE_AGENT_PATH: |
  Configuration key for when a standalone instance of the Trace Agent needs to be started.

DD_TRACE_AGENT_PORT: |
  Configuration key for the Agent port where the Tracer can send traces.
  Default value is 8126.
  <seealso cref="Datadog.Trace.Configuration.ExporterSettings.AgentUri"/>

DD_TRACE_AGENT_URL: |
  Configuration key for the Agent URL where the Tracer can send traces.
  Default value is "http://localhost:8126".
  <seealso cref="Datadog.Trace.Configuration.ExporterSettings.AgentUri"/>

DD_TRACE_ANALYTICS_ENABLED: |
  Configuration key for enabling or disabling default Analytics.
  <seealso cref="Datadog.Trace.Configuration.TracerSettings.AnalyticsEnabled"/>

DD_TRACE_AWS_ADD_SPAN_POINTERS: |
  Configuration key for toggling span pointers on AWS requests.
  Default value is true

DD_TRACE_AZURE_EVENTHUBS_BATCH_LINKS_ENABLED: |
  Configuration key for enabling or disabling span links creation for Azure EventHubs batch operations.
  When enabled, TryAdd spans are created and linked to the send span.
  When disabled, TryAdd spans are not created, and therefore they are never linked to the send span.
  Default value is <c>true</c> (enabled).
  <seealso cref="Datadog.Trace.Configuration.TracerSettings.AzureEventHubsBatchLinksEnabled"/>

DD_TRACE_AZURE_SERVICEBUS_BATCH_LINKS_ENABLED: |
  Configuration key to enable or disable the creation of individual message spans and span links
  when using Azure Service Bus batch operations.
  Default value is <c>true</c> (enabled).
  <seealso cref="Datadog.Trace.Configuration.TracerSettings.AzureServiceBusBatchLinksEnabled"/>

DD_TRACE_BAGGAGE_MAX_BYTES: |
  Configuration key to set the maximum number of bytes that can be
  injected into the baggage header when propagating to a downstream service.
  Default value is 8192 bytes.
  <seealso cref="Datadog.Trace.Configuration.TracerSettings.BaggageMaximumBytes"/>

DD_TRACE_BAGGAGE_MAX_ITEMS: |
  Configuration key to set the maximum number of items that can be
  injected into the baggage header when propagating to a downstream service.
  Default value is 64 items.
  <seealso cref="Datadog.Trace.Configuration.TracerSettings.BaggageMaximumItems"/>

DD_TRACE_BAGGAGE_TAG_KEYS: |
  Configuration key for controlling which baggage keys are converted into span tags.
  Default value is "user.id,session.id,account.id".

  Behavior options:
  - Empty string: No baggage keys are converted into span tags (feature disabled)
  - Comma-separated list: Only baggage keys matching exact, case-sensitive names in the list are added as span tags
  - Wildcard (*): All baggage keys are converted into span tags
  <seealso cref="Datadog.Trace.Configuration.TracerSettings.BaggageTagKeys"/>

DD_TRACE_BATCH_INTERVAL: |
  Configuration key for setting the batch interval in milliseconds for the serialization queue.
  Set to 0 to disable.

DD_TRACE_BUFFER_SIZE: |
  Configuration key for setting the size in bytes of the trace buffer

DD_TRACE_CLIENT_IP_ENABLED: |
  Configuration key indicating if the header should be collected. The default for DD_TRACE_CLIENT_IP_ENABLED is false.
  <seealso cref="Datadog.Trace.Configuration.TracerSettings.IpHeaderEnabled"/>

DD_TRACE_CLIENT_IP_HEADER: |
  Configuration key indicating the optional name of the custom header to take into account to report the ip address from.
  If this variable is set all other IP related headers should be ignored
  Default value is null (do not override).
  <seealso cref="Datadog.Trace.Configuration.TracerSettings.IpHeader"/>

DD_TRACE_CONFIG_FILE: |
  Configuration key for the path to the configuration file.
  Can only be set with an environment variable
  or in the <c>app.config</c>/<c>web.config</c> file.

DD_TRACE_DATA_PIPELINE_ENABLED: |
  Use libdatadog data pipeline to send traces.
  Default value is <c>false</c> (disabled).

DD_TRACE_DEBUG: |
  Configuration key for enabling or disabling the Tracer's debug mode.
  Default value is false (disabled).

DD_TRACE_DEBUG_LOOKUP_FALLBACK: |
  Configuration key for forcing the automatic instrumentation to only use the fallback method lookup mechanism.

DD_TRACE_DEBUG_LOOKUP_MDTOKEN: |
  Configuration key for forcing the automatic instrumentation to only use the mdToken method lookup mechanism.

DD_TRACE_DELAY_WCF_INSTRUMENTATION_ENABLED: |
  Configuration key to enable or disable the updated WCF instrumentation that delays execution
  until later in the WCF pipeline when the WCF server exception handling is established.
  <seealso cref="Datadog.Trace.Configuration.TracerSettings.DelayWcfInstrumentationEnabled"/>

DD_TRACE_DISABLED_ACTIVITY_SOURCES: |
  Configuration key for a list of ActivitySource names (supports globbing) that will be disabled.
  Default is empty (all ActivitySources will be subscribed to by default).
  <para><b>Disabling ActivitySources may break distributed tracing if those Activities are used to propagate trace context.</b></para>
  <para>
  Supports multiple values separated with commas.
  For example: "SomeGlob.*.PatternSource,Some.Specific.Source"
  </para>
  <remarks>
  <para>
  When the tracer doesn't subscribe to an ActivitySource, we will <em>NOT</em> propagate the trace context from those Activities (we don't see them anymore).
  <br/><b>This means that distributed tracing flows that rely on these Activities for context propagation
  will break and cause disconnected traces.</b>
  </para>
  <para>
  Potential impact on distributed tracing:
  <list type="bullet">
  <item>
    <description>
      Service A -> Ignored Activity -> Service B
      <para>Creates a single trace with Service A as root and Service B as child</para>
    </description>
  </item>
  <item>
    <description>
      Service A -> Disabled Activity -> Service B
      <para>Creates TWO separate traces with Service A and Service B each as root spans</para>
    </description>
  </item>
  </list>
  </para>
  </remarks>

DD_TRACE_DISABLED_ADONET_COMMAND_TYPES: |
  Configuration key for the comma-separated list of user disabled
  ADO.NET CommandType names that should not have Span created for them.
  <para>"InterceptableDbCommand" and "ProfiledDbCommand" are always disabled by default.</para>
  <seealso cref="Datadog.Trace.Configuration.TracerSettings.DisabledAdoNetCommandTypes"/>

DD_TRACE_ENABLED: |
  Configuration key for enabling or disabling the Tracer.
  Default value is true (enabled).
  <seealso cref="Datadog.Trace.Configuration.TracerSettings.TraceEnabled"/>

DD_TRACE_EXPAND_ROUTE_TEMPLATES_ENABLED: |
  Configuration key for controlling whether route parameters in ASP.NET and ASP.NET Core resource names
  should be expanded with their values. Only applies when
  <see cref="ConfigurationKeys.FeatureFlags.RouteTemplateResourceNamesEnabled"/> is enabled.
  <seealso cref="Datadog.Trace.Configuration.TracerSettings.ExpandRouteTemplatesEnabled"/>

DD_TRACE_EXPERIMENTAL_FEATURES_ENABLED: |
  Configuration key to enable experimental features.

DD_TRACE_GIT_METADATA_ENABLED: |
  Configuration key for enabling the tagging of every telemetry event with git metadata.
  Default value is true (enabled).
  <seealso cref="Datadog.Trace.Configuration.TracerSettings.GitMetadataEnabled"/>

DD_TRACE_GRAPHQL_ERROR_EXTENSIONS: |
  Configuration key for specifying which GraphQL error extensions to capture.
  A comma-separated list of extension keys to capture. Empty or not present means no extensions are captured.
  <seealso cref="Datadog.Trace.Configuration.TracerSettings.GraphQLErrorExtensions"/>

DD_TRACE_GRPC_TAGS: |
  Configuration key for a map of metadata keys to tag names.
  Automatically apply GRPC metadata values as tags on traces.
  <seealso cref="Datadog.Trace.Configuration.TracerSettings.HeaderTags"/>

DD_TRACE_HEADER_TAGS: |
  Configuration key for a map of header keys to tag names.
  Automatically apply header values as tags on traces.
  <seealso cref="Datadog.Trace.Configuration.TracerSettings.HeaderTags"/>

DD_TRACE_HEADER_TAG_NORMALIZATION_FIX_ENABLED: |
  Enables a fix for header tags normalization.
  We used to normalize tag names even if they were specified in user configuration, but we should not.
  Default value is <c>true</c>.

DD_TRACE_HTTP_CLIENT_ERROR_STATUSES: |
  Configuration key for the application's client http statuses to set spans as errors by.
  <seealso cref="Datadog.Trace.Configuration.TracerSettings.HttpClientErrorStatusCodes"/>

DD_TRACE_HTTP_CLIENT_EXCLUDED_URL_SUBSTRINGS: |
  Configuration key for overriding which URLs are skipped by the tracer.
  <seealso cref="Datadog.Trace.Configuration.TracerSettings.HttpClientExcludedUrlSubstrings"/>

DD_TRACE_HTTP_SERVER_ERROR_STATUSES: |
  Configuration key for the application's server http statuses to set spans as errors by.
  <seealso cref="Datadog.Trace.Configuration.TracerSettings.HttpServerErrorStatusCodes"/>

DD_TRACE_INJECT_CONTEXT_INTO_STORED_PROCEDURES_ENABLED: |
  Configuration key to enable or disable the injection of the Datadog trace context into stored procedures.
  Default value is <c>false</c> (enabled).
  When enabled, Datadog trace context will be injected into individual stored procedure calls when the following requirements are met:
  <ul>
    <li>The database is Microsoft SQL Server and <see cref="TracerSettings.DbmPropagationMode"/> is set to 
  <c>service</c> or 
  <c>full</c>.</li>
    <li>The stored procedure call does not have <c>Output</c>, <c>InputOutput</c>, or <c>Return</c> ADO.NET command parameters.</li>
  </ul>

DD_TRACE_KAFKA_CREATE_CONSUMER_SCOPE_ENABLED: |
  Configuration key to enable or disable the creation of a span context on exiting a successful Kafka
  Consumer.Consume() call, and closing the scope on entering Consumer.Consume().
  Default value is <c>true</c> (enabled).
  <seealso cref="Datadog.Trace.Configuration.TracerSettings.KafkaCreateConsumerScopeEnabled"/>

DD_TRACE_LOGFILE_RETENTION_DAYS: |
  Configuration key for setting in number of days when to delete log files based on their last writetime date.

DD_TRACE_LOGGING_RATE: |
  Configuration key for setting the number of seconds between,
  identical log messages, for Tracer log files.
  Default value is 0 and setting to 0 disables rate limiting.

DD_TRACE_LOG_DIRECTORY: |
  Configuration key for setting the directory of the .NET Tracer logs.
  Overrides the value in <see cref="Datadog.Trace.Configuration.ConfigurationKeys.TraceLogPath"/> if present.
  Default value is "%ProgramData%"\Datadog .NET Tracer\logs\" on Windows
  or "/var/log/datadog/dotnet/" on Linux.

DD_TRACE_LOG_SINKS: |
  Configuration key for locations to write internal diagnostic logs.
  Currently only <c>file</c> is supported
  Defaults to <c>file</c>

DD_TRACE_METHODS: |
  Configuration key for enabling automatic instrumentation on specified methods.
  Default value is "" (disabled).

DD_TRACE_METRICS_ENABLED: |
  Configuration key for enabling or disabling internal metrics sent to DogStatsD.
  Default value is <c>false</c> (disabled).

DD_TRACE_OBFUSCATION_QUERY_STRING_REGEXP: |
  Configuration key for specifying a custom regex to obfuscate query strings.
  Default value is in TracerSettingsConstants
   WARNING: This regex cause crashes under netcoreapp2.1 / linux / arm64, dont use on manual instrumentation in this environment
  <seealso cref="Datadog.Trace.Configuration.TracerSettings.ObfuscationQueryStringRegex"/>

DD_TRACE_OBFUSCATION_QUERY_STRING_REGEXP_TIMEOUT: |
  Configuration key for specifying a timeout in milliseconds to the execution of the query string obfuscation regex
  Default value is 200ms
  <seealso cref="Datadog.Trace.Configuration.TracerSettings.ObfuscationQueryStringRegexTimeout"/>

DD_TRACE_OTEL_ENABLED: |
  Enables beta support for instrumentation via the System.Diagnostics API and the OpenTelemetry SDK.

DD_TRACE_PARTIAL_FLUSH_ENABLED: |
  Configuration key to enable sending partial traces to the agent

DD_TRACE_PARTIAL_FLUSH_MIN_SPANS: |
  Configuration key to set the minimum number of closed spans in a trace before it's partially flushed

DD_TRACE_PEER_SERVICE_DEFAULTS_ENABLED: |
  Configuration key for automatically populating the peer.service tag
  from predefined precursor attributes when the span attribute schema is v0.
  This is ignored when the span attribute schema is v1 or later.
  Default value is false

DD_TRACE_PEER_SERVICE_MAPPING: |
  Configuration key for a map of services to rename.
  <seealso cref="Datadog.Trace.Configuration.TracerSettings.PeerServiceNameMappings"/>

DD_TRACE_PIPE_NAME: |
  Configuration key for the named pipe where the Tracer can send traces.
  Default value is <c>null</c>.
  <seealso cref="Datadog.Trace.Configuration.ExporterSettings.TracesPipeName"/>

DD_TRACE_PIPE_TIMEOUT_MS: |
  Configuration key for setting the timeout in milliseconds for named pipes communication.
  Default value is <c>0</c>.
  <seealso cref="Datadog.Trace.Configuration.ExporterSettings.TracesPipeTimeoutMs"/>

DD_TRACE_PROPAGATION_BEHAVIOR_EXTRACT: |
  Configuration key for setting the header extraction propagation behavior. Accepted values are:
  <ul>
    <li>continue: Extracted span context becomes the parent and baggage is propagated</li>
    <li>restart: Extracted span context becomes a span link (a new trace is started) and baggage is propagated</li>
    <li>ignore: We disregard the incoming trace context headers and we also disregard baggage</li>
  </ul>
  Default value is continue.

DD_TRACE_PROPAGATION_EXTRACT_FIRST: |
  Configuration key to configure if propagation should only extract the first header once a configure
  propagator extracts a valid trace context.
  <seealso cref="Datadog.Trace.Configuration.TracerSettings.PropagationExtractFirstOnly"/>

DD_TRACE_PROPAGATION_STYLE: |
  Configuration key for setting the propagation style for both header injection and extraction.
  If <see cref="Datadog.Trace.Configuration.TracerSettings.PropagationStyleInject"/> or <see cref="Datadog.Trace.Configuration.TracerSettings.PropagationStyleExtract"/> are also defined,
  they will override any header injections or extraction styled defined here, respectively.
  <seealso cref="Datadog.Trace.Propagators.ContextPropagationHeaderStyle"/>

DD_TRACE_PROPAGATION_STYLE_EXTRACT: |
  Configuration key for setting the header extraction propagation style.
  If DD_TRACE_PROPAGATION_STYLE is also defined, this value overrides the header extraction styles.
  <seealso cref="Datadog.Trace.Propagators.ContextPropagationHeaderStyle"/>
  <seealso cref="Datadog.Trace.Configuration.TracerSettings.PropagationStyleExtract"/>

DD_TRACE_PROPAGATION_STYLE_INJECT: |
  Configuration key for setting the header injection propagation style.
  If DD_TRACE_PROPAGATION_STYLE is also defined, this value overrides the header injection styles.
  <seealso cref="Datadog.Trace.Propagators.ContextPropagationHeaderStyle"/>
  <seealso cref="Datadog.Trace.Configuration.TracerSettings.PropagationStyleInject"/>

DD_TRACE_RATE_LIMIT: |
  Configuration key for setting the number of traces allowed
  to be submitted per second.
  <seealso cref="Datadog.Trace.Configuration.TracerSettings.MaxTracesSubmittedPerSecond"/>

DD_TRACE_REMOVE_INTEGRATION_SERVICE_NAMES_ENABLED: |
  Configuration key for unifying client service names when the span
  attribute schema is v0. This is ignored when the span attribute
  schema is v1 or later.
  Default value is false

DD_TRACE_ROUTE_TEMPLATE_RESOURCE_NAMES_ENABLED: |
  Feature Flag: enables updated resource names on `aspnet.request`, `aspnet-mvc.request`,
  `aspnet-webapi.request`, and `aspnet_core.request` spans. Enables `aspnet_core_mvc.request` spans and
  additional features on `aspnet_core.request` spans.
  <seealso cref="Datadog.Trace.Configuration.TracerSettings.RouteTemplateResourceNamesEnabled"/>

DD_TRACE_SAMPLE_RATE: |
  Configuration key for setting the global rate for the sampler.

DD_TRACE_SAMPLING_RULES: |
  Configuration key for setting custom sampling rules based on regular expressions.
  Semi-colon separated list of sampling rules.
  The rule is matched in order of specification. The first match in a list is used.

  Per entry:
    The item "sample_rate" is required in decimal format.
    The item "service" is optional in regular expression format, to match on service name.
    The item "name" is optional in regular expression format, to match on operation name.

  To give a rate of 50% to any traces in a service starting with the text "cart":
    '[{"sample_rate":0.5, "service":"cart.*"}]'

  To give a rate of 20% to any traces which have an operation name of "http.request":
    '[{"sample_rate":0.2, "name":"http.request"}]'

  To give a rate of 100% to any traces within a service named "background" and with an operation name of "sql.query":
    '[{"sample_rate":1.0, "service":"background", "name":"sql.query"}]

  To give a rate of 10% to all traces
    '[{"sample_rate":0.1}]'

  To configure multiple rules, separate by semi-colon and order from most specific to least specific:
    '[{"sample_rate":0.5, "service":"cart.*"}, {"sample_rate":0.2, "name":"http.request"}, {"sample_rate":1.0, "service":"background", "name":"sql.query"}, {"sample_rate":0.1}]'

  If no rules are specified, or none match, default internal sampling logic will be used.
  <seealso cref="Datadog.Trace.Configuration.TracerSettings.CustomSamplingRules"/>

DD_TRACE_SAMPLING_RULES_FORMAT: |
  Configuration key for setting the format of <see cref="Datadog.Trace.Configuration.TracerSettings.CustomSamplingRules"/>.
  Valid values are <c>regex</c> or <c>glob</c>.
  If the value is not recognized, trace sampling rules are disabled.

DD_TRACE_SERVICE_MAPPING: |
  Configuration key for a map of services to rename.
  <seealso cref="Datadog.Trace.Configuration.TracerSettings.ServiceNameMappings"/>

DD_TRACE_SPAN_ATTRIBUTE_SCHEMA: |
  Configuration key for setting the schema version for service naming and span attributes
  Accepted values are: "v1", "v0"
  Default value is "v0"

DD_TRACE_STARTUP_LOGS: |
  Configuration key for enabling or disabling the diagnostic log at startup
  <seealso cref="Datadog.Trace.Configuration.TracerSettings.StartupDiagnosticLogEnabled"/>

DD_TRACE_STATS_COMPUTATION_ENABLED: |
  Configuration key for enabling computation of stats (aka trace metrics) on the tracer side

DD_TRACE_WCF_RESOURCE_OBFUSCATION_ENABLED: |
  Feature flag to enable obfuscating the <c>LocalPath</c> of a WCF request that goes
  into the <c>resourceName</c> of a span.
  <para>Note: that this only applies when the WCF action is an empty string.</para>
  <seealso cref="Datadog.Trace.Configuration.TracerSettings.WcfObfuscationEnabled"/>

DD_TRACE_WCF_WEB_HTTP_RESOURCE_NAMES_ENABLED: |
  Configuration key to enable or disable improved template-based resource names
  when using WCF Web HTTP. Requires <see cref="TracerSettings.DelayWcfInstrumentationEnabled"/> be set
  to true. Enabled by default
  <seealso cref="Datadog.Trace.Configuration.TracerSettings.WcfWebHttpResourceNamesEnabled"/>

DD_TRACE_X_DATADOG_TAGS_MAX_LENGTH: |
  Configuration key for the maximum length of an outgoing propagation header's value ("x-datadog-tags")
  when injecting it into downstream service calls.
  <remarks>
  This value is not used when extracting an incoming propagation header from an upstream service.
  </remarks>

DD_VERSION: |
  Configuration key for the application's version. Sets the "version" tag on every <see cref="Span"/>.
  <seealso cref="Datadog.Trace.Configuration.TracerSettings.ServiceVersion"/>

OTEL_EXPORTER_OTLP_ENDPOINT: |
  Configuration key to set the OTLP endpoint URL (fallback for metrics-specific endpoint).
  Used when <see cref="ExporterOtlpMetricsEndpoint"/> is not set.
  Expects values like `unix:///path/to/socket.sock` for UDS, `\\.\pipename\` for Windows Named Pipes.
  Default values: gRPC: http://localhost:4317, HTTP: http://localhost:4318

OTEL_EXPORTER_OTLP_HEADERS: |
  Configuration key to set custom headers for OTLP export (fallback for metrics-specific headers).
  Used when <see cref="ExporterOtlpMetricsHeaders"/> is not set.
  Format: api-key=key,other=value.

OTEL_EXPORTER_OTLP_METRICS_ENDPOINT: |
  Configuration key to set the OTLP endpoint URL for metrics.
  Takes precedence over <see cref="ExporterOtlpEndpoint"/>.
  This value typically ends with v1/metrics when using OTLP/HTTP.
  Expects values like `unix:///path/to/socket.sock` for UDS, `\\.\pipename\` for Windows Named Pipes.
  Default values: gRPC: http://localhost:4317, HTTP: http://localhost:4318/v1/metrics

OTEL_EXPORTER_OTLP_METRICS_HEADERS: |
  Configuration key to set custom headers for OTLP metrics export.
  Takes precedence over <see cref="ExporterOtlpHeaders"/>.
  Format: api-key=key,other=value.

OTEL_EXPORTER_OTLP_METRICS_PROTOCOL: |
  Configuration key to set the OTLP protocol for metrics export.
  Takes precedence over <see cref="ExporterOtlpProtocol"/>.
  Valid values: grpc, http/protobuf, http/json, defaults to http/protobuf.

OTEL_EXPORTER_OTLP_METRICS_TEMPORALITY_PREFERENCE: |
  Configuration key to set the temporality preference for OTLP metrics export.
  Supported values: delta, cumulative, lowmemory.
  Default value is delta for Datadog.
  This deviates from OpenTelemetry specification default of cumulative.

OTEL_EXPORTER_OTLP_METRICS_TIMEOUT: |
  Configuration key to set the request timeout for OTLP metrics export in milliseconds.
  Takes precedence over <see cref="ExporterOtlpTimeoutMs"/>.
  Default value is 10000ms.

OTEL_EXPORTER_OTLP_PROTOCOL: |
  Configuration key to set the OTLP protocol (fallback for metrics-specific protocol).
  Used when <see cref="ExporterOtlpMetricsProtocol"/> is not set.
  Valid values: grpc, http/protobuf, http/json, defaults to http/protobuf.

OTEL_EXPORTER_OTLP_TIMEOUT: |
  Configuration key to set the request timeout for OTLP export (fallback for metrics-specific timeout).
  Used when <see cref="ExporterOtlpMetricsTimeoutMs"/> is not set.
  Default value is 10000ms.

OTEL_LOG_LEVEL: |
  Configuration key to set the log level.

OTEL_METRICS_EXPORTER: |
  Configuration key to set the exporter for metrics.
  We only recognize the values of 'otlp' and 'none', a value of
  'none' disables the emission of metrics which is the
  equivalent of setting <see cref="ConfigurationKeys.RuntimeMetricsEnabled"/>
  to false.

OTEL_METRIC_EXPORT_INTERVAL: |
  Configuration key to set the export interval for metrics in milliseconds.
  Specifies the time interval between the start of two export attempts.
  Default value is 10000ms (10s) for Datadog.
  This deviates from OpenTelemetry specification default of 60000ms (60s).

OTEL_METRIC_EXPORT_TIMEOUT: |
  Configuration key to set the export timeout for metrics in milliseconds.
  Specifies the maximum time allowed for collecting and exporting metrics.
  Default value is 7500ms (7.5s) for Datadog.
  This deviates from OpenTelemetry specification default of 30000ms (30s).

OTEL_PROPAGATORS: |
  Configuration key for a list of tracing propagators.
  Datadog only supports a subset of the OpenTelemetry propagators.
  Also, the 'b3' OpenTelemetry propagator is mapped to the
  'b3 single header' Datadog propagator.

OTEL_RESOURCE_ATTRIBUTES: |
  Configuration key for a list of key-value pairs to be set as
  resource attributes. We currently map these to span tags.

OTEL_SDK_DISABLED: |
  Configuration key for disabling the OpenTelemetry API's.

OTEL_EXPORTER_OTLP_LOGS_ENDPOINT: |
  Configuration key to set the OTLP endpoint URL for logs.
  Takes precedence over `OTEL_EXPORTER_OTLP_ENDPOINT`.
  This value typically ends with `/v1/logs` when using OTLP/HTTP.
  Expects values like `unix:///path/to/socket.sock` for UDS, `\\.\pipe\name` for Windows Named Pipes.
  Default values: gRPC: http://localhost:4317, HTTP: http://localhost:4318/v1/logs

OTEL_EXPORTER_OTLP_LOGS_HEADERS: |
  Configuration key to set custom headers for OTLP logs export.
  Takes precedence over <see cref="ExporterOtlpHeaders"/>.
  Format: api-key=key,other=value.

OTEL_EXPORTER_OTLP_LOGS_TIMEOUT: |
  Configuration key to set the request timeout for OTLP logs export in milliseconds.
  Takes precedence over <see cref="ExporterOtlpTimeoutMs"/>.
  Default value is 10000ms.

DD_LOGS_OTEL_ENABLED: |
  Enables support for collecting and exporting logs generated by the the OpenTelemetry Logs API.
  This feature is available starting with .NET 3.1 when using Microsoft.Extensions.Logging

OTEL_SERVICE_NAME: |
  Configuration key to set the application's default service name.

OTEL_TRACES_EXPORTER: |
  Configuration key to set the exporter for traces.
  We only recognize the value 'none', which is the
  equivalent of setting <see cref="ConfigurationKeys.TraceEnabled"/>
  to false.

OTEL_TRACES_SAMPLER: |
  Configuration key to set the sampler for traces.
  to false.

OTEL_TRACES_SAMPLER_ARG: |
  Configuration key to set an additional argument for the
  traces sampler.
  to false.

_DD_INTERNAL_IS_RUNNING_IN_CIVISIBILITY: |
  An internal key used to "tell" tracer settings that we're running in CI Visibility mode

_DD_TRACE_STATS_COMPUTATION_INTERVAL: |
  Configuration key for configuring the interval (in seconds) for sending stats (aka trace metrics)

# Keys without documentation in ConfigurationKeys.cs
# These keys exist in supported-configurations.json but need documentation
