// <copyright file="VulnerabilityTypeName.cs" company="Datadog">
// Unless explicitly stated otherwise all files in this repository are licensed under the Apache 2 License.
// This product includes software developed at Datadog (https://www.datadoghq.com/). Copyright 2017 Datadog, Inc.
// </copyright>

#nullable enable
using System.ComponentModel;

namespace Datadog.Trace.Iast;

/// <summary>
/// Extension functions for VulnerabilityType enum
/// </summary>
internal static class VulnerabilityTypeName
{
    /// <summary> Undefined vulnerability </summary>
    public const string None = "NONE";

    /// <summary> WEAK_CIPHER vulnerability </summary>
    public const string WeakCipher = "WEAK_CIPHER";

    /// <summary> WEAK_HASH vulnerability </summary>
    public const string WeakHash = "WEAK_HASH";

    /// <summary> SQL_INJECTION vulnerability </summary>
    public const string SqlInjection = "SQL_INJECTION";

    /// <summary> COMMAND_INJECTION vulnerability </summary>
    public const string CommandInjection = "COMMAND_INJECTION";

    /// <summary> PATH_TRAVERSAL vulnerability </summary>
    public const string PathTraversal = "PATH_TRAVERSAL";

    /// <summary> LDAP_INJECTION vulnerability </summary>
    public const string LdapInjection = "LDAP_INJECTION";

    /// <summary> SSRF vulnerability </summary>
    public const string Ssrf = "SSRF";

    /// <summary> UNVALIDATED_REDIRECT vulnerability </summary>
    public const string UnvalidatedRedirect = "UNVALIDATED_REDIRECT";

    /// <summary> INSECURE_COOKIE vulnerability </summary>
    public const string InsecureCookie = "INSECURE_COOKIE";

    /// <summary> NO_HTTPONLY_COOKIE vulnerability </summary>
    public const string NoHttpOnlyCookie = "NO_HTTPONLY_COOKIE";

    /// <summary> NO_SAMESITE_COOKIE vulnerability </summary>
    public const string NoSameSiteCookie = "NO_SAMESITE_COOKIE";

    /// <summary> HARDCODED_SECRET vulnerability </summary>
    public const string HardcodedSecret = "HARDCODED_SECRET";

    public static string GetName(VulnerabilityType vulnerability)
    {
        return vulnerability switch
        {
            VulnerabilityType.None => None,
            VulnerabilityType.WeakCipher => WeakCipher,
            VulnerabilityType.WeakHash => WeakHash,
            VulnerabilityType.SqlInjection => SqlInjection,
            VulnerabilityType.CommandInjection => CommandInjection,
            VulnerabilityType.PathTraversal => PathTraversal,
            VulnerabilityType.LdapInjection => LdapInjection,
            VulnerabilityType.Ssrf => Ssrf,
            VulnerabilityType.UnvalidatedRedirect => UnvalidatedRedirect,
            VulnerabilityType.InsecureCookie => InsecureCookie,
            VulnerabilityType.NoHttpOnlyCookie => NoHttpOnlyCookie,
            VulnerabilityType.NoSameSiteCookie => NoSameSiteCookie,
            VulnerabilityType.HardcodedSecret => HardcodedSecret,
            _ => throw new System.ArgumentException($"VulnerabilityName for VulnerabilityType.{vulnerability} missing.", "vulnerability"),
        };
    }
}
