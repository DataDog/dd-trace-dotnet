// <copyright file="VulnerabilityStats.cs" company="Datadog">
// Unless explicitly stated otherwise all files in this repository are licensed under the Apache 2 License.
// This product includes software developed at Datadog (https://www.datadoghq.com/). Copyright 2017 Datadog, Inc.
// </copyright>

#nullable enable

using System;
using System.Collections.Generic;
using System.Linq;
using System.Runtime.InteropServices;
using System.Text;
using System.Threading.Tasks;

#if !NETCOREAPP
using Datadog.Trace.VendoredMicrosoftCode.System.Runtime.CompilerServices.Unsafe;
#else
using System.Runtime.CompilerServices;
#endif

namespace Datadog.Trace.Iast;

[StructLayout(LayoutKind.Sequential, Pack = 1)]
internal unsafe struct VulnerabilityStats
{
    private const int ElementSize = 2; // sizeof(ushort)
    private const int Size = ElementSize * Length;
    private fixed byte data[Size];

    public const int Length = VulnerabilityTypeUtils.Count;

    public VulnerabilityStats(string? route)
    {
        Route = route;
    }

    public string? Route { get; }

    public ushort this[int index]
    {
        get
        {
            if (index < 0 || index >= Length)
            {
                throw new IndexOutOfRangeException();
            }

            return Unsafe.ReadUnaligned<ushort>(ref data[index * ElementSize]);
        }

        set
        {
            if (index < 0 || index >= Length)
            {
                throw new IndexOutOfRangeException();
            }

            Unsafe.WriteUnaligned<ushort>(ref data[index * ElementSize], value);
        }
    }

    public void TransferNewVulns(ref VulnerabilityStats stats)
    {
        for (int x = 0; x < Length; x++)
        {
            var value = stats[x];
            if (value > this[x])
            {
                this[x] = value;
            }
        }
    }
}
