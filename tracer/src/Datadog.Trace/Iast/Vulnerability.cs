// <copyright file="Vulnerability.cs" company="Datadog">
// Unless explicitly stated otherwise all files in this repository are licensed under the Apache 2 License.
// This product includes software developed at Datadog (https://www.datadoghq.com/). Copyright 2017 Datadog, Inc.
// </copyright>

#nullable enable

using Datadog.Trace.Configuration;

namespace Datadog.Trace.Iast;

internal readonly struct Vulnerability
{
    private readonly IntegrationId? _integrationId;
    private readonly int _hash;

    public Vulnerability(string type, int hash, Location? location, Evidence evidence, IntegrationId? integrationId = null)
    {
        this.Type = type;
        this.Location = location;
        this.Evidence = evidence;
        this._integrationId = integrationId;
        _hash = hash;
    }

    public Vulnerability(string type, Location? location, Evidence evidence, IntegrationId? integrationId = null)
    {
        this.Type = type;
        this.Location = location;
        this.Evidence = evidence;
        this._integrationId = integrationId;
        // We do not calculate the hash according to the evidence
        _hash = IastUtils.GetHashCode(Type, Location);
    }

    public Vulnerability(string type, int hash, Evidence evidence, IntegrationId? integrationId = null)
    {
        this.Type = type;
        this._hash = hash;
        this.Evidence = evidence;
        this._integrationId = integrationId;
        this._hash = hash;
    }

    public string Type { get;  }

    public int Hash => GetHashCode();

    public Location? Location { get; }

    public Evidence Evidence { get; }

    internal IntegrationId? GetIntegrationId() => _integrationId;

    public override int GetHashCode()
    {
        return _hash;
    }
}
