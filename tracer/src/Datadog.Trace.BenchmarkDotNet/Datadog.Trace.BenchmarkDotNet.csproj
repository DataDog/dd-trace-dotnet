<Project Sdk="Microsoft.NET.Sdk">

  <PropertyGroup>
    <Version>3.2.0</Version>
    <Title>Datadog CI Visibility - BenchmarkDotNet</Title>
    <Description>BenchmarkDotNet exporter for Datadog CI Visibility</Description>
    <Nullable>enable</Nullable>
    <PackageTags>$(PackageTags);BenchmarkDotNet</PackageTags>
    <PublishRepositoryUrl>true</PublishRepositoryUrl>
    <EmbedUntrackedSources>true</EmbedUntrackedSources>
    <IncludeSymbols>true</IncludeSymbols>
    <SymbolPackageFormat>snupkg</SymbolPackageFormat>
    <PackageReadmeFile>README.md</PackageReadmeFile>
    <EmbedUntrackedSources>true</EmbedUntrackedSources>
    <GeneratePackageOnBuild>true</GeneratePackageOnBuild>
    <!-- NU* are workaround for Rider bug: https://youtrack.jetbrains.com/issue/RIDER-103207/Cannot-suppress-vulnerable-package-errors -->
    <NoWarn>NU5100;NU5128;NU1901;NU1902;NU1903;NU1904</NoWarn>
    <PackageOutputPath Condition="'$(PackageOutputPath)' == '' ">bin\$(Configuration)\packages</PackageOutputPath>
    <DefineConstants Condition=" '$(ExtraDefineConstants)' != '' ">$(DefineConstants);$(ExtraDefineConstants)</DefineConstants>
  </PropertyGroup>

  <!-- For VS testing purposes only, copy all implementation assemblies to the
       to test the loading of managed profiler assemblies from disk -->
  <PropertyGroup Condition="'$(BuildingInsideVisualStudio)'=='true' and ('$(TargetFrameworkIdentifier)' != '.NETFramework')">
    <CopyLocalLockFileAssemblies>true</CopyLocalLockFileAssemblies>
  </PropertyGroup>
  <ItemGroup>
    <PackageReference Include="BenchmarkDotNet" Version="0.13.2" />
  </ItemGroup>
  <ItemGroup>
    <ProjectReference Include="..\Datadog.Trace\Datadog.Trace.csproj" PrivateAssets="All" />
  </ItemGroup>

  <ItemGroup>
    <None Include="..\..\..\docs\Datadog.Trace.BenchmarkDotNet\README.md" Pack="true" PackagePath="\" />
  </ItemGroup>

  <ItemGroup>
    <Content Include="home\**\*.*" Pack="true" PackagePath="content\datadog;contentFiles\any\any\datadog">
      <CopyToOutputDirectory>Never</CopyToOutputDirectory>
      <PackageCopyToOutput>true</PackageCopyToOutput>
    </Content>
  </ItemGroup>

  <ItemGroup>
    <Content Update="home\**\readme.txt" Pack="false">
      <CopyToOutputDirectory>Never</CopyToOutputDirectory>
      <CopyToPublishDirectory>Never</CopyToPublishDirectory>
    </Content>

    <Content Update="home\**\*.xml" Pack="false">
      <CopyToOutputDirectory>Never</CopyToOutputDirectory>
      <CopyToPublishDirectory>Never</CopyToPublishDirectory>
    </Content>
  </ItemGroup>

  <!--
    *******************************************************************************************************************
      WARNING!!!
     The following snippet ensures that the assemblies from the reference projects (marked with PrivateAssets="All")
     are copied to the final nuget package
    *******************************************************************************************************************
  -->
  <PropertyGroup>
    <TargetsForTfmSpecificBuildOutput>$(TargetsForTfmSpecificBuildOutput);CopyProjectReferencesToPackage</TargetsForTfmSpecificBuildOutput>
  </PropertyGroup>
  <Target Name="CopyProjectReferencesToPackage" DependsOnTargets="BuildOnlySettings;ResolveReferences">
    <ItemGroup>
      <!-- Filter out unnecessary files -->
      <_ReferenceCopyLocalPaths Include="@(ReferenceCopyLocalPaths->WithMetadataValue('ReferenceSourceTarget', 'ProjectReference')->WithMetadataValue('PrivateAssets', 'All'))"/>
    </ItemGroup>

    <!-- Print batches for debug purposes -->
    <Message Text="Batch for .nupkg: ReferenceCopyLocalPaths = @(_ReferenceCopyLocalPaths), ReferenceCopyLocalPaths.DestinationSubDirectory = %(_ReferenceCopyLocalPaths.DestinationSubDirectory) Filename = %(_ReferenceCopyLocalPaths.Filename) Extension = %(_ReferenceCopyLocalPaths.Extension)" Importance="High" Condition="'@(_ReferenceCopyLocalPaths)' != ''" />

    <ItemGroup>
      <!-- Add file to package with consideration of sub folder. If empty, the root folder is chosen. -->
      <BuildOutputInPackage Include="@(_ReferenceCopyLocalPaths)" TargetPath="%(_ReferenceCopyLocalPaths.DestinationSubDirectory)"/>
    </ItemGroup>
  </Target>
  
</Project>