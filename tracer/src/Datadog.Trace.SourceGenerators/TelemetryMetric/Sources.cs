// <copyright file="Sources.cs" company="Datadog">
// Unless explicitly stated otherwise all files in this repository are licensed under the Apache 2 License.
// This product includes software developed at Datadog (https://www.datadoghq.com/). Copyright 2017 Datadog, Inc.
// </copyright>

using System;
using System.Text;

namespace Datadog.Trace.SourceGenerators.TelemetryMetric;

internal class Sources
{
    public const string Attributes = """
        // <auto-generated/>
        #nullable enable

        namespace Datadog.Trace.SourceGenerators;

        /// <summary>/
        /// Used to designate a property as corresponding to the provided
        /// <see cref="MetricType"/>. Should only be used in ITags classes.
        /// Used for source generation.
        /// </summary>
        [System.AttributeUsage(System.AttributeTargets.Enum, AllowMultiple = false)]
        internal sealed class TelemetryMetricTypeAttribute : System.Attribute
        {
            /// <summary>
            /// Initializes a new instance of the <see cref="TelemetryMetricTypeAttribute"/> class.
            /// </summary>
            /// <param name="metricType">The type of the metric, e.g. Count, Gauge</param>
            public TelemetryMetricTypeAttribute(string metricType) =>
                this.MetricType = metricType;

            /// <summary>
            /// Gets the type of the metric the enum corresponds to
            /// </summary>
            public string MetricType { get; }
        }

        /// <summary>
        /// Used to describe a specific metric defined as a field
        /// inside an enum decorated with <see cref="TelemetryMetricTypeAttribute"/>
        /// </summary>
        [System.AttributeUsage(System.AttributeTargets.Field, AllowMultiple = false)]
        internal class TelemetryMetricAttribute : System.Attribute
        {
            /// <summary>
            /// Initializes a new instance of the <see cref="TelemetryMetricAttribute"/> class.
            /// </summary>
            /// <param name="metricName">The name of the metric, as reported to Datadog</param>
            /// <param name="tagCount">The number of tags the metric requires</param>
            /// <param name="isCommon">Is the metric a "common" metric, shared across languages?</param>
            /// <param name="nameSpace">The namespace of the metric, if not the default (Tracer)</param>
            public TelemetryMetricAttribute(string metricName, int tagCount, bool isCommon, string nameSpace)
            {
                MetricName = metricName;
                TagCount = tagCount;
                IsCommon = isCommon;
                NameSpace = nameSpace;
            }

            /// <summary>
            /// Initializes a new instance of the <see cref="TelemetryMetricAttribute"/> class.
            /// Uses the default namespace
            /// </summary>
            /// <param name="metricName">The name of the metric, as reported to Datadog</param>
            /// <param name="tagCount">The number of tags the metric requires</param>
            /// <param name="isCommon">Is the metric a "common" metric, shared across languages?</param>
            public TelemetryMetricAttribute(string metricName, int tagCount, bool isCommon)
                : this(metricName, tagCount, isCommon, null!)
            {
            }

            /// <summary>
            /// Initializes a new instance of the <see cref="TelemetryMetricAttribute"/> class.
            /// Uses the default namespace and sets <see cref="IsCommon"/> to <c>true</c>
            /// </summary>
            /// <param name="metricName">The name of the metric, as reported to Datadog</param>
            /// <param name="tagCount">The number of tags the metric requires</param>
            public TelemetryMetricAttribute(string metricName, int tagCount)
                : this(metricName, tagCount, isCommon: true, null!)
            {
            }

            /// <summary>
            /// Gets the name of the metric, as reported to Datadog
            /// </summary>
            public string MetricName { get; }

            /// <summary>
            /// Gets the number of tags the metric requires
            /// </summary>
            public int TagCount { get; }

            /// <summary>
            /// Gets a value indicating whether the metric a "common" metric, shared across languages?
            /// </summary>
            public bool IsCommon { get; }

            /// <summary>
            /// Gets the namespace of the metric, if not the default (Tracer)
            /// </summary>
            public string? NameSpace { get; }

        }
        """;

    public static string CreateMetricEnumExtension(StringBuilder sb, in TelemetryMetricGenerator.EnumDetails details)
    {
        return $$"""
            // <auto-generated/>
            #nullable enable

            namespace {{details.Namespace}};
            internal static partial class {{details.ExtensionName}}
            {
                /// <summary>
                /// The number of members in the enum.
                /// </summary>
                public const int Length = {{details.Names.Count}};

                /// <summary>
                /// Gets the metric name for the provided metric
                /// </summary>
                /// <param name="metric">The metric to get the name for</param>
                /// <returns>The datadog metric name</returns>
                public static string GetName(this {{details.FullyQualifiedName}} metric)
                    => metric switch
                    {{{GetNames(sb, in details)}}
                        _ => null!,
                    };

                /// <summary>
                /// Gets whether the metric is a "common" metric, used by all tracers
                /// </summary>
                /// <param name="metric">The metric to check</param>
                /// <returns>True if the metric is a "common" metric, used by all languages</returns>
                public static bool IsCommon(this {{details.FullyQualifiedName}} metric)
                    => metric switch
                    {{{GetIsCommon(sb, in details)}}
                        _ => false,
                    };

                /// <summary>
                /// Gets the number of tags the metric should have
                /// </summary>
                /// <param name="metric">The metric to check</param>
                /// <returns>The number of tags the metric should have</returns>
                public static int ExpectedTags(this {{details.FullyQualifiedName}} metric)
                    => metric switch
                    {{{GetExpectedTags(sb, in details)}}
                        _ => 0,
                    };

                /// <summary>
                /// Gets the custom namespace for the provided metric
                /// </summary>
                /// <param name="metric">The metric to get the name for</param>
                /// <returns>The datadog metric name</returns>
                public static string? GetNamespace(this {{details.FullyQualifiedName}} metric)
                    => metric switch
                    {{{GetNamespaces(sb, in details)}}
                        _ => null,
                    };
            }
            """;
    }

    private static string GetNames(StringBuilder sb, in TelemetryMetricGenerator.EnumDetails details)
        => GetValues(sb, in details, static (s, m) => s.Append('"').Append(m.MetricName).Append('"'));

    private static string GetIsCommon(StringBuilder sb, in TelemetryMetricGenerator.EnumDetails details)
        => GetValues(sb, in details, static (s, m) => s.Append(m.IsCommon ? "true" : "false"));

    private static string GetExpectedTags(StringBuilder sb, in TelemetryMetricGenerator.EnumDetails details)
        => GetValues(sb, in details, static (s, m) => s.Append(m.TagCount));

    private static string GetNamespaces(StringBuilder sb, in TelemetryMetricGenerator.EnumDetails details)
        => GetValues(sb, in details, static (s, m) => s.Append('"').Append(m.NameSpace).Append('"'), static m => !string.IsNullOrEmpty(m.NameSpace));

    private static string GetValues(
        StringBuilder sb,
        in TelemetryMetricGenerator.EnumDetails details,
        Action<StringBuilder, TelemetryMetricGenerator.MetricDetails> action,
        Func<TelemetryMetricGenerator.MetricDetails, bool>? predicate = null)
    {
        var names = details.Names.AsArray();
        if (names is null)
        {
            return string.Empty;
        }

        sb.Clear();
        foreach (var (property, metric) in names)
        {
            if (predicate is { } && !predicate(metric))
            {
                continue;
            }

            sb.Append(@"
            ").Append(details.FullyQualifiedName).Append('.').Append(property).Append(" => ");
            action(sb, metric);
            sb.Append(',');
        }

        return sb.ToString();
    }
}
