// <copyright file="Sources.cs" company="Datadog">
// Unless explicitly stated otherwise all files in this repository are licensed under the Apache 2 License.
// This product includes software developed at Datadog (https://www.datadoghq.com/). Copyright 2017 Datadog, Inc.
// </copyright>

#nullable enable

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using Datadog.Trace.SourceGenerators.Helpers;

namespace Datadog.Trace.SourceGenerators.TelemetryMetric;

internal partial class Sources
{
    public static string CreateMetricEnumExtension(StringBuilder sb, in TelemetryMetricGenerator.EnumDetails details, Dictionary<string, EquatableArray<string>> enumDictionary)
    {
        return $$"""
            // <auto-generated/>
            #nullable enable

            namespace {{details.Namespace}};
            internal static partial class {{details.ShortName}}Extensions
            {
                /// <summary>
                /// The number of separate metrics in the <see cref="{{details.FullyQualifiedName}}" /> metric.
                /// </summary>
                public const int Length = {{details.Names.Count}};

                /// <summary>
                /// Gets the metric name for the provided metric
                /// </summary>
                /// <param name="metric">The metric to get the name for</param>
                /// <returns>The datadog metric name</returns>
                public static string GetName(this {{details.FullyQualifiedName}} metric)
                    => metric switch
                    {{{GetNames(sb, in details)}}
                        _ => null!,
                    };

                /// <summary>
                /// Gets whether the metric is a "common" metric, used by all tracers
                /// </summary>
                /// <param name="metric">The metric to check</param>
                /// <returns>True if the metric is a "common" metric, used by all languages</returns>
                public static bool IsCommon(this {{details.FullyQualifiedName}} metric)
                    => metric switch
                    {{{GetIsCommon(sb, in details)}}
                        _ => true,
                    };

                /// <summary>
                /// Gets the custom namespace for the provided metric
                /// </summary>
                /// <param name="metric">The metric to get the name for</param>
                /// <returns>The datadog metric name</returns>
                public static string? GetNamespace(this {{details.FullyQualifiedName}} metric)
                    => metric switch
                    {{{GetNamespaces(sb, in details)}}
                        _ => null,
                    };
            }
            """;
    }

    public static string CreateCountTelemetryCollectorPartial(StringBuilder sb, in TelemetryMetricGenerator.EnumDetails details, Dictionary<string, EquatableArray<string>> enumDictionary, int[] metricsToLocation, int[] entryCounts)
    {
        sb.Clear();
        sb.Append(
            $$"""
            // <auto-generated/>
            #nullable enable

            using System.Threading;

            namespace Datadog.Trace.Telemetry;
            internal partial class MetricsTelemetryCollector
            {
                // These can technically overflow, but it's _very_ unlikely as we reset every minute
                // Negative values are normalized during polling
            """);

        if (details.Names.AsArray() is { } names)
        {
            for (var i = 0; i < names.Length; i++)
            {
                sb.AppendLine();
                var (property, metric) = names[i];
                var index = metricsToLocation[i];

                if (metric.Tag2FullyQualifiedName is { } tagName2)
                {
                    var tagName1 = metric.Tag1FullyQualifiedName!;
                    var tag2EntryCount = enumDictionary[tagName2].Count;
                    sb.AppendLine(
                        $$"""
                            public void Record{{details.ShortName}}{{property}}({{tagName1}} tag1, {{tagName2}} tag2, int increment = 1)
                            {
                                var index = {{index}} + ((int)tag1 * {{tag2EntryCount}}) + (int)tag2;
                                Interlocked.Add(ref _buffer.Counts[index], increment);
                            }
                        """);
                }
                else if (metric.Tag1FullyQualifiedName is { } tagName)
                {
                    sb.AppendLine(
                        $$"""
                            public void Record{{details.ShortName}}{{property}}({{tagName}} tag, int increment = 1)
                            {
                                var index = {{index}} + (int)tag;
                                Interlocked.Add(ref _buffer.Counts[index], increment);
                            }
                        """);
                }
                else
                {
                    sb.AppendLine(
                        $$"""
                            public void Record{{details.ShortName}}{{property}}(int increment = 1)
                            {
                                Interlocked.Add(ref _buffer.Counts[{{index}}], increment);
                            }
                        """);
                }
            }
        }

        sb.Append(
            $$"""

                /// <summary>
                /// Creates the buffer for the <see cref="{{details.FullyQualifiedName}}" /> values.
                /// </summary>
                private static AggregatedMetric[] Get{{details.ShortName}}Buffer()
                    => new AggregatedMetric[]
                    {

            """);
        AddAggregatedMetrics(sb, in details, enumDictionary);
        sb.Append(
            $$"""
                    };

                /// <summary>
                /// Gets an array of metric counts, indexed by integer value of the <see cref="{{details.FullyQualifiedName}}" />.
                /// Each value represents the number of unique entries in the buffer returned by <see cref="Get{{details.ShortName}}Buffer()" />
                /// It is equal to the cardinality of the tag combinations (or 1 if there are no tags)
                /// </summary>
                private static int[] {{details.ShortName}}EntryCounts { get; }
                    = new []{ 
            """);

        foreach (var value in entryCounts)
        {
            sb.Append(value).Append(", ");
        }

        sb.AppendLine("};")
          .Append(
               $$"""

                   private const int _countsLength = {{entryCounts.Sum()}};
               }
               """);

        return sb.ToString();
    }

    public static string CreateCountITelemetryCollectorPartial(StringBuilder sb, in TelemetryMetricGenerator.EnumDetails details, Dictionary<string, EquatableArray<string>> enumDictionary)
    {
        sb.Clear();
        sb.Append(
            """
            // <auto-generated/>
            #nullable enable

            namespace Datadog.Trace.Telemetry;
            internal partial interface IMetricsTelemetryCollector
            {
            """);

        if (details.Names.AsArray() is { } names)
        {
            for (var i = 0; i < names.Length; i++)
            {
                sb.AppendLine();
                var (property, metric) = names[i];

                if (metric.Tag2FullyQualifiedName is { } tagName2)
                {
                    var tagName1 = metric.Tag1FullyQualifiedName!;
                    sb.AppendLine(
                        $$"""
                            public void Record{{details.ShortName}}{{property}}({{tagName1}} tag1, {{tagName2}} tag2, int increment = 1);
                        """);
                }
                else if (metric.Tag1FullyQualifiedName is { } tagName)
                {
                    sb.AppendLine(
                        $$"""
                            public void Record{{details.ShortName}}{{property}}({{tagName}} tag, int increment = 1);
                        """);
                }
                else
                {
                    sb.AppendLine(
                        $$"""
                            public void Record{{details.ShortName}}{{property}}(int increment = 1);
                        """);
                }
            }
        }

        sb.Append("}");
        return sb.ToString();
    }

    public static string CreateCountNullTelemetryCollectorPartial(StringBuilder sb, in TelemetryMetricGenerator.EnumDetails details, Dictionary<string, EquatableArray<string>> enumDictionary)
    {
        sb.Clear();
        sb.Append(
            """
            // <auto-generated/>
            #nullable enable

            namespace Datadog.Trace.Telemetry;
            internal partial class NullMetricsTelemetryCollector
            {
            """);

        if (details.Names.AsArray() is { } names)
        {
            for (var i = 0; i < names.Length; i++)
            {
                sb.AppendLine();
                var (property, metric) = names[i];

                if (metric.Tag2FullyQualifiedName is { } tagName2)
                {
                    var tagName1 = metric.Tag1FullyQualifiedName!;
                    sb.AppendLine(
                        $$"""
                            public void Record{{details.ShortName}}{{property}}({{tagName1}} tag1, {{tagName2}} tag2, int increment = 1)
                            {
                            }
                        """);
                }
                else if (metric.Tag1FullyQualifiedName is { } tagName)
                {
                    sb.AppendLine(
                        $$"""
                            public void Record{{details.ShortName}}{{property}}({{tagName}} tag, int increment = 1)
                            {
                            }
                        """);
                }
                else
                {
                    sb.AppendLine(
                        $$"""
                            public void Record{{details.ShortName}}{{property}}(int increment = 1)
                            {
                            }
                        """);
                }
            }
        }

        sb.Append("}");
        return sb.ToString();
    }

    public static string CreateGaugeTelemetryCollectorPartial(StringBuilder sb, in TelemetryMetricGenerator.EnumDetails details, Dictionary<string, EquatableArray<string>> enumDictionary, int[] metricsToLocation, int[] entryCounts)
    {
        sb.Clear();
        sb.Append(
            """
            // <auto-generated/>
            #nullable enable

            using System.Threading;

            namespace Datadog.Trace.Telemetry;
            internal partial class MetricsTelemetryCollector
            {
            """);

        if (details.Names.AsArray() is { } names)
        {
            for (var i = 0; i < names.Length; i++)
            {
                sb.AppendLine();
                var (property, metric) = names[i];
                var index = metricsToLocation[i];

                if (metric.Tag2FullyQualifiedName is { } tagName2)
                {
                    var tagName1 = metric.Tag1FullyQualifiedName!;
                    var tag2EntryCount = enumDictionary[tagName2].Count;
                    sb.AppendLine(
                        $$"""
                            public void Record{{details.ShortName}}{{property}}({{tagName1}} tag1, {{tagName2}} tag2, int value)
                            {
                                var index = {{index}} + ((int)tag1 * {{tag2EntryCount}}) + (int)tag2;
                                Interlocked.Exchange(ref _buffer.Gauges[index], value);
                            }
                        """);
                }
                else if (metric.Tag1FullyQualifiedName is { } tagName)
                {
                    sb.AppendLine(
                        $$"""
                            public void Record{{details.ShortName}}{{property}}({{tagName}} tag, int value)
                            {
                                var index = {{index}} + (int)tag;
                                Interlocked.Exchange(ref _buffer.Gauges[index], value);
                            }
                        """);
                }
                else
                {
                    sb.AppendLine(
                        $$"""
                            public void Record{{details.ShortName}}{{property}}(int value)
                            {
                                Interlocked.Exchange(ref _buffer.Gauges[{{index}}], value);
                            }
                        """);
                }
            }
        }

        sb.Append(
            $$"""

                /// <summary>
                /// Creates the buffer for the <see cref="{{details.FullyQualifiedName}}" /> values.
                /// </summary>
                private static AggregatedMetric[] Get{{details.ShortName}}Buffer()
                    => new AggregatedMetric[]
                    {

            """);
        AddAggregatedMetrics(sb, in details, enumDictionary);
        sb.Append(
            $$"""
                    };

                /// <summary>
                /// Gets an array of metric counts, indexed by integer value of the <see cref="{{details.FullyQualifiedName}}" />.
                /// Each value represents the number of unique entries in the buffer returned by <see cref="Get{{details.ShortName}}Buffer()" />
                /// It is equal to the cardinality of the tag combinations (or 1 if there are no tags)
                /// </summary>
                private static int[] {{details.ShortName}}EntryCounts { get; }
                    = new []{ 
            """);

        foreach (var value in entryCounts)
        {
            sb.Append(value).Append(", ");
        }

        sb.AppendLine("};")
          .Append(
               $$"""

                   private const int _gaugesLength = {{entryCounts.Sum()}};
               }
               """);

        return sb.ToString();
    }

    public static string CreateGaugeITelemetryCollectorPartial(StringBuilder sb, in TelemetryMetricGenerator.EnumDetails details, Dictionary<string, EquatableArray<string>> enumDictionary)
    {
        sb.Clear();
        sb.Append(
            """
            // <auto-generated/>
            #nullable enable

            namespace Datadog.Trace.Telemetry;
            internal partial interface IMetricsTelemetryCollector
            {
            """);

        if (details.Names.AsArray() is { } names)
        {
            for (var i = 0; i < names.Length; i++)
            {
                sb.AppendLine();
                var (property, metric) = names[i];

                if (metric.Tag2FullyQualifiedName is { } tagName2)
                {
                    var tagName1 = metric.Tag1FullyQualifiedName!;
                    sb.AppendLine(
                        $$"""
                            public void Record{{details.ShortName}}{{property}}({{tagName1}} tag1, {{tagName2}} tag2, int value);
                        """);
                }
                else if (metric.Tag1FullyQualifiedName is { } tagName)
                {
                    sb.AppendLine(
                        $$"""
                            public void Record{{details.ShortName}}{{property}}({{tagName}} tag, int value);
                        """);
                }
                else
                {
                    sb.AppendLine(
                        $$"""
                            public void Record{{details.ShortName}}{{property}}(int value);
                        """);
                }
            }
        }

        sb.Append("}");
        return sb.ToString();
    }

    public static string CreateGaugeNullTelemetryCollectorPartial(StringBuilder sb, in TelemetryMetricGenerator.EnumDetails details, Dictionary<string, EquatableArray<string>> enumDictionary)
    {
        sb.Clear();
        sb.Append(
            """
            // <auto-generated/>
            #nullable enable

            namespace Datadog.Trace.Telemetry;
            internal partial class NullMetricsTelemetryCollector
            {
            """);

        if (details.Names.AsArray() is { } names)
        {
            for (var i = 0; i < names.Length; i++)
            {
                sb.AppendLine();
                var (property, metric) = names[i];

                if (metric.Tag2FullyQualifiedName is { } tagName2)
                {
                    var tagName1 = metric.Tag1FullyQualifiedName!;
                    sb.AppendLine(
                        $$"""
                            public void Record{{details.ShortName}}{{property}}({{tagName1}} tag1, {{tagName2}} tag2, int value)
                            {
                            }
                        """);
                }
                else if (metric.Tag1FullyQualifiedName is { } tagName)
                {
                    sb.AppendLine(
                        $$"""
                            public void Record{{details.ShortName}}{{property}}({{tagName}} tag, int value)
                            {
                            }
                        """);
                }
                else
                {
                    sb.AppendLine(
                        $$"""
                            public void Record{{details.ShortName}}{{property}}(int value)
                            {
                            }
                        """);
                }
            }
        }

        sb.Append("}");
        return sb.ToString();
    }

    public static string CreateDistributionTelemetryCollectorPartial(StringBuilder sb, in TelemetryMetricGenerator.EnumDetails details, Dictionary<string, EquatableArray<string>> enumDictionary, int[] metricsToLocation, int[] entryCounts)
    {
        sb.Clear();
        sb.Append(
            """
            // <auto-generated/>
            #nullable enable

            using System.Threading;

            namespace Datadog.Trace.Telemetry;
            internal partial class MetricsTelemetryCollector
            {
            """);

        if (details.Names.AsArray() is { } names)
        {
            for (var i = 0; i < names.Length; i++)
            {
                sb.AppendLine();
                var (property, metric) = names[i];
                var index = metricsToLocation[i];

                if (metric.Tag2FullyQualifiedName is { } tagName2)
                {
                    var tagName1 = metric.Tag1FullyQualifiedName!;
                    var tag2EntryCount = enumDictionary[tagName2].Count;
                    sb.AppendLine(
                        $$"""
                            public void Record{{details.ShortName}}{{property}}({{tagName1}} tag1, {{tagName2}} tag2, double value)
                            {
                                var index = {{index}} + ((int)tag1 * {{tag2EntryCount}}) + (int)tag2;
                                _buffer.Distributions[index].TryEnqueue(value);
                            }
                        """);
                }
                else if (metric.Tag1FullyQualifiedName is { } tagName)
                {
                    sb.AppendLine(
                        $$"""
                            public void Record{{details.ShortName}}{{property}}({{tagName}} tag, double value)
                            {
                                var index = {{index}} + (int)tag;
                                _buffer.Distributions[index].TryEnqueue(value);
                            }
                        """);
                }
                else
                {
                    sb.AppendLine(
                        $$"""
                            public void Record{{details.ShortName}}{{property}}(double value)
                            {
                                _buffer.Distributions[{{index}}].TryEnqueue(value);
                            }
                        """);
                }
            }
        }

        sb.Append(
            $$"""

                /// <summary>
                /// Creates the buffer for the <see cref="{{details.FullyQualifiedName}}" /> values.
                /// </summary>
                private static AggregatedDistribution[] Get{{details.ShortName}}Buffer()
                    => new AggregatedDistribution[]
                    {

            """);
        AddAggregatedMetrics(sb, in details, enumDictionary);
        sb.Append(
            $$"""
                    };

                /// <summary>
                /// Gets an array of metric counts, indexed by integer value of the <see cref="{{details.FullyQualifiedName}}" />.
                /// Each value represents the number of unique entries in the buffer returned by <see cref="Get{{details.ShortName}}Buffer()" />
                /// It is equal to the cardinality of the tag combinations (or 1 if there are no tags)
                /// </summary>
                private static int[] {{details.ShortName}}EntryCounts { get; }
                    = new []{ 
            """);

        foreach (var value in entryCounts)
        {
            sb.Append(value).Append(", ");
        }

        sb.AppendLine("};")
          .Append(
               $$"""

                   private const int _distributionsLength = {{entryCounts.Sum()}};
               }
               """);

        return sb.ToString();
    }

    public static string CreateDistributionITelemetryCollectorPartial(StringBuilder sb, in TelemetryMetricGenerator.EnumDetails details, Dictionary<string, EquatableArray<string>> enumDictionary)
    {
        sb.Clear();
        sb.Append(
            """
            // <auto-generated/>
            #nullable enable

            namespace Datadog.Trace.Telemetry;
            internal partial interface IMetricsTelemetryCollector
            {
            """);

        if (details.Names.AsArray() is { } names)
        {
            for (var i = 0; i < names.Length; i++)
            {
                sb.AppendLine();
                var (property, metric) = names[i];

                if (metric.Tag2FullyQualifiedName is { } tagName2)
                {
                    var tagName1 = metric.Tag1FullyQualifiedName!;
                    sb.AppendLine(
                        $$"""
                            public void Record{{details.ShortName}}{{property}}({{tagName1}} tag1, {{tagName2}} tag2, double value);
                        """);
                }
                else if (metric.Tag1FullyQualifiedName is { } tagName)
                {
                    sb.AppendLine(
                        $$"""
                            public void Record{{details.ShortName}}{{property}}({{tagName}} tag, double value);
                        """);
                }
                else
                {
                    sb.AppendLine(
                        $$"""
                            public void Record{{details.ShortName}}{{property}}(double value);
                        """);
                }
            }
        }

        sb.Append("}");
        return sb.ToString();
    }

    public static string CreateDistributionNullTelemetryCollectorPartial(StringBuilder sb, in TelemetryMetricGenerator.EnumDetails details, Dictionary<string, EquatableArray<string>> enumDictionary)
    {
        sb.Clear();
        sb.Append(
            """
            // <auto-generated/>
            #nullable enable

            namespace Datadog.Trace.Telemetry;
            internal partial class NullMetricsTelemetryCollector
            {
            """);

        if (details.Names.AsArray() is { } names)
        {
            for (var i = 0; i < names.Length; i++)
            {
                sb.AppendLine();
                var (property, metric) = names[i];

                if (metric.Tag2FullyQualifiedName is { } tagName2)
                {
                    var tagName1 = metric.Tag1FullyQualifiedName!;
                    sb.AppendLine(
                        $$"""
                            public void Record{{details.ShortName}}{{property}}({{tagName1}} tag1, {{tagName2}} tag2, double value)
                            {
                            }
                        """);
                }
                else if (metric.Tag1FullyQualifiedName is { } tagName)
                {
                    sb.AppendLine(
                        $$"""
                            public void Record{{details.ShortName}}{{property}}({{tagName}} tag, double value)
                            {
                            }
                        """);
                }
                else
                {
                    sb.AppendLine(
                        $$"""
                            public void Record{{details.ShortName}}{{property}}(double value)
                            {
                            }
                        """);
                }
            }
        }

        sb.Append("}");
        return sb.ToString();
    }

    private static void AddAggregatedMetrics(StringBuilder sb, in TelemetryMetricGenerator.EnumDetails details, Dictionary<string, EquatableArray<string>> enumDictionary)
    {
        var names = details.Names.AsArray();
        if (names is null)
        {
            return;
        }

        var i = 0;
        foreach (var (_, metric) in names)
        {
            sb.AppendLine(
                $$"""
                            // {{metric.MetricName}}, index = {{i}}
                """);
            const string prefix =
                """
                            new(
                """;
            if (metric.Tag1FullyQualifiedName is { } tag1Type && enumDictionary[tag1Type].AsArray() is { } tag1Values)
            {
                foreach (var tag1Value in tag1Values)
                {
                    if (metric.Tag2FullyQualifiedName is { } tag2Type && enumDictionary[tag2Type].AsArray() is { } tag2Values)
                    {
                        foreach (var tag2Value in tag2Values)
                        {
                            i++;
                            sb.Append(prefix);

                            if (string.IsNullOrEmpty(tag1Value) && string.IsNullOrEmpty(tag2Value))
                            {
                                sb.AppendLine("null),");
                                continue;
                            }

                            sb.Append("new[] { ");

                            WriteAllValues(sb, tag1Value);
                            WriteAllValues(sb, tag2Value);

                            sb.Remove(sb.Length - 2, 2); // remove the final ', '
                            sb.AppendLine(" }),");
                        }
                    }
                    else
                    {
                        i++;
                        sb.Append(prefix);

                        if (string.IsNullOrEmpty(tag1Value))
                        {
                            sb.AppendLine("null),");
                            continue;
                        }

                        sb.Append("new[] { ");

                        WriteAllValues(sb, tag1Value);

                        sb.Remove(sb.Length - 2, 2); // remove the final ', '
                        sb.AppendLine(" }),");
                    }
                }
            }
            else
            {
                i++;
                sb
                   .Append(prefix)
                   .AppendLine("null),");
            }
        }

        static void WriteAllValues(StringBuilder sb, string tagValue)
        {
            // split the description on `;`, to allow writing _multiple_ tags with a single enum
            var previousSeparator = 0;
            var isFinished = false;
            while (!isFinished)
            {
                var nextSeparator = tagValue.IndexOf(';', previousSeparator);
                (isFinished, var length) = nextSeparator == -1
                                                       ? (true, tagValue.Length - previousSeparator)
                                                       : (false, nextSeparator - previousSeparator);

                if (length > 0)
                {
                    sb.Append('"')
                      .Append(tagValue, previousSeparator, length)
                      .Append("\", ");
                }

                previousSeparator = nextSeparator + 1;
            }
        }
    }

    private static string GetNames(StringBuilder sb, in TelemetryMetricGenerator.EnumDetails details)
        => GetValues(sb, in details, static (s, m) => s.Append('"').Append(m.MetricName).Append('"'));

    private static string GetIsCommon(StringBuilder sb, in TelemetryMetricGenerator.EnumDetails details)
        => GetValues(sb, in details, static (s, m) => s.Append("false"), m => !m.IsCommon);

    private static string GetNamespaces(StringBuilder sb, in TelemetryMetricGenerator.EnumDetails details)
        => GetValues(sb, in details, static (s, m) => s.Append('"').Append(m.NameSpace).Append('"'), static m => !string.IsNullOrEmpty(m.NameSpace));

    private static string GetValues(
        StringBuilder sb,
        in TelemetryMetricGenerator.EnumDetails details,
        Action<StringBuilder, TelemetryMetricGenerator.MetricDetails> action,
        Func<TelemetryMetricGenerator.MetricDetails, bool>? predicate = null)
    {
        var names = details.Names.AsArray();
        if (names is null)
        {
            return string.Empty;
        }

        sb.Clear();
        foreach (var (property, metric) in names)
        {
            if (predicate is { } && !predicate(metric))
            {
                continue;
            }

            sb.Append(
                   @"
            ")
              .Append(details.FullyQualifiedName)
              .Append('.')
              .Append(property)
              .Append(" => ");
            action(sb, metric);
            sb.Append(',');
        }

        return sb.ToString();
    }
}
