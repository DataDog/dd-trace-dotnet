// <copyright file="Sources.cs" company="Datadog">
// Unless explicitly stated otherwise all files in this repository are licensed under the Apache 2 License.
// This product includes software developed at Datadog (https://www.datadoghq.com/). Copyright 2017 Datadog, Inc.
// </copyright>

using System.Collections.Generic;
using System.Text;

namespace Datadog.Trace.SourceGenerators.TagsListGenerator
{
    internal static class Sources
    {
        public const string Attributes =
            @"// <auto-generated/>
#nullable enable

namespace Datadog.Trace.SourceGenerators;

/// <summary>
/// Used to designate a property as corresponding to the provided
/// <see cref=""TagName""/>. Should only be used in ITags classes.
/// Used for source generation.
/// </summary>
[System.AttributeUsage(System.AttributeTargets.Property, AllowMultiple = false)]
internal sealed class TagNameAttribute : System.Attribute
{
    /// <summary>
    /// Initializes a new instance of the <see cref=""TagNameAttribute""/> class.
    /// </summary>
    /// <param name=""tagName"">The name of the datadog tag the property corresponds to</param>
    public TagNameAttribute(string tagName) =>
        this.TagName = tagName;

    /// <summary>
    /// Gets the name of the datadog tag the property corresponds to
    /// </summary>
    public string TagName { get; }
}

/// <summary>
/// Used to designate a property as corresponding to the provided
/// <see cref=""MetricName""/>. Should only be used in ITags classes.
/// Used for source generation.
/// </summary>
[System.AttributeUsage(System.AttributeTargets.Property, AllowMultiple = false)]
internal sealed class MetricNameAttribute : System.Attribute
{
    /// <summary>
    /// Initializes a new instance of the <see cref=""MetricNameAttribute""/> class.
    /// </summary>
    /// <param name=""metricName"">The name of the datadog metric the property corresponds to</param>
    public MetricNameAttribute(string metricName) =>
        this.MetricName = metricName;

    /// <summary>
    /// Gets the name of the datadog tag the property corresponds to
    /// </summary>
    public string MetricName { get; }
}
";

        public static string CreateTagsList(IReadOnlyCollection<TagListGenerator.TagList> tagLists)
        {
            var sb = new StringBuilder();
            sb.AppendLine("// <auto-generated/>");
            sb.AppendLine("#nullable enable");
            foreach (var tagList in tagLists)
            {
                sb.AppendLine();
                sb.Append("namespace ")
                  .Append(tagList.Namespace)
                  .Append(
                       @"
{
    partial class ")
                  .Append(tagList.ClassName)
                  .Append(
                       @"
    {");
                if (tagList.TagProperties is not null)
                {
                    sb.Append(
                        @"
        public override string? GetTag(string key)
        {
            return key switch
            {
                ");

                    for (int i = 0; i < tagList.TagProperties.Count; i++)
                    {
                        var property = tagList.TagProperties[i];
                        sb.Append('"')
                          .Append(property.TagValue)
                          .Append(@""" => ")
                          .Append(property.PropertyName)
                          .Append(
                               @",
                ");
                    }

                    sb.Append(
                        @"_ => base.GetTag(key),
            };
        }

        public override void SetTag(string key, string value)
        {
            switch(key)
            {
                ");

                    for (int i = 0; i < tagList.TagProperties.Count; i++)
                    {
                        var property = tagList.TagProperties[i];
                        if (property.IsReadOnly)
                        {
                            continue;
                        }

                        sb.Append(@"case """)
                          .Append(property.TagValue)
                          .Append(
                               @""": 
                    ")
                          .Append(property.PropertyName)
                          .Append(
                               @" = value;
                    break;
                ");
                    }

                    sb.Append(
                        @"default: 
                    base.SetTag(key, value);
                    break;
            }
        }

        protected override int WriteAdditionalTags(ref byte[] bytes, ref int offset, out bool isOriginWritten)
        {
            var count = 0;
            ");
                    string? originProperty = null;
                    for (int i = 0; i < tagList.TagProperties.Count; i++)
                    {
                        var property = tagList.TagProperties[i];
                        sb.Append(@"if (")
                          .Append(property.PropertyName)
                          .Append(@" != null)
            {
                count++;
                WriteTag(ref bytes, ref offset, """)
                          .Append(property.TagValue)
                          .Append(@""", ")
                          .Append(property.PropertyName)
                          .Append(@");
            }

            ");
                        if (property.TagValue == "_dd.origin")
                        {
                            originProperty = property.PropertyName;
                        }
                    }

                    sb.Append(
                        @"count += base.WriteAdditionalTags(ref bytes, ref offset, out var isOriginWrittenInBase);
            isOriginWritten = isOriginWrittenInBase");

                    if (originProperty is not null)
                    {
                        sb.Append(@" || ")
                          .Append(originProperty)
                          .Append(@" is not null");
                    }

                    sb.Append(@";
            return count;
        }

        protected override void WriteAdditionalTags(System.Text.StringBuilder sb)
        {
            ");
                    for (int i = 0; i < tagList.TagProperties.Count; i++)
                    {
                        var property = tagList.TagProperties[i];
                        sb.Append(@"if (")
                          .Append(property.PropertyName)
                          .Append(
                               @" != null)
            {
                sb.Append(""")
                          .Append(property.TagValue)
                          .Append(@" (tag):"")
                  .Append(")
                          .Append(property.PropertyName)
                          .Append(
                               @")
                  .Append(',');
            }

            ");
                    }

                    sb.Append(@"base.WriteAdditionalTags(sb);
        }");
                }

                if (tagList.MetricProperties is not null)
                {
                    if (tagList.TagProperties is not null)
                    {
                        sb.AppendLine();
                    }

                    sb.Append(
                        @"
        public override double? GetMetric(string key)
        {
            return key switch
            {
                ");

                    for (int i = 0; i < tagList.MetricProperties.Count; i++)
                    {
                        var property = tagList.MetricProperties[i];
                        sb.Append('"')
                          .Append(property.TagValue)
                          .Append(@""" => ")
                          .Append(property.PropertyName)
                          .Append(
                               @",
                ");
                    }

                    sb.Append(
                        @"_ => base.GetMetric(key),
            };
        }

        public override void SetMetric(string key, double? value)
        {
            switch(key)
            {
                ");

                    for (int i = 0; i < tagList.MetricProperties.Count; i++)
                    {
                        var property = tagList.MetricProperties[i];
                        if (property.IsReadOnly)
                        {
                            continue;
                        }

                        sb.Append(@"case """)
                          .Append(property.TagValue)
                          .Append(
                               @""": 
                    ")
                          .Append(property.PropertyName)
                          .Append(
                               @" = value;
                    break;
                ");
                    }

                    sb.Append(
                        @"default: 
                    base.SetMetric(key, value);
                    break;
            }
        }

        protected override int WriteAdditionalMetrics(ref byte[] bytes, ref int offset)
        {
            var count = 0;
            ");
                    for (int i = 0; i < tagList.MetricProperties.Count; i++)
                    {
                        var property = tagList.MetricProperties[i];
                        sb.Append(@"if (")
                          .Append(property.PropertyName)
                          .Append(@" != null)
            {
                count++;
                WriteMetric(ref bytes, ref offset, """)
                          .Append(property.TagValue)
                          .Append(@""", ")
                          .Append(property.PropertyName)
                          .Append(@".Value);
            }

            ");
                    }

                    sb.Append(
                        @"return count + base.WriteAdditionalMetrics(ref bytes, ref offset);
        }

        protected override void WriteAdditionalMetrics(System.Text.StringBuilder sb)
        {
            ");
                    for (int i = 0; i < tagList.MetricProperties.Count; i++)
                    {
                        var property = tagList.MetricProperties[i];
                        sb.Append(@"if (")
                          .Append(property.PropertyName)
                          .Append(
                               @" != null)
            {
                sb.Append(""")
                          .Append(property.TagValue)
                          .Append(@" (metric):"")
                  .Append(")
                          .Append(property.PropertyName)
                          .Append(
                               @".Value)
                  .Append(',');
            }

            ");
                    }

                    sb.Append(@"base.WriteAdditionalMetrics(sb);
        }");
                }

                sb.AppendLine(@"
    }
}");
            }

            return sb.ToString();
        }
    }
}
