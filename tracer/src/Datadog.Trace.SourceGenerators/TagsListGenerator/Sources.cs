// <copyright file="Sources.cs" company="Datadog">
// Unless explicitly stated otherwise all files in this repository are licensed under the Apache 2 License.
// This product includes software developed at Datadog (https://www.datadoghq.com/). Copyright 2017 Datadog, Inc.
// </copyright>

using System.Collections.Generic;
using System.Text;

namespace Datadog.Trace.SourceGenerators.TagsListGenerator
{
    internal static class Sources
    {
        public const string TagNameAttribute =
            @"// <auto-generated/>
#nullable enable

namespace Datadog.Trace.SourceGenerators
{
    /// <summary>
    /// Used to designate a property as corresponding to the provided
    /// <see cref=""TagName""/>. Should only be used in ITags classes.
    /// Used for source generation.
    /// </summary>
    [System.AttributeUsage(System.AttributeTargets.Property, AllowMultiple = false)]
    public sealed class TagNameAttribute : System.Attribute
    {
        /// <summary>
        /// Initializes a new instance of the <see cref=""TagNameAttribute""/> class.
        /// </summary>
        /// <param name=""tagName"">The name of the datadog tag the property corresponds to</param>
        public TagNameAttribute(string tagName) =>
            this.TagName = tagName;

        /// <summary>
        /// Gets the name of the datadog tag the property corresponds to
        /// </summary>
        public string TagName { get; }
    }
}";

        public static string CreateTagsList(IReadOnlyCollection<TagListGenerator.TagList> tagLists)
        {
            var sb = new StringBuilder();
            sb.AppendLine("// <auto-generated/>");
            sb.AppendLine("#nullable enable");
            sb.AppendLine();
            foreach (var tagList in tagLists)
            {
                sb.Append("namespace ")
                  .Append(tagList.Namespace)
                  .Append(
                       @"
{
    partial class ")
                  .Append(tagList.ClassName)
                  .Append(
                       @"
    {
        public override string GetTag(string key)
        {
            return key switch
            {
                ");

                for (int i = 0; i < tagList.Properties.Count; i++)
                {
                    var property = tagList.Properties[i];
                    sb.Append('"')
                       .Append(property.TagValue)
                      .Append(@""" => ")
                      .Append(property.PropertyName)
                      .Append(@",
                ");
                }

                sb.Append(@"default => GetTagFromDictionary(key),
            };
        }

        public override void SetTag(string key, string value)
        {
            switch(key)
            {
                ");

                for (int i = 0; i < tagList.Properties.Count; i++)
                {
                    var property = tagList.Properties[i];
                    if (property.IsReadOnly)
                    {
                        continue;
                    }

                    sb.Append(@"case """)
                      .Append(property.TagValue)
                      .Append(@""": 
                    ").Append(property.PropertyName)
                      .Append(@" = value;
                    break;
                ");
                }

                sb.Append(@"default: 
                    SetTagInDictionary(key, value);
                    break;
            }
        }
    }
}");
            }

            return sb.ToString();
        }
    }
}
