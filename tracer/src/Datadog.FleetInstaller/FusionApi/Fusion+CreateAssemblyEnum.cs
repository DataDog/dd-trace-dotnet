// <copyright file="Fusion+CreateAssemblyEnum.cs" company="Datadog">
// Unless explicitly stated otherwise all files in this repository are licensed under the Apache 2 License.
// This product includes software developed at Datadog (https://www.datadoghq.com/). Copyright 2017 Datadog, Inc.
// </copyright>

// Copyright (c) Microsoft. All rights reserved.
// Licensed under the MIT license. See LICENSE file in the project root for full license information.
// Based on https://github.com/dotnet/msbuild/blob/5915c95cd0aeecfb9719549eb4b7c07b55a78a48/src/Tasks/NativeMethods.cs#L434
// <auto-generated/>

namespace PInvoke;

using System;
using System.Text;
using System.Runtime.InteropServices;

public partial class Fusion
{

    [Flags]
    public enum ASM_CACHE_FLAGS
    {
        /// <summary>
        /// Enumerates the cache of precompiled assemblies by using Ngen.exe
        /// </summary>
        ASM_CACHE_ZAP = 1,

        /// <summary>
        /// Enumerates the global assembly cache
        /// </summary>
        ASM_CACHE_GAC = 2,

        /// <summary>
        /// Enumerates the assemblies that have been downloaded on demand or that have been shadow-copied
        /// </summary>
        ASM_CACHE_DOWNLOAD = 4,

        /// <summary>
        /// Indicates that the GetCachePath function should return the path to the global assembly cache
        /// for the common language runtime (CLR) version 2.0. Meaningful only in the context of a call to GetCachePath.
        /// </summary>
        ASM_CACHE_ROOT = 8,

        /// <summary>
        ///Indicates that the GetCachePath function should return the path to the global assembly cache for CLR version 4.
        /// Meaningful only in the context of a call to GetCachePath
        /// </summary>
        ASM_CACHE_ROOT_EX = 128
    }

    [ComImport, InterfaceType(ComInterfaceType.InterfaceIsIUnknown), Guid("21b8916c-f28e-11d2-a473-00c04f8ef448")]
    public interface IAssemblyEnum
    {
        /// <summary>
        /// Gets a pointer to the next IAssemblyName contained in this IAssemblyEnum object
        /// </summary>
        /// <param name="pvReserved">Reserved for future extensibility. pvReserved must be a null reference</param>
        /// <param name="ppName">The returned IAssemblyName pointer</param>
        /// <param name="flags">Reserved for future extensibility. dwFlags must be 0 (zero)</param>
        /// <returns></returns>
        [PreserveSig()]
        HResult GetNextAssembly(IntPtr pvReserved, out IAssemblyName ppName, int flags);

        [PreserveSig()]
        int Reset();

        [PreserveSig()]
        int Clone(out IAssemblyEnum ppEnum);
    }

    [ComImport, InterfaceType(ComInterfaceType.InterfaceIsIUnknown), Guid("CD193BC0-B4BC-11d2-9833-00C04FC31D2E")]
    public interface IAssemblyName
    {
        [PreserveSig()]
        int SetProperty(
            int PropertyId,
            IntPtr pvProperty,
            int cbProperty);

        [PreserveSig()]
        int GetProperty(
            int PropertyId,
            IntPtr pvProperty,
            ref int pcbProperty);

        [PreserveSig()]
#pragma warning disable CS0465 // Introducing a 'Finalize' method can interfere with destructor invocation
        int Finalize();
#pragma warning restore CS0465 // Introducing a 'Finalize' method can interfere with destructor invocation

        [PreserveSig()]
        int GetDisplayName(
            StringBuilder pDisplayName,
            ref int pccDisplayName,
            ASM_DISPLAY_FLAGS displayFlags);

        [PreserveSig()]
        int Reserved(
            ref Guid guid,
            Object obj1,
            Object obj2,
            String string1,
            Int64 llFlags,
            IntPtr pvReserved,
            int cbReserved,
            out IntPtr ppv);

        [PreserveSig()]
        int GetName(
            ref int pccBuffer,
            StringBuilder pwzName);

        [PreserveSig()]
        int GetVersion(
            out int versionHi,
            out int versionLow);

        [PreserveSig()]
        int IsEqual(
            IAssemblyName pAsmName,
            int cmpFlags);

        [PreserveSig()]
        int Clone(out IAssemblyName pAsmName);
    }

    [Flags]
    public enum ASM_DISPLAY_FLAGS
    {
        ASM_DISPLAYF_VERSION = 0x01,
        ASM_DISPLAYF_CULTURE = 0x02,
        ASM_DISPLAYF_PUBLIC_KEY_TOKEN = 0x04,
        ASM_DISPLAYF_PUBLIC_KEY = 0x08,
        ASM_DISPLAYF_CUSTOM = 0x10,
        ASM_DISPLAYF_PROCESSORARCHITECTURE = 0x20,
        ASM_DISPLAYF_LANGUAGEID = 0x40,
        ASM_DISPLAYF_RETARGET = 0x80,
        ASM_DISPLAYF_CONFIG_MASK = 0x100,
        ASM_DISPLAYF_MVID = 0x200,
        ASM_DISPLAYF_FULL =
            ASM_DISPLAYF_VERSION |
            ASM_DISPLAYF_CULTURE |
            ASM_DISPLAYF_PUBLIC_KEY_TOKEN |
            ASM_DISPLAYF_RETARGET |
            ASM_DISPLAYF_PROCESSORARCHITECTURE
    }

    [Flags]
    public enum CREATE_ASM_NAME_OBJ_FLAGS
    {
        NONE = 0x0,
        CANOF_PARSE_DISPLAY_NAME = 0x1,
        CANOF_SET_DEFAULT_VALUES = 0x2,
        CANOF_VERIFY_FRIEND_ASSEMBLYNAME = 0x4,
        CANOF_PARSE_FRIEND_DISPLAY_NAME = (CANOF_PARSE_DISPLAY_NAME | CANOF_VERIFY_FRIEND_ASSEMBLYNAME)
    }
}
