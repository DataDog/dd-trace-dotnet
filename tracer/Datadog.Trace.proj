<Project DefaultTargets="Build" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
  <PropertyGroup>
    <BuildInParallel Condition="'$(BuildInParallel)' == ''">true</BuildInParallel>
    <Configuration Condition="'$(Configuration)' == ''">Debug</Configuration>
  </PropertyGroup>

  <ItemGroup>
    <CppProject Include="src\**\*.vcxproj"/>
    <CppTestProject Include="test\**\*.vcxproj"/>
    <FrameworkReproduction Include="test\test-applications\regression\StackExchange.Redis.AssemblyConflict.LegacyProject\StackExchange.Redis.AssemblyConflict.LegacyProject.csproj" />
  </ItemGroup>

  <!--  Used by CompileNativeSrcWindows-->
  <Target Name="BuildCppSrc">
    <MSBuild Targets="Build" Projects="@(CppProject)">
      <Output TaskParameter="TargetOutputs" ItemName="CollectedBuildOutput"/>
    </MSBuild>
  </Target>

  <!--  Used by CompileNativeTestsWindows-->
  <Target Name="BuildCppTests">
    <MSBuild Targets="Build" Projects="@(CppTestProject)">
      <Output TaskParameter="TargetOutputs" ItemName="CollectedBuildOutput"/>
    </MSBuild>
  </Target>

  <!--  Used by CompileFrameworkReproductions-->
  <Target Name="BuildFrameworkReproductions">
    <MSBuild Targets="Build" Projects="@(FrameworkReproduction)">
      <Output TaskParameter="TargetOutputs" ItemName="CollectedBuildOutput"/>
    </MSBuild>
  </Target>

  <!-- Used by CompileMultiApiPackageVersionSamples -->
  <Target Name="RestoreSamplesForPackageVersionsOnly" Condition="'$(TestAllPackageVersions)'=='true'">
    <!-- Filter the sample projects by TargetFramework -->
    <ItemGroup>
      <PackageVersionSampleCompile Include="@(PackageVersionSample)" Condition="('$(IncludeTestsRequiringDocker)' == '' OR '%(PackageVersionSample.RequiresDockerDependency)'=='$(IncludeTestsRequiringDocker)') AND ('$(IsAlpine)' != 'true' OR '%(PackageVersionSample.SkipAlpine)'!='true') AND ('$(IsArm64)' != 'true' OR '%(PackageVersionSample.SkipArm64)'!='true') AND ('%(PackageVersionSample.TargetFramework)' == '' or '%(PackageVersionSample.TargetFramework)'=='$(TargetFramework)')" />
    </ItemGroup>

    <!-- Build the sample projects concurrently -->
    <MSBuild Targets="Restore" Projects="@(PackageVersionSampleCompile)" BuildInParallel="$(BuildInParallel)">
      <Output TaskParameter="TargetOutputs" ItemName="CollectedBuildOutput"/>
    </MSBuild>
  </Target>

  <!-- Used by CompileMultiApiPackageVersionSamples -->
  <Target Name="RestoreAndBuildSamplesForPackageVersionsOnly" Condition="'$(TestAllPackageVersions)'=='true'" DependsOnTargets="RestoreSamplesForPackageVersionsOnly">

    <!-- Assumes that the core C# projects are already built first -->
    <!-- Filter the sample projects by TargetFramework -->
    <ItemGroup>
      <PackageVersionSampleCompile Include="@(PackageVersionSample)" Condition="('$(IncludeTestsRequiringDocker)' == '' OR '%(PackageVersionSample.RequiresDockerDependency)'=='$(IncludeTestsRequiringDocker)') AND ('$(IsAlpine)' != 'true' OR '%(PackageVersionSample.SkipAlpine)'!='true') AND ('$(IsArm64)' != 'true' OR '%(PackageVersionSample.SkipArm64)'!='true') AND ('%(PackageVersionSample.TargetFramework)' == '' or '%(PackageVersionSample.TargetFramework)'=='$(TargetFramework)')" />
    </ItemGroup>

    <!-- Build the sample projects concurrently -->
    <MSBuild Targets="Publish" Projects="@(PackageVersionSampleCompile)" BuildInParallel="$(BuildInParallel)">
      <Output TaskParameter="TargetOutputs" ItemName="CollectedBuildOutput"/>
    </MSBuild>
  </Target>

  <Import Condition="'$(TestAllPackageVersions)'=='true' AND '$(IncludeMinorPackageVersions)'=='true'" Project="build\PackageVersionsLatestMinors.g.props" />
  <Import Condition="'$(TestAllPackageVersions)'=='true' AND '$(IncludeMinorPackageVersions)'!='true'" Project="build\PackageVersionsLatestSpecific.g.props" />

</Project>
