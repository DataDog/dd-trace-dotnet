// <copyright file="ConfigurationKeysGeneratorTests.cs" company="Datadog">
// Unless explicitly stated otherwise all files in this repository are licensed under the Apache 2 License.
// This product includes software developed at Datadog (https://www.datadoghq.com/). Copyright 2017 Datadog, Inc.
// </copyright>

#nullable enable

using System.Linq;
using FluentAssertions;
using FluentAssertions.Execution;
using Xunit;

namespace Datadog.Trace.SourceGenerators.Tests;

public class ConfigurationKeysGeneratorTests
{
    private const string Header = """
                                  // <copyright company="Datadog">
                                  // Unless explicitly stated otherwise all files in this repository are licensed under the Apache 2 License.
                                  // This product includes software developed at Datadog (https://www.datadoghq.com/). Copyright 2017 Datadog, Inc.
                                  // </copyright>
                                  // <auto-generated/>

                                  #nullable enable

                                  // This file is auto-generated from supported-configurations.json and supported-configurations-docs.yaml
                                  // Do not edit this file directly. The source generator will regenerate it on build.
                                  // NOTE: If you remove keys/products from the JSON, run 'dotnet clean' to remove old generated files.

                                  namespace Datadog.Trace.Configuration;

                                  """;

    [Fact]
    public void GeneratesProductPartialClassesAndHeader()
    {
        const string supportedConfigJson = """
                                           {
                                             "supportedConfigurations": {
                                               "DD_TRACE_ENABLED": {
                                                 "version": "A",
                                                 "product": "Tracer"
                                               },
                                               "DD_APPSEC_ENABLED": {
                                                 "version": "A",
                                                 "product": "AppSec"
                                               },
                                               "OTEL_EXPORTER_OTLP_ENDPOINT": {
                                                 "version": "A",
                                                 "product": "OpenTelemetry"
                                               }
                                           }
                                           """;

        const string docsYaml = """
                                DD_TRACE_ENABLED: |
                                  Enables or disables the tracer.
                                  Default is true.

                                DD_APPSEC_ENABLED: |
                                  Enables or disables AppSec.
                                  Default is false.

                                OTEL_EXPORTER_OTLP_ENDPOINT: |
                                  Configuration key to set the OTLP endpoint URL (fallback for metrics-specific endpoint).
                                  Used when <see cref="ExporterOtlpMetricsEndpoint"/> is not set.
                                  Expects values like `unix:///path/to/socket.sock` for UDS, `\\.\pipename\` for Windows Named Pipes.
                                  Default values: gRPC: http://localhost:4317, HTTP: http://localhost:4318
                                """;

        const string expectedTracerOutput =
            """
                internal static class Tracer
                {
                    /// <summary>
                    /// Enables or disables the tracer.
                    /// Default is true.
                    /// </summary>
                    public const string TraceEnabled = "DD_TRACE_ENABLED";
                }
            """;

        const string expectedAppSecOutput =
            """
                internal static class AppSec
                {
                    /// <summary>
                    /// Enables or disables AppSec.
                    /// Default is false.
                    /// </summary>
                    public const string Enabled = "DD_APPSEC_ENABLED";
                }
            """;

        const string expectedTelemOutput =
            """
                internal static class OpenTelemetry
                {
                    /// <summary>
                    /// Configuration key to set the OTLP endpoint URL (fallback for metrics-specific endpoint).
                    /// Used when <see cref="ExporterOtlpMetricsEndpoint"/> is not set.
                    /// Expects values like `unix:///path/to/socket.sock` for UDS, `\\.\pipename\` for Windows Named Pipes.
                    /// Default values: gRPC: http://localhost:4317, HTTP: http://localhost:4318
                    /// </summary>
                    public const string OtelExporterOtlpEndpoint = "OTEL_EXPORTER_OTLP_ENDPOINT";
                }
            """;

        var (diagnostics, outputs) = TestHelpers.GetGeneratedTrees<ConfigurationKeysGenerator>(
            [],
            [],
            [
                ("supported-configurations.json", supportedConfigJson),
                ("supported-configurations-docs.yaml", docsYaml)
            ],
            assertOutput: false);

        using var s = new AssertionScope();
        diagnostics.Should().BeEmpty();
        outputs.Should().HaveCount(3);
        var appSecOutput = outputs.First(o => o.Contains("AppSec"));
        var tracerOutput = outputs.First(o => o.Contains("Tracer"));
        var telemOutput = outputs.First(o => o.Contains("Telemetry"));

        tracerOutput.Should().NotBeNullOrEmpty();
        appSecOutput.Should().NotBeNullOrEmpty();
        telemOutput.Should().NotBeNullOrEmpty();
        tracerOutput.Should().Contain(Header);
        appSecOutput.Should().Contain(Header);
        telemOutput.Should().Contain(Header);
        tracerOutput.Should().Contain(expectedTracerOutput);
        appSecOutput.Should().Contain(expectedAppSecOutput);
        telemOutput.Should().Contain(expectedTelemOutput);
    }

    [Fact]
    public void StripsProductPrefixFromConstNames()
    {
        const string supportedConfigJson =
            """
            {
              "supportedConfigurations": {
                "DD_CIVISIBILITY_AGENTLESS_ENABLED": {
                  "version": "A",
                  "product": "CIVisibility"
                },
                "DD_APPSEC_WAF_TIMEOUT": {
                  "version": "A",
                  "product": "AppSec"
                }
              }
            }
            """;

        const string expectedCIOutput =
            """
                internal static class CIVisibility
                {
                    public const string AgentlessEnabled = "DD_CIVISIBILITY_AGENTLESS_ENABLED";
                }
            """;

        const string expectedAppSecOutput =
            """
                internal static class AppSec
                {
                    public const string WafTimeout = "DD_APPSEC_WAF_TIMEOUT";
                }
            """;

        var (diagnostics, outputs) = TestHelpers.GetGeneratedTrees<ConfigurationKeysGenerator>(
            [],
            [],
            [("supported-configurations.json", supportedConfigJson)],
            assertOutput: false);

        using var s = new AssertionScope();
        diagnostics.Should().BeEmpty();

        var ciOutput = outputs.FirstOrDefault(o => o.Contains("class CIVisibility"));
        var appSecOutput = outputs.FirstOrDefault(o => o.Contains("class AppSec"));

        ciOutput.Should().NotBeNullOrEmpty();
        appSecOutput.Should().NotBeNullOrEmpty();

        AssertContains(ciOutput!, expectedCIOutput);
        AssertContains(appSecOutput!, expectedAppSecOutput);
    }

    [Fact]
    public void HandlesKeysWithoutProduct()
    {
        const string supportedConfigJson = """
                                           {
                                             "supportedConfigurations": {
                                               "DD_ENV": {
                                                 "version": "A"
                                               },
                                               "DD_SERVICE": {
                                                 "version": "A"
                                               }
                                             }
                                           }
                                           """;

        var (diagnostics, outputs) = TestHelpers.GetGeneratedTrees<ConfigurationKeysGenerator>(
            [],
            [],
            [("supported-configurations.json", supportedConfigJson)],
            assertOutput: false);

        using var s = new AssertionScope();
        diagnostics.Should().BeEmpty();

        // Keys without product should go in the main class
        var mainOutput = outputs.FirstOrDefault(o => o.Contains("partial class ConfigurationKeys2") && !o.Contains("class Tracer") && !o.Contains("class AppSec"));
        mainOutput.Should().NotBeNullOrEmpty();
        mainOutput.Should().Contain("public const string Env = \"DD_ENV\";");
        mainOutput.Should().Contain("public const string Service = \"DD_SERVICE\";");
    }

    [Fact]
    public void IncludesXmlDocumentation()
    {
        const string supportedConfigJson = """
                                           {
                                             "supportedConfigurations": {
                                               "DD_TRACE_ENABLED": {
                                                 "version": "A",
                                                 "product": "Tracer"
                                               }
                                             }
                                           }
                                           """;

        const string docsYaml = """
                                DD_TRACE_ENABLED: |
                                  Enables or disables the Datadog tracer.
                                  Default: true
                                """;

        var (diagnostics, outputs) = TestHelpers.GetGeneratedTrees<ConfigurationKeysGenerator>(
            [],
            [],
            [
                ("supported-configurations.json", supportedConfigJson),
                ("supported-configurations-docs.yaml", docsYaml)
            ],
            assertOutput: false);

        using var s = new AssertionScope();
        diagnostics.Should().BeEmpty();

        var tracerOutput = outputs.FirstOrDefault(o => o.Contains("class Tracer"));
        tracerOutput.Should().NotBeNullOrEmpty();
        tracerOutput.Should().Contain("/// <summary>");
        tracerOutput.Should().Contain("/// Enables or disables the Datadog tracer.");
        tracerOutput.Should().Contain("/// Default: true");
        tracerOutput.Should().Contain("/// </summary>");
    }

    [Fact]
    public void HandlesEmptyConfiguration()
    {
        const string supportedConfigJson = """
                                           {
                                             "supportedConfigurations": {}
                                           }
                                           """;

        var (diagnostics, outputs) = TestHelpers.GetGeneratedTrees<ConfigurationKeysGenerator>(
            [],
            [],
            [("supported-configurations.json", supportedConfigJson)],
            assertOutput: false);

        diagnostics.Should().BeEmpty();
        outputs.Should().BeEmpty();
    }

    [Fact]
    public void HandlesMissingJsonFile()
    {
        var (diagnostics, outputs) = TestHelpers.GetGeneratedTrees<ConfigurationKeysGenerator>(
            [],
            [],
            [],
            assertOutput: false);

        diagnostics.Should().Contain(d => d.Id == "DDSG0005");
    }

    [Fact]
    public void HandlesInvalidJson()
    {
        const string invalidJson = """
                                   {
                                     "supportedConfigurations": {
                                       "DD_TRACE_ENABLED": "invalid"
                                     }
                                   }
                                   """;

        var (diagnostics, outputs) = TestHelpers.GetGeneratedTrees<ConfigurationKeysGenerator>(
            [],
            [],
            [("supported-configurations.json", invalidJson)],
            assertOutput: false);

        diagnostics.Should().Contain(d => d.Id == "DDSG0002" || d.Id == "DDSG0007");
    }

    [Fact]
    public void SortsEntriesAlphabetically()
    {
        const string supportedConfigJson = """
                                           {
                                             "supportedConfigurations": {
                                               "DD_TRACE_SAMPLE_RATE": {
                                                 "version": "A",
                                                 "product": "Tracer"
                                               },
                                               "DD_TRACE_ENABLED": {
                                                 "version": "A",
                                                 "product": "Tracer"
                                               },
                                               "DD_TRACE_DEBUG": {
                                                 "version": "A",
                                                 "product": "Tracer"
                                               }
                                             }
                                           }
                                           """;

        var (diagnostics, outputs) = TestHelpers.GetGeneratedTrees<ConfigurationKeysGenerator>(
            [],
            [],
            [("supported-configurations.json", supportedConfigJson)],
            assertOutput: false);

        using var s = new AssertionScope();
        diagnostics.Should().BeEmpty();

        var tracerOutput = outputs.FirstOrDefault(o => o.Contains("class Tracer"));
        tracerOutput.Should().NotBeNullOrEmpty();

        var debugIndex = tracerOutput!.IndexOf("TraceDebug = \"DD_TRACE_DEBUG\"");
        var enabledIndex = tracerOutput!.IndexOf("TraceEnabled = \"DD_TRACE_ENABLED\"");
        var sampleRateIndex = tracerOutput!.IndexOf("TraceSampleRate = \"DD_TRACE_SAMPLE_RATE\"");

        debugIndex.Should().BeLessThan(enabledIndex);
        enabledIndex.Should().BeLessThan(sampleRateIndex);
    }

    [Fact]
    public void HandlesSeeAlsoTagsCorrectly()
    {
        const string supportedConfigJson = """
                                           {
                                             "supportedConfigurations": {
                                               "DD_TRACE_ENABLED": {
                                                 "version": "A",
                                                 "product": "Tracer"
                                               },
                                               "DD_LOGS_INJECTION": {
                                                 "version": "A",
                                                 "product": "Tracer"
                                               }
                                             }
                                           }
                                           """;

        const string docsYaml = """
                                DD_TRACE_ENABLED: |
                                  Configuration key for enabling or disabling the Tracer.
                                  Default is value is true (enabled).
                                  <seealso cref="Datadog.Trace.Configuration.TracerSettings.TraceEnabled"/>

                                DD_LOGS_INJECTION: |
                                  Configuration key for enabling or disabling the automatic injection
                                  of correlation identifiers into the logging context.
                                  <seealso cref="Datadog.Trace.Configuration.TracerSettings.LogsInjectionEnabled"></seealso>
                                """;

        const string expectedEnabledOutput =
            """
                internal static class Tracer
                {
                    /// <summary>
                    /// Configuration key for enabling or disabling the automatic injection
                    /// of correlation identifiers into the logging context.
                    /// </summary>
                    /// <seealso cref="Datadog.Trace.Configuration.TracerSettings.LogsInjectionEnabled"></seealso>
                    public const string LogsInjection = "DD_LOGS_INJECTION";

                    /// <summary>
                    /// Configuration key for enabling or disabling the Tracer.
                    /// Default is value is true (enabled).
                    /// </summary>
                    /// <seealso cref="Datadog.Trace.Configuration.TracerSettings.TraceEnabled"/>
                    public const string TraceEnabled = "DD_TRACE_ENABLED";
                }
            """;

        var (diagnostics, outputs) = TestHelpers.GetGeneratedTrees<ConfigurationKeysGenerator>(
            [],
            [],
            [
                ("supported-configurations.json", supportedConfigJson),
                ("supported-configurations-docs.yaml", docsYaml)
            ],
            assertOutput: false);

        using var s = new AssertionScope();
        diagnostics.Should().BeEmpty();

        var tracerOutput = outputs.FirstOrDefault(o => o.Contains("class Tracer"));
        tracerOutput.Should().NotBeNullOrEmpty();

        // Verify seealso tags appear after </summary> and not inside it
        AssertContains(tracerOutput!, expectedEnabledOutput);
    }

    private static void AssertContains(string actual, string expected)
    {
        var normalizedActual = string.Join("\n", actual.Split('\n').Select(l => l.TrimEnd()));
        var normalizedExpected = string.Join("\n", expected.Split('\n').Select(l => l.TrimEnd()));
        normalizedActual.Should().Contain(normalizedExpected);
    }
}
