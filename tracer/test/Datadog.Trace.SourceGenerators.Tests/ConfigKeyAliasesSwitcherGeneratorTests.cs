// <copyright file="ConfigKeyAliasesSwitcherGeneratorTests.cs" company="Datadog">
// Unless explicitly stated otherwise all files in this repository are licensed under the Apache 2 License.
// This product includes software developed at Datadog (https://www.datadoghq.com/). Copyright 2017 Datadog, Inc.
// </copyright>

using System.Linq;
using FluentAssertions;
using FluentAssertions.Execution;
using Xunit;

namespace Datadog.Trace.SourceGenerators.Tests;

public class ConfigKeyAliasesSwitcherGeneratorTests
{
    [Fact]
    public void GeneratesAliasSwitchWithLazyArrays()
    {
        const string supportedConfigJson = """
                                           {
                                             "supportedConfigurations": {
                                               "DD_AGENT_HOST": {
                                                 "version": "A"
                                               },
                                               "DD_TRACE_AGENT_URL": {
                                                 "version": "A"
                                               }
                                             },
                                             "aliases": {
                                               "DD_AGENT_HOST": ["DATADOG_TRACE_AGENT_HOSTNAME_OPTIMIZED", "DD_TRACE_AGENT_HOSTNAME"],
                                               "DD_TRACE_AGENT_URL": ["DD_AGENT_URL", "DD_TRACE_AGENT_PORT"]
                                             }
                                           }
                                           """;

        const string expectedOutput = """
using System;

namespace Datadog.Trace.Configuration;
// <copyright company="Datadog">
// Unless explicitly stated otherwise all files in this repository are licensed under the Apache 2 License.
// This product includes software developed at Datadog (https://www.datadoghq.com/). Copyright 2017 Datadog, Inc.
// </copyright>
// <auto-generated/>

#nullable enable


/// <summary>
/// Generated configuration key matcher that handles main keys and aliases.
/// This file is auto-generated from supported-configurations.json and supported-configurations-docs.yaml. Do not edit this file directly. The source generator will regenerate it on build.
/// </summary>
internal static partial class ConfigKeyAliasesSwitcher
{
    /// <summary>
    /// Gets all aliases for the given configuration key.
    /// </summary>
    /// <param name="mainKey">The configuration key.</param>
    /// <returns>An array of aliases for the key, or empty array if no aliases exist.</returns>
    public static string[] GetAliases(string mainKey)
    {
        switch (mainKey)
        {
            case "DD_AGENT_HOST":
                return new string[]
                {
                    "DATADOG_TRACE_AGENT_HOSTNAME_OPTIMIZED",
                    "DD_TRACE_AGENT_HOSTNAME"
                };
            case "DD_TRACE_AGENT_URL":
                return new string[]
                {
                    "DD_AGENT_URL",
                    "DD_TRACE_AGENT_PORT"
                };
            default:
                return Array.Empty<string>();
        }
    }
}
""";

        var (diagnostics, outputs) = TestHelpers.GetGeneratedTrees<ConfigKeyAliasesSwitcherGenerator>(
            [],
            [],
            [("supported-configurations.json", supportedConfigJson)],
            assertOutput: false);
        var output = outputs.FirstOrDefault() ?? string.Empty;

        using var s = new AssertionScope();
        diagnostics.Should().BeEmpty();

        AssertContains(output, expectedOutput);
    }

    [Fact]
    public void HandlesEmptyAliasesSection()
    {
        const string supportedConfigJson = """
                                           {
                                             "supportedConfigurations": {
                                               "DD_AGENT_HOST": {
                                                 "version": "A"
                                               }
                                             },
                                             "aliases": {}
                                           }
                                           """;

        const string expectedOutput = """
using System;

namespace Datadog.Trace.Configuration;
// <copyright company="Datadog">
// Unless explicitly stated otherwise all files in this repository are licensed under the Apache 2 License.
// This product includes software developed at Datadog (https://www.datadoghq.com/). Copyright 2017 Datadog, Inc.
// </copyright>
// <auto-generated/>

#nullable enable


/// <summary>
/// Generated configuration key matcher that handles main keys and aliases.
/// This file is auto-generated from supported-configurations.json and supported-configurations-docs.yaml. Do not edit this file directly. The source generator will regenerate it on build.
/// </summary>
internal static partial class ConfigKeyAliasesSwitcher
{
    /// <summary>
    /// Gets all aliases for the given configuration key.
    /// </summary>
    /// <param name="mainKey">The configuration key.</param>
    /// <returns>An array of aliases for the key, or empty array if no aliases exist.</returns>
    public static string[] GetAliases(string mainKey)
    {
        switch (mainKey)
        {
            default:
                return Array.Empty<string>();
        }
    }
}
""";

        var (diagnostics, outputs) = TestHelpers.GetGeneratedTrees<ConfigKeyAliasesSwitcherGenerator>(
            [],
            [],
            [("supported-configurations.json", supportedConfigJson)],
            assertOutput: false);
        var output = outputs.FirstOrDefault() ?? string.Empty;

        using var s = new AssertionScope();
        diagnostics.Should().BeEmpty();

        AssertContains(output, expectedOutput);
    }

    [Fact]
    public void HandlesMissingAliasesSection()
    {
        const string supportedConfigJson = """
                                           {
                                             "supportedConfigurations": {
                                               "DD_AGENT_HOST": {
                                                 "version": "A"
                                               }
                                             }
                                           }
                                           """;

        const string expectedOutput = """
using System;

namespace Datadog.Trace.Configuration;
// <copyright company="Datadog">
// Unless explicitly stated otherwise all files in this repository are licensed under the Apache 2 License.
// This product includes software developed at Datadog (https://www.datadoghq.com/). Copyright 2017 Datadog, Inc.
// </copyright>
// <auto-generated/>

#nullable enable


/// <summary>
/// Generated configuration key matcher that handles main keys and aliases.
/// This file is auto-generated from supported-configurations.json and supported-configurations-docs.yaml. Do not edit this file directly. The source generator will regenerate it on build.
/// </summary>
internal static partial class ConfigKeyAliasesSwitcher
{
    /// <summary>
    /// Gets all aliases for the given configuration key.
    /// </summary>
    /// <param name="mainKey">The configuration key.</param>
    /// <returns>An array of aliases for the key, or empty array if no aliases exist.</returns>
    public static string[] GetAliases(string mainKey)
    {
        switch (mainKey)
        {
            default:
                return Array.Empty<string>();
        }
    }
}
""";

        var (diagnostics, outputs) = TestHelpers.GetGeneratedTrees<ConfigKeyAliasesSwitcherGenerator>(
            [],
            [],
            [("supported-configurations.json", supportedConfigJson)],
            assertOutput: false);
        var output = outputs.FirstOrDefault() ?? string.Empty;

        using var s = new AssertionScope();
        diagnostics.Should().BeEmpty();

        AssertContains(output, expectedOutput);
    }

    private static void AssertContains(string actual, string expected)
    {
        var normalizedActual = string.Join("\n", actual.Split('\n').Select(l => l.TrimEnd()));
        var normalizedExpected = string.Join("\n", expected.Split('\n').Select(l => l.TrimEnd()));
        normalizedActual.Should().Contain(normalizedExpected);
    }
}
