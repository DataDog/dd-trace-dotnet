// <copyright file="TagsListGeneratorTests.cs" company="Datadog">
// Unless explicitly stated otherwise all files in this repository are licensed under the Apache 2 License.
// This product includes software developed at Datadog (https://www.datadoghq.com/). Copyright 2017 Datadog, Inc.
// </copyright>

using Datadog.Trace.SourceGenerators.TagsListGenerator;
using Xunit;

namespace Datadog.Trace.SourceGenerators.Tests
{
    public class TagsListGeneratorTests
    {
        [Fact]
        public void CanGenerateTagsList()
        {
            const string input = @"using Datadog.Trace.SourceGenerators;
namespace MyTests.TestListNameSpace
{
    public class TestList 
    { 
        [TagName(""TestId"")]
    	public string Id { get; set; }
    }
}";
            const string expected = @"// <auto-generated/>
#nullable enable

namespace MyTests.TestListNameSpace
{
    partial class TestList
    {
        public string GetTag(string key)
        {
            return key switch
            {
                ""TestId"" => Id,
                default => GetTagFromDictionary(key),
            };
        }

        public void SetTag(string key, string value)
        {
            switch(key)
            {
                case ""TestId"": 
                    Id = value;
                    break;
                default: 
                    SetTagInDictionary(key, value);
                    break;
            }
        }
    }
}";

            var (diagnostics, output) = TestHelpers.GetGeneratedOutput<TagListGenerator>(input);
            Assert.Equal(expected, output);
        }

        [Fact]
        public void CanGenerateTagsListWithMultipleFields()
        {
            const string input = @"using Datadog.Trace.SourceGenerators;
namespace MyTests.TestListNameSpace
{
    public class TestList 
    { 
        [TagName(""IdTag"")]
    	public string Id { get; set; }

        [TagName(""NameTag"")]
    	public string Name { get; set; }
    }
}";
            const string expected = @"// <auto-generated/>
#nullable enable

namespace MyTests.TestListNameSpace
{
    partial class TestList
    {
        public string GetTag(string key)
        {
            return key switch
            {
                ""IdTag"" => Id,
                ""NameTag"" => Name,
                default => GetTagFromDictionary(key),
            };
        }

        public void SetTag(string key, string value)
        {
            switch(key)
            {
                case ""IdTag"": 
                    Id = value;
                    break;
                case ""NameTag"": 
                    Name = value;
                    break;
                default: 
                    SetTagInDictionary(key, value);
                    break;
            }
        }
    }
}";
            var (diagnostics, output) = TestHelpers.GetGeneratedOutput<TagListGenerator>(input);
            Assert.Equal(expected, output);
        }

        [Fact]
        public void CanGenerateTagsListForSetOnlyProperty()
        {
            const string input = @"using Datadog.Trace.SourceGenerators;
namespace MyTests.TestListNameSpace
{
    public class TestList 
    { 
        [TagName(""IdTag"")]
    	public string Id { get; } = ""Some Value"";

        [TagName(""NameTag"")]
    	public string Name => ""Some Name"";
    }
}";
            const string expected = @"// <auto-generated/>
#nullable enable

namespace MyTests.TestListNameSpace
{
    partial class TestList
    {
        public string GetTag(string key)
        {
            return key switch
            {
                ""IdTag"" => Id,
                ""NameTag"" => Name,
                default => GetTagFromDictionary(key),
            };
        }

        public void SetTag(string key, string value)
        {
            switch(key)
            {
                default: 
                    SetTagInDictionary(key, value);
                    break;
            }
        }
    }
}";
            var (diagnostics, output) = TestHelpers.GetGeneratedOutput<TagListGenerator>(input);
            Assert.Equal(expected, output);
        }
    }
}
