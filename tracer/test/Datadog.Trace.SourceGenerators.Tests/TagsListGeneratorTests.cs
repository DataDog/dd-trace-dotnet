// <copyright file="TagsListGeneratorTests.cs" company="Datadog">
// Unless explicitly stated otherwise all files in this repository are licensed under the Apache 2 License.
// This product includes software developed at Datadog (https://www.datadoghq.com/). Copyright 2017 Datadog, Inc.
// </copyright>

using Datadog.Trace.SourceGenerators.TagsListGenerator;
using Datadog.Trace.SourceGenerators.TagsListGenerator.Diagnostics;
using Xunit;

namespace Datadog.Trace.SourceGenerators.Tests
{
    public class TagsListGeneratorTests
    {
        [Fact]
        public void CanGenerateTagsListWithTag()
        {
            const string input = @"using Datadog.Trace.SourceGenerators;
namespace MyTests.TestListNameSpace
{
    public class TestList 
    { 
        [TagName(""TestId"")]
    	public string Id { get; set; }
    }
}";
            const string expected = @"// <auto-generated/>
#nullable enable

namespace MyTests.TestListNameSpace
{
    partial class TestList
    {
        public override string? GetTag(string key)
        {
            return key switch
            {
                ""TestId"" => Id,
                _ => base.GetTag(key),
            };
        }

        public override void SetTag(string key, string value)
        {
            switch(key)
            {
                case ""TestId"": 
                    Id = value;
                    break;
                default: 
                    base.SetTag(key, value);
                    break;
            }
        }

        protected override int WriteAdditionalTags(ref byte[] bytes, ref int offset, out bool isOriginWritten)
        {
            var count = 0;
            if (Id != null)
            {
                count++;
                WriteTag(ref bytes, ref offset, ""TestId"", Id);
            }

            count += base.WriteAdditionalTags(ref bytes, ref offset, out var isOriginWrittenInBase);
            isOriginWritten = isOriginWrittenInBase;
            return count;
        }

        protected override void WriteAdditionalTags(System.Text.StringBuilder sb)
        {
            if (Id != null)
            {
                sb.Append(""TestId (tag):"")
                  .Append(Id)
                  .Append(',');
            }

            base.WriteAdditionalTags(sb);
        }
    }
}
";

            var (diagnostics, output) = TestHelpers.GetGeneratedOutput<TagListGenerator>(input);
            Assert.Equal(expected, output);
            Assert.Empty(diagnostics);
        }

        [Fact]
        public void CanGenerateTagsListWithMetric()
        {
            const string input = @"using Datadog.Trace.SourceGenerators;
namespace MyTests.TestListNameSpace
{
    public class TestList 
    { 
        [MetricName(""TestId"")]
    	public double? Id { get; set; }
    }
}";
            const string expected = @"// <auto-generated/>
#nullable enable

namespace MyTests.TestListNameSpace
{
    partial class TestList
    {
        public override double? GetMetric(string key)
        {
            return key switch
            {
                ""TestId"" => Id,
                _ => base.GetMetric(key),
            };
        }

        public override void SetMetric(string key, double? value)
        {
            switch(key)
            {
                case ""TestId"": 
                    Id = value;
                    break;
                default: 
                    base.SetMetric(key, value);
                    break;
            }
        }

        protected override int WriteAdditionalMetrics(ref byte[] bytes, ref int offset)
        {
            var count = 0;
            if (Id != null)
            {
                count++;
                WriteMetric(ref bytes, ref offset, ""TestId"", Id.Value);
            }

            return count + base.WriteAdditionalMetrics(ref bytes, ref offset);
        }

        protected override void WriteAdditionalMetrics(System.Text.StringBuilder sb)
        {
            if (Id != null)
            {
                sb.Append(""TestId (metric):"")
                  .Append(Id.Value)
                  .Append(',');
            }

            base.WriteAdditionalMetrics(sb);
        }
    }
}
";

            var (diagnostics, output) = TestHelpers.GetGeneratedOutput<TagListGenerator>(input);
            Assert.Equal(expected, output);
            Assert.Empty(diagnostics);
        }

        [Fact]
        public void CanGenerateTagsListWithMultipleTags()
        {
            const string input = @"using Datadog.Trace.SourceGenerators;
namespace MyTests.TestListNameSpace
{
    public class TestList 
    { 
        [TagName(""IdTag"")]
    	public string Id { get; set; }

        [TagName(""NameTag"")]
    	public string Name { get; set; }
    }
}";
            const string expected = @"// <auto-generated/>
#nullable enable

namespace MyTests.TestListNameSpace
{
    partial class TestList
    {
        public override string? GetTag(string key)
        {
            return key switch
            {
                ""IdTag"" => Id,
                ""NameTag"" => Name,
                _ => base.GetTag(key),
            };
        }

        public override void SetTag(string key, string value)
        {
            switch(key)
            {
                case ""IdTag"": 
                    Id = value;
                    break;
                case ""NameTag"": 
                    Name = value;
                    break;
                default: 
                    base.SetTag(key, value);
                    break;
            }
        }

        protected override int WriteAdditionalTags(ref byte[] bytes, ref int offset, out bool isOriginWritten)
        {
            var count = 0;
            if (Id != null)
            {
                count++;
                WriteTag(ref bytes, ref offset, ""IdTag"", Id);
            }

            if (Name != null)
            {
                count++;
                WriteTag(ref bytes, ref offset, ""NameTag"", Name);
            }

            count += base.WriteAdditionalTags(ref bytes, ref offset, out var isOriginWrittenInBase);
            isOriginWritten = isOriginWrittenInBase;
            return count;
        }

        protected override void WriteAdditionalTags(System.Text.StringBuilder sb)
        {
            if (Id != null)
            {
                sb.Append(""IdTag (tag):"")
                  .Append(Id)
                  .Append(',');
            }

            if (Name != null)
            {
                sb.Append(""NameTag (tag):"")
                  .Append(Name)
                  .Append(',');
            }

            base.WriteAdditionalTags(sb);
        }
    }
}
";
            var (diagnostics, output) = TestHelpers.GetGeneratedOutput<TagListGenerator>(input);
            Assert.Equal(expected, output);
            Assert.Empty(diagnostics);
        }

        [Fact]
        public void CanGenerateTagsListWithMultipleMetrics()
        {
            const string input = @"using Datadog.Trace.SourceGenerators;
namespace MyTests.TestListNameSpace
{
    public class TestList 
    { 
        [MetricName(""IdMetric"")]
    	public double? Id { get; set; }

        [MetricName(""NameMetric"")]
    	public double? Name { get; set; }
    }
}";
            const string expected = @"// <auto-generated/>
#nullable enable

namespace MyTests.TestListNameSpace
{
    partial class TestList
    {
        public override double? GetMetric(string key)
        {
            return key switch
            {
                ""IdMetric"" => Id,
                ""NameMetric"" => Name,
                _ => base.GetMetric(key),
            };
        }

        public override void SetMetric(string key, double? value)
        {
            switch(key)
            {
                case ""IdMetric"": 
                    Id = value;
                    break;
                case ""NameMetric"": 
                    Name = value;
                    break;
                default: 
                    base.SetMetric(key, value);
                    break;
            }
        }

        protected override int WriteAdditionalMetrics(ref byte[] bytes, ref int offset)
        {
            var count = 0;
            if (Id != null)
            {
                count++;
                WriteMetric(ref bytes, ref offset, ""IdMetric"", Id.Value);
            }

            if (Name != null)
            {
                count++;
                WriteMetric(ref bytes, ref offset, ""NameMetric"", Name.Value);
            }

            return count + base.WriteAdditionalMetrics(ref bytes, ref offset);
        }

        protected override void WriteAdditionalMetrics(System.Text.StringBuilder sb)
        {
            if (Id != null)
            {
                sb.Append(""IdMetric (metric):"")
                  .Append(Id.Value)
                  .Append(',');
            }

            if (Name != null)
            {
                sb.Append(""NameMetric (metric):"")
                  .Append(Name.Value)
                  .Append(',');
            }

            base.WriteAdditionalMetrics(sb);
        }
    }
}
";
            var (diagnostics, output) = TestHelpers.GetGeneratedOutput<TagListGenerator>(input);
            Assert.Equal(expected, output);
            Assert.Empty(diagnostics);
        }

        [Fact]
        public void CanGenerateTagsListForReadOnlyTag()
        {
            const string input = @"using Datadog.Trace.SourceGenerators;
namespace MyTests.TestListNameSpace
{
    public class TestList 
    { 
        [TagName(""IdTag"")]
    	public string Id { get; } = ""Some Value"";

        [TagName(""NameTag"")]
    	public string Name => ""Some Name"";
    }
}";
            const string expected = @"// <auto-generated/>
#nullable enable

namespace MyTests.TestListNameSpace
{
    partial class TestList
    {
        public override string? GetTag(string key)
        {
            return key switch
            {
                ""IdTag"" => Id,
                ""NameTag"" => Name,
                _ => base.GetTag(key),
            };
        }

        public override void SetTag(string key, string value)
        {
            switch(key)
            {
                default: 
                    base.SetTag(key, value);
                    break;
            }
        }

        protected override int WriteAdditionalTags(ref byte[] bytes, ref int offset, out bool isOriginWritten)
        {
            var count = 0;
            if (Id != null)
            {
                count++;
                WriteTag(ref bytes, ref offset, ""IdTag"", Id);
            }

            if (Name != null)
            {
                count++;
                WriteTag(ref bytes, ref offset, ""NameTag"", Name);
            }

            count += base.WriteAdditionalTags(ref bytes, ref offset, out var isOriginWrittenInBase);
            isOriginWritten = isOriginWrittenInBase;
            return count;
        }

        protected override void WriteAdditionalTags(System.Text.StringBuilder sb)
        {
            if (Id != null)
            {
                sb.Append(""IdTag (tag):"")
                  .Append(Id)
                  .Append(',');
            }

            if (Name != null)
            {
                sb.Append(""NameTag (tag):"")
                  .Append(Name)
                  .Append(',');
            }

            base.WriteAdditionalTags(sb);
        }
    }
}
";
            var (diagnostics, output) = TestHelpers.GetGeneratedOutput<TagListGenerator>(input);
            Assert.Equal(expected, output);
            Assert.Empty(diagnostics);
        }

        [Fact]
        public void CanGenerateTagsListForReadOnlyMetric()
        {
            const string input = @"using Datadog.Trace.SourceGenerators;
namespace MyTests.TestListNameSpace
{
    public class TestList 
    { 
        [MetricName(""IdMetric"")]
    	public double? Id { get; } = ""Some Value"";

        [MetricName(""NameMetric"")]
    	public double? Name => ""Some Name"";
    }
}";
            const string expected = @"// <auto-generated/>
#nullable enable

namespace MyTests.TestListNameSpace
{
    partial class TestList
    {
        public override double? GetMetric(string key)
        {
            return key switch
            {
                ""IdMetric"" => Id,
                ""NameMetric"" => Name,
                _ => base.GetMetric(key),
            };
        }

        public override void SetMetric(string key, double? value)
        {
            switch(key)
            {
                default: 
                    base.SetMetric(key, value);
                    break;
            }
        }

        protected override int WriteAdditionalMetrics(ref byte[] bytes, ref int offset)
        {
            var count = 0;
            if (Id != null)
            {
                count++;
                WriteMetric(ref bytes, ref offset, ""IdMetric"", Id.Value);
            }

            if (Name != null)
            {
                count++;
                WriteMetric(ref bytes, ref offset, ""NameMetric"", Name.Value);
            }

            return count + base.WriteAdditionalMetrics(ref bytes, ref offset);
        }

        protected override void WriteAdditionalMetrics(System.Text.StringBuilder sb)
        {
            if (Id != null)
            {
                sb.Append(""IdMetric (metric):"")
                  .Append(Id.Value)
                  .Append(',');
            }

            if (Name != null)
            {
                sb.Append(""NameMetric (metric):"")
                  .Append(Name.Value)
                  .Append(',');
            }

            base.WriteAdditionalMetrics(sb);
        }
    }
}
";
            var (diagnostics, output) = TestHelpers.GetGeneratedOutput<TagListGenerator>(input);
            Assert.Equal(expected, output);
            Assert.Empty(diagnostics);
        }

        [Fact]
        public void CanGenerateTagsListWithTagThatContainsOrigin()
        {
            const string input = @"using Datadog.Trace.SourceGenerators;
namespace MyTests.TestListNameSpace
{
    public class TestList 
    { 
        [TagName(""TestId"")]
    	public string Id { get; set; }

        [TagName(""_dd.origin"")]
    	public string Origin { get; set; }
    }
}";
            const string expected = @"// <auto-generated/>
#nullable enable

namespace MyTests.TestListNameSpace
{
    partial class TestList
    {
        public override string? GetTag(string key)
        {
            return key switch
            {
                ""TestId"" => Id,
                ""_dd.origin"" => Origin,
                _ => base.GetTag(key),
            };
        }

        public override void SetTag(string key, string value)
        {
            switch(key)
            {
                case ""TestId"": 
                    Id = value;
                    break;
                case ""_dd.origin"": 
                    Origin = value;
                    break;
                default: 
                    base.SetTag(key, value);
                    break;
            }
        }

        protected override int WriteAdditionalTags(ref byte[] bytes, ref int offset, out bool isOriginWritten)
        {
            var count = 0;
            if (Id != null)
            {
                count++;
                WriteTag(ref bytes, ref offset, ""TestId"", Id);
            }

            if (Origin != null)
            {
                count++;
                WriteTag(ref bytes, ref offset, ""_dd.origin"", Origin);
            }

            count += base.WriteAdditionalTags(ref bytes, ref offset, out var isOriginWrittenInBase);
            isOriginWritten = isOriginWrittenInBase || Origin is not null;
            return count;
        }

        protected override void WriteAdditionalTags(System.Text.StringBuilder sb)
        {
            if (Id != null)
            {
                sb.Append(""TestId (tag):"")
                  .Append(Id)
                  .Append(',');
            }

            if (Origin != null)
            {
                sb.Append(""_dd.origin (tag):"")
                  .Append(Origin)
                  .Append(',');
            }

            base.WriteAdditionalTags(sb);
        }
    }
}
";

            var (diagnostics, output) = TestHelpers.GetGeneratedOutput<TagListGenerator>(input);
            Assert.Equal(expected, output);
            Assert.Empty(diagnostics);
        }

        [Theory]
        [InlineData(@"null")]
        [InlineData("\"\"")]
        public void CantUseAnEmptyTagName(string key)
        {
            var input = @"using Datadog.Trace.SourceGenerators;
namespace MyTests.TestListNameSpace
{
    public class TestList 
    { 
        [TagName(" + key + @")]
    	public string Id { get; set; }
    }
}";
            var (diagnostics, output) = TestHelpers.GetGeneratedOutput<TagListGenerator>(input);
            Assert.Contains(diagnostics, diag => diag.Id == InvalidKeyDiagnostic.Id);
        }

        [Theory]
        [InlineData(@"null")]
        [InlineData("\"\"")]
        public void CantUseAnEmptyMetricName(string key)
        {
            var input = @"using Datadog.Trace.SourceGenerators;
namespace MyTests.TestListNameSpace
{
    public class TestList 
    { 
        [MetricName(" + key + @")]
    	public double? Id { get; set; }
    }
}";
            var (diagnostics, output) = TestHelpers.GetGeneratedOutput<TagListGenerator>(input);
            Assert.Contains(diagnostics, diag => diag.Id == InvalidKeyDiagnostic.Id);
        }

        [Fact]
        public void CantUseBothMetricNameAndTagName()
        {
            var input = @"using Datadog.Trace.SourceGenerators;
namespace MyTests.TestListNameSpace
{
    public class TestList 
    { 
        [TagName(""MyTagName"")]
        [MetricName(""MyMetricName"")]
    	public string Id { get; set; }
    }
}";
            var (diagnostics, output) = TestHelpers.GetGeneratedOutput<TagListGenerator>(input);
            Assert.Contains(diagnostics, diag => diag.Id == DuplicateAttributeDiagnostic.Id);
        }

        [Theory]
        [InlineData("double")]
        [InlineData("double?")]
        [InlineData("SomeOtherType")]
        public void CantUseWrongTypeForTagProperty(string returnType)
        {
            var input = @"using Datadog.Trace.SourceGenerators;
namespace MyTests.TestListNameSpace
{
    public class TestList 
    { 
        [TagName(""MyTagName"")]
    	public " + returnType + @" Id { get; set; }
    }
}";
            var (diagnostics, output) = TestHelpers.GetGeneratedOutput<TagListGenerator>(input);
            Assert.Contains(diagnostics, diag => diag.Id == InvalidTagPropertyReturnTypeDiagnostic.Id);
        }

        [Theory]
        [InlineData("string")]
        [InlineData("double")]
        [InlineData("int")]
        [InlineData("int?")]
        [InlineData("SomeOtherType")]
        public void CantUseWrongTypeForMetricProperty(string returnType)
        {
            var input = @"using Datadog.Trace.SourceGenerators;
namespace MyTests.TestListNameSpace
{
    public class TestList 
    { 
        [MetricName(""MyTagName"")]
    	public " + returnType + @" Id { get; set; }
    }
}";
            var (diagnostics, output) = TestHelpers.GetGeneratedOutput<TagListGenerator>(input);
            Assert.Contains(diagnostics, diag => diag.Id == InvalidMetricPropertyReturnTypeDiagnostic.Id);
        }
    }
}
