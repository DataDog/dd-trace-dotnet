Template:
Segments: 

{
    "ref": "Nested"
}
Expressions: 
(
    scopeMember,
    scopeMember,
    scopeMember,
    exception,
    scopeMemberArray) =>
{
    var this = (DebuggerExpressionLanguageTests.TestStruct)scopeMember.Value;
    var @return = (string)scopeMember.Value;
    var @duration = (TimeSpan)scopeMember.Value;
    var @exception = exception;
    var IntLocal = (int)scopeMemberArray[0].Value;
    var DoubleLocal = (double)scopeMemberArray[1].Value;
    var StringLocal = (string)scopeMemberArray[2].Value;
    var CollectionLocal = (List<string>)scopeMemberArray[3].Value;
    var DictionaryLocal = (Dictionary<string, string>)scopeMemberArray[4].Value;
    var NestedObjectLocal = (DebuggerExpressionLanguageTests.TestStruct.NestedObject)scopeMemberArray[5].Value;
    var NullLocal = (DebuggerExpressionLanguageTests.TestStruct.NestedObject)scopeMemberArray[6].Value;
    var IntArg = (int)scopeMemberArray[7].Value;
    var DoubleArg = (double)scopeMemberArray[8].Value;
    var StringArg = (string)scopeMemberArray[9].Value;
    var CollectionArg = (List<string>)scopeMemberArray[10].Value;
    var NestedObjectArg = (DebuggerExpressionLanguageTests.TestStruct.NestedObject)scopeMemberArray[11].Value;
    var $dd_el_result =
    {
        var fieldsArray = this.Nested.GetType().GetFields(
            BindingFlags.DeclaredOnly | BindingFlags.Instance | BindingFlags.Static | BindingFlags.Public | BindingFlags.NonPublic);
        var fieldValues = new StringBuilder();
        var index = 0;
        while (true)
        {
            if ((index < fieldsArray.Length) && (index < 5))
            {
                fieldValues.Append(
                    ProbeExpressionParser<string>.DumpObject(
                        fieldsArray[index].GetValue(this.Nested),
                        fieldsArray[index].FieldType,
                        fieldsArray[index].Name,
                        0));
                index++;

                if ((index < fieldsArray.Length) && (index < 5))
                {
                    return fieldValues.Append(", ");
                }
            }
            else
            {
                if (index < fieldsArray.Length)
                {
                    return fieldValues.Append(", ...");
                }

                break;
            }
        }

        return fieldValues.ToString();
    };

    return $dd_el_result;
}
Result: The result of the expression is: _parentPrivateMember=Hello from parent private member, _circleRef=Datadog.Trace.Tests.Debugger.DebuggerExpressionLanguageTests+TestStruct+NestedObject, _timeSpan=00:00:00, {[one, 1], [two, 2], [three, 3], ...}, _ienumerable=System.Collections.Generic.IEnumerable`1[[System.Int32, Culture=neutral]], ...
