Template:
Segments: 

{
    "ref": "Collection"
}
Expressions: 
(
    scopeMember,
    scopeMember,
    scopeMember,
    exception,
    scopeMemberArray) =>
{
    string loopItem;
    IEnumerator<string> enumerator;
    var this = (DebuggerExpressionLanguageTests.TestStruct)scopeMember.Value;
    var @return = (string)scopeMember.Value;
    var @duration = (TimeSpan)scopeMember.Value;
    var @exception = exception;
    var IntLocal = (int)scopeMemberArray[0].Value;
    var DoubleLocal = (double)scopeMemberArray[1].Value;
    var StringLocal = (string)scopeMemberArray[2].Value;
    var CollectionLocal = (List<string>)scopeMemberArray[3].Value;
    var DictionaryLocal = (Dictionary<string, string>)scopeMemberArray[4].Value;
    var NestedObjectLocal = (DebuggerExpressionLanguageTests.TestStruct.NestedObject)scopeMemberArray[5].Value;
    var NullLocal = (DebuggerExpressionLanguageTests.TestStruct.NestedObject)scopeMemberArray[6].Value;
    var IntArg = (int)scopeMemberArray[7].Value;
    var DoubleArg = (double)scopeMemberArray[8].Value;
    var StringArg = (string)scopeMemberArray[9].Value;
    var CollectionArg = (List<string>)scopeMemberArray[10].Value;
    var NestedObjectArg = (DebuggerExpressionLanguageTests.TestStruct.NestedObject)scopeMemberArray[11].Value;
    var $dd_el_result = "System.Collections.Generic.List`1[[System.String, System.Private.CoreLib, Version=7.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]" + @"
" + enumerator = this.Collection.GetEnumerator();
    var index = 0;
    var itemValues = new StringBuilder();
    while (true)
    {
        if ((enumerator.MoveNext()) && (index < 3))
        {
            string loopItem;
            loopItem = enumerator.Current;
            itemValues.AppendLine(
                ProbeExpressionParser<string>.DumpObject(
                    loopItem,
                    typeof(string),
                    "Item " + index,
                    1));
            index++;
        }
        else
        {
            break;
        }
    }

    return itemValues.ToString();;

    return $dd_el_result;
}
Result: The result of the expression is: System.Collections.Generic.List`1[[System.String, System.Private.CoreLib, Version=7.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]
Item 0: hello
Item 1: 1st Item
Item 2: 2nd item

