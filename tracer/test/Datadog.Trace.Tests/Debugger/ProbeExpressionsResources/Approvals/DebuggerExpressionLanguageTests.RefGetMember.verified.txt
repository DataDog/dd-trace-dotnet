Condition:
Json:
{
    "eq": [
        {
            "getmember": [
                {
                    "ref": "Nested"
                },
                "NestedString"
            ]
        },
        "Hello from nested object"
    ]
}
Expression: (
    scopeMember,
    scopeMember,
    scopeMember,
    exception,
    scopeMemberArray) =>
{
    var this = (DebuggerExpressionLanguageTests.TestStruct)scopeMember.Value;
    var @return = (string)scopeMember.Value;
    var @duration = (TimeSpan)scopeMember.Value;
    var @exception = exception;
    var IntLocal = (int)scopeMemberArray[0].Value;
    var DoubleLocal = (double)scopeMemberArray[1].Value;
    var StringLocal = (string)scopeMemberArray[2].Value;
    var CollectionLocal = (List<string>)scopeMemberArray[3].Value;
    var DictionaryLocal = (Dictionary<string, string>)scopeMemberArray[4].Value;
    var NestedObjectLocal = (DebuggerExpressionLanguageTests.TestStruct.NestedObject)scopeMemberArray[5].Value;
    var NullLocal = (DebuggerExpressionLanguageTests.TestStruct.NestedObject)scopeMemberArray[6].Value;
    var BooleanValue = (bool)scopeMemberArray[7].Value;
    var Char = (char)scopeMemberArray[8].Value;
    var AnotherChar = (char)scopeMemberArray[9].Value;
    var IntArg = (int)scopeMemberArray[10].Value;
    var DoubleArg = (double)scopeMemberArray[11].Value;
    var StringArg = (string)scopeMemberArray[12].Value;
    var CollectionArg = (List<string>)scopeMemberArray[13].Value;
    var NestedObjectArg = (DebuggerExpressionLanguageTests.TestStruct.NestedObject)scopeMemberArray[14].Value;
    var $dd_el_result = this.Nested.NestedString == "Hello from nested object";

    return $dd_el_result;
}
Result: True
