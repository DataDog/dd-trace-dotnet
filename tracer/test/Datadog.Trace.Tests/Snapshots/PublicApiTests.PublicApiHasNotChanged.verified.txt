[assembly: System.Reflection.AssemblyMetadata("RepositoryUrl", "https://github.com/DataDog/dd-trace-dotnet.git")]

namespace Datadog.Trace.Configuration
{
    public class CompositeConfigurationSource : Datadog.Trace.Configuration.IConfigurationSource, System.Collections.Generic.IEnumerable<Datadog.Trace.Configuration.IConfigurationSource>, System.Collections.IEnumerable
    {
        public CompositeConfigurationSource() { }
        public void Add(Datadog.Trace.Configuration.IConfigurationSource source) { }
        public bool? GetBool(string key) { }
        public System.Collections.Generic.IDictionary<string, string> GetDictionary(string key) { }
        public System.Collections.Generic.IDictionary<string, string> GetDictionary(string key, bool allowOptionalMappings) { }
        public double? GetDouble(string key) { }
        public int? GetInt32(string key) { }
        public string GetString(string key) { }
        public void Insert(int index, Datadog.Trace.Configuration.IConfigurationSource item) { }
    }
    public static class ConfigurationKeys
    {
        public const string AgentHost = "DD_AGENT_HOST";
        public const string AgentPort = "DD_TRACE_AGENT_PORT";
        public const string AgentUri = "DD_TRACE_AGENT_URL";
        public const string ApiKey = "DD_API_KEY";
        public const string AppSecBlockingEnabled = "DD_APPSEC_BLOCKING_ENABLED";
        public const string AppSecCustomIpHeader = "DD_APPSEC_IPHEADER";
        public const string AppSecEnabled = "DD_APPSEC_ENABLED";
        public const string AppSecExtraHeaders = "DD_APPSEC_EXTRA_HEADERS";
        public const string AppSecRules = "DD_APPSEC_RULES";
        public const string BufferSize = "DD_TRACE_BUFFER_SIZE";
        public const string CIVisibilityEnabled = "DD_CIVISIBILITY_ENABLED";
        public const string ConfigurationFileName = "DD_TRACE_CONFIG_FILE";
        public const string CustomSamplingRules = "DD_TRACE_SAMPLING_RULES";
        public const string DebugEnabled = "DD_TRACE_DEBUG";
        public const string DiagnosticSourceEnabled = "DD_DIAGNOSTIC_SOURCE_ENABLED";
        public const string DisabledIntegrations = "DD_DISABLED_INTEGRATIONS";
        public const string DogStatsDArgs = "DD_DOGSTATSD_ARGS";
        public const string DogStatsDPath = "DD_DOGSTATSD_PATH";
        public const string DogStatsdPort = "DD_DOGSTATSD_PORT";
        public const string Environment = "DD_ENV";
        [System.Obsolete("App Analytics has been replaced by Tracing without Limits. For more information s" +
            "ee https://docs.datadoghq.com/tracing/legacy_app_analytics/")]
        public const string GlobalAnalyticsEnabled = "DD_TRACE_ANALYTICS_ENABLED";
        public const string GlobalSamplingRate = "DD_TRACE_SAMPLE_RATE";
        public const string GlobalTags = "DD_TAGS";
        public const string HeaderTags = "DD_TRACE_HEADER_TAGS";
        public const string HttpClientErrorStatusCodes = "DD_HTTP_CLIENT_ERROR_STATUSES";
        public const string HttpClientExcludedUrlSubstrings = "DD_TRACE_HTTP_CLIENT_EXCLUDED_URL_SUBSTRINGS";
        public const string HttpServerErrorStatusCodes = "DD_HTTP_SERVER_ERROR_STATUSES";
        public const string KafkaCreateConsumerScopeEnabled = "DD_TRACE_KAFKA_CREATE_CONSUMER_SCOPE_ENABLED";
        public const string LogDirectory = "DD_TRACE_LOG_DIRECTORY";
        public const string LogRateLimit = "DD_TRACE_LOGGING_RATE";
        public const string LogsInjectionEnabled = "DD_LOGS_INJECTION";
        public const string MaxLogFileSize = "DD_MAX_LOGFILE_SIZE";
        public const string MaxTracesSubmittedPerSecond = "DD_MAX_TRACES_PER_SECOND";
        public const string MetricsPipeName = "DD_DOGSTATSD_PIPE_NAME";
        public const string PartialFlushEnabled = "DD_TRACE_PARTIAL_FLUSH_ENABLED";
        public const string PartialFlushMinSpans = "DD_TRACE_PARTIAL_FLUSH_MIN_SPANS";
        [System.Obsolete("DD_TRACE_LOG_PATH is deprecated. Use DD_TRACE_LOG_DIRECTORY instead")]
        public const string ProfilerLogPath = "DD_TRACE_LOG_PATH";
        public const string RuntimeMetricsEnabled = "DD_RUNTIME_METRICS_ENABLED";
        public const string SerializationBatchInterval = "DD_TRACE_BATCH_INTERVAL";
        public const string ServiceName = "DD_SERVICE";
        public const string ServiceNameMappings = "DD_TRACE_SERVICE_MAPPING";
        public const string ServiceVersion = "DD_VERSION";
        public const string StartupDiagnosticLogEnabled = "DD_TRACE_STARTUP_LOGS";
        public const string TraceAgentArgs = "DD_TRACE_AGENT_ARGS";
        public const string TraceAgentPath = "DD_TRACE_AGENT_PATH";
        public const string TraceAgentPortKey = "DD_APM_RECEIVER_PORT";
        public const string TraceEnabled = "DD_TRACE_ENABLED";
        public const string TracerMetricsEnabled = "DD_TRACE_METRICS_ENABLED";
        public const string TracesPipeName = "DD_TRACE_PIPE_NAME";
        public const string TracesPipeTimeoutMs = "DD_TRACE_PIPE_TIMEOUT_MS";
        public const string TracesTransport = "DD_TRACE_TRANSPORT";
        public static class Integrations
        {
            [System.Obsolete("App Analytics has been replaced by Tracing without Limits. For more information s" +
                "ee https://docs.datadoghq.com/tracing/legacy_app_analytics/")]
            public const string AnalyticsEnabled = "DD_TRACE_{0}_ANALYTICS_ENABLED";
            [System.Obsolete("App Analytics has been replaced by Tracing without Limits. For more information s" +
                "ee https://docs.datadoghq.com/tracing/legacy_app_analytics/")]
            public const string AnalyticsSampleRate = "DD_TRACE_{0}_ANALYTICS_SAMPLE_RATE";
            public const string Enabled = "DD_TRACE_{0}_ENABLED";
        }
    }
    public class EnvironmentConfigurationSource : Datadog.Trace.Configuration.StringConfigurationSource
    {
        public EnvironmentConfigurationSource() { }
        public override string GetString(string key) { }
    }
    public class GlobalSettings
    {
        public bool DebugEnabled { get; }
        public static Datadog.Trace.Configuration.GlobalSettings FromDefaultSources() { }
        public static void Reload() { }
        public static void SetDebugEnabled(bool enabled) { }
    }
    public interface IConfigurationSource
    {
        bool? GetBool(string key);
        System.Collections.Generic.IDictionary<string, string> GetDictionary(string key);
        System.Collections.Generic.IDictionary<string, string> GetDictionary(string key, bool allowOptionalMappings);
        double? GetDouble(string key);
        int? GetInt32(string key);
        string GetString(string key);
    }
    public class ImmutableIntegrationSettings
    {
        public bool? AnalyticsEnabled { get; }
        public double AnalyticsSampleRate { get; }
        public bool? Enabled { get; }
        public string IntegrationName { get; }
    }
    public class ImmutableIntegrationSettingsCollection
    {
        public Datadog.Trace.Configuration.ImmutableIntegrationSettings this[string integrationName] { get; }
    }
    public class ImmutableTracerSettings
    {
        public ImmutableTracerSettings(Datadog.Trace.Configuration.IConfigurationSource source) { }
        public ImmutableTracerSettings(Datadog.Trace.Configuration.TracerSettings settings) { }
        public System.Uri AgentUri { get; }
        [System.Obsolete("App Analytics has been replaced by Tracing without Limits. For more information s" +
            "ee https://docs.datadoghq.com/tracing/legacy_app_analytics/")]
        public bool AnalyticsEnabled { get; }
        public string CustomSamplingRules { get; }
        public int DogStatsdPort { get; }
        public string Environment { get; }
        public double? GlobalSamplingRate { get; }
        public System.Collections.Generic.IReadOnlyDictionary<string, string> GlobalTags { get; }
        public System.Collections.Generic.IReadOnlyDictionary<string, string> HeaderTags { get; }
        public Datadog.Trace.Configuration.ImmutableIntegrationSettingsCollection Integrations { get; }
        public bool KafkaCreateConsumerScopeEnabled { get; }
        public bool LogsInjectionEnabled { get; }
        public int MaxTracesSubmittedPerSecond { get; }
        public string MetricsPipeName { get; }
        public bool PartialFlushEnabled { get; }
        public int PartialFlushMinSpans { get; }
        public bool RuntimeMetricsEnabled { get; }
        public string ServiceName { get; }
        public string ServiceVersion { get; }
        public bool StartupDiagnosticLogEnabled { get; }
        public bool TraceEnabled { get; }
        public bool TracerMetricsEnabled { get; }
        public string TracesPipeName { get; }
        public int TracesPipeTimeoutMs { get; }
        public string TracesTransport { get; }
        public static Datadog.Trace.Configuration.ImmutableTracerSettings FromDefaultSources() { }
    }
    public class IntegrationSettings
    {
        public IntegrationSettings(string integrationName, Datadog.Trace.Configuration.IConfigurationSource source) { }
        public bool? AnalyticsEnabled { get; set; }
        public double AnalyticsSampleRate { get; set; }
        public bool? Enabled { get; set; }
        public string IntegrationName { get; }
    }
    public class IntegrationSettingsCollection
    {
        public IntegrationSettingsCollection(Datadog.Trace.Configuration.IConfigurationSource source) { }
        public Datadog.Trace.Configuration.IntegrationSettings this[string integrationName] { get; }
    }
    public class JsonConfigurationSource : Datadog.Trace.Configuration.IConfigurationSource
    {
        public JsonConfigurationSource(string json) { }
        public System.Collections.Generic.IDictionary<string, string> GetDictionary(string key) { }
        public System.Collections.Generic.IDictionary<string, string> GetDictionary(string key, bool allowOptionalMappings) { }
        public T GetValue<T>(string key) { }
        public static Datadog.Trace.Configuration.JsonConfigurationSource FromFile(string filename) { }
    }
    public class NameValueConfigurationSource : Datadog.Trace.Configuration.StringConfigurationSource
    {
        public NameValueConfigurationSource(System.Collections.Specialized.NameValueCollection nameValueCollection) { }
        public override string GetString(string key) { }
    }
    public abstract class StringConfigurationSource : Datadog.Trace.Configuration.IConfigurationSource
    {
        protected StringConfigurationSource() { }
        public virtual bool? GetBool(string key) { }
        public System.Collections.Generic.IDictionary<string, string> GetDictionary(string key) { }
        public System.Collections.Generic.IDictionary<string, string> GetDictionary(string key, bool allowOptionalMappings) { }
        public double? GetDouble(string key) { }
        public virtual int? GetInt32(string key) { }
        public abstract string GetString(string key);
        public static System.Collections.Generic.IDictionary<string, string> ParseCustomKeyValues(string data) { }
        public static System.Collections.Generic.IDictionary<string, string> ParseCustomKeyValues(string data, bool allowOptionalMappings) { }
    }
    public class TracerSettings
    {
        public const string DefaultAgentHost = "localhost";
        public const int DefaultAgentPort = 8126;
        public TracerSettings() { }
        public TracerSettings(Datadog.Trace.Configuration.IConfigurationSource source) { }
        public System.Uri AgentUri { get; set; }
        [System.Obsolete("App Analytics has been replaced by Tracing without Limits. For more information s" +
            "ee https://docs.datadoghq.com/tracing/legacy_app_analytics/")]
        public bool AnalyticsEnabled { get; set; }
        public string CustomSamplingRules { get; set; }
        public bool DiagnosticSourceEnabled { get; set; }
        public System.Collections.Generic.HashSet<string> DisabledIntegrationNames { get; set; }
        public int DogStatsdPort { get; set; }
        public string Environment { get; set; }
        public double? GlobalSamplingRate { get; set; }
        public System.Collections.Generic.IDictionary<string, string> GlobalTags { get; set; }
        public System.Collections.Generic.IDictionary<string, string> HeaderTags { get; set; }
        public Datadog.Trace.Configuration.IntegrationSettingsCollection Integrations { get; }
        public bool KafkaCreateConsumerScopeEnabled { get; set; }
        public bool LogsInjectionEnabled { get; set; }
        public int MaxTracesSubmittedPerSecond { get; set; }
        public string MetricsPipeName { get; set; }
        public bool PartialFlushEnabled { get; set; }
        public int PartialFlushMinSpans { get; set; }
        public bool RuntimeMetricsEnabled { get; set; }
        public string ServiceName { get; set; }
        public string ServiceVersion { get; set; }
        public bool StartupDiagnosticLogEnabled { get; set; }
        public bool TraceEnabled { get; set; }
        public bool TracerMetricsEnabled { get; set; }
        public string TracesPipeName { get; set; }
        public int TracesPipeTimeoutMs { get; set; }
        public string TracesTransport { get; set; }
        public Datadog.Trace.Configuration.ImmutableTracerSettings Build() { }
        public void SetHttpClientErrorStatusCodes(System.Collections.Generic.IEnumerable<int> statusCodes) { }
        public void SetHttpServerErrorStatusCodes(System.Collections.Generic.IEnumerable<int> statusCodes) { }
        public void SetServiceNameMappings(System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<string, string>> mappings) { }
        public static Datadog.Trace.Configuration.CompositeConfigurationSource CreateDefaultConfigurationSource() { }
        public static Datadog.Trace.Configuration.TracerSettings FromDefaultSources() { }
    }
}
namespace Datadog.Trace
{
    public static class CorrelationIdentifier
    {
        public static string Env { get; }
        public static string Service { get; }
        public static ulong SpanId { get; }
        public static ulong TraceId { get; }
        public static string Version { get; }
    }
    public static class HttpHeaderNames
    {
        public const string Origin = "x-datadog-origin";
        public const string ParentId = "x-datadog-parent-id";
        public const string SamplingPriority = "x-datadog-sampling-priority";
        public const string TraceId = "x-datadog-trace-id";
        public const string TracingEnabled = "x-datadog-tracing-enabled";
    }
    public interface ISpanContext
    {
        string ServiceName { get; }
        ulong SpanId { get; }
        ulong TraceId { get; }
    }
    public enum SamplingPriority
    {
        UserReject = -1,
        AutoReject = 0,
        AutoKeep = 1,
        UserKeep = 2,
    }
    public class Scope : System.IDisposable
    {
        public Datadog.Trace.Span Span { get; }
        public void Close() { }
        public void Dispose() { }
    }
    public class Span : System.IDisposable
    {
        public bool Error { get; set; }
        public string OperationName { get; set; }
        public string ResourceName { get; set; }
        public string ServiceName { get; set; }
        public ulong SpanId { get; }
        public ulong TraceId { get; }
        public string Type { get; set; }
        public void Dispose() { }
        public void Finish() { }
        public void Finish(System.DateTimeOffset finishTimestamp) { }
        public string GetTag(string key) { }
        public void SetException(System.Exception exception) { }
        public Datadog.Trace.Span SetTag(string key, string value) { }
        public override string ToString() { }
    }
    public class SpanContext : Datadog.Trace.ISpanContext
    {
        public SpanContext(ulong? traceId, ulong spanId, Datadog.Trace.SamplingPriority? samplingPriority = default, string serviceName = null) { }
        public Datadog.Trace.ISpanContext Parent { get; }
        public ulong? ParentId { get; }
        public string ServiceName { get; set; }
        public ulong SpanId { get; }
        public ulong TraceId { get; }
    }
    public static class SpanKinds
    {
        public const string Client = "client";
        public const string Consumer = "consumer";
        public const string Producer = "producer";
        public const string Server = "server";
    }
    public static class SpanTypes
    {
        public const string Benchmark = "benchmark";
        public const string Build = "build";
        public const string Custom = "custom";
        public const string Db = "db";
        public const string Http = "http";
        public const string Queue = "queue";
        public const string Serverless = "serverless";
        public const string Sql = "sql";
        public const string Test = "test";
        public const string Web = "web";
    }
    public static class Tags
    {
        public const string DbName = "db.name";
        public const string DbType = "db.type";
        public const string DbUser = "db.user";
        public const string Env = "env";
        public const string ErrorMsg = "error.msg";
        public const string ErrorStack = "error.stack";
        public const string ErrorType = "error.type";
        public const string HttpMethod = "http.method";
        public const string HttpRequestHeadersHost = "http.request.headers.host";
        public const string HttpStatusCode = "http.status_code";
        public const string HttpUrl = "http.url";
        public const string InstrumentationName = "component";
        public const string InstrumentedMethod = "instrumented.method";
        public const string Language = "language";
        public const string ManualDrop = "manual.drop";
        public const string ManualKeep = "manual.keep";
        public const string MessageSize = "message.size";
        public const string OutHost = "out.host";
        public const string OutPort = "out.port";
        public const string SamplingPriority = "sampling.priority";
        public const string SpanKind = "span.kind";
        public const string SqlQuery = "sql.query";
        public const string SqlRows = "sql.rows";
        public const string Version = "version";
    }
    public class Tracer
    {
        [System.Obsolete("This API is deprecated. Use Tracer.Instance to obtain a Tracer instance to create" +
            " spans.")]
        public Tracer() { }
        [System.Obsolete(@"This API is deprecated, as it replaces the global settings for all Tracer instances in the application. If you were using this API to configure the global Tracer.Instance in code, use the static Tracer.Configure() to replace the global Tracer settings for the application")]
        public Tracer(Datadog.Trace.Configuration.TracerSettings settings) { }
        public Datadog.Trace.Scope ActiveScope { get; }
        public string DefaultServiceName { get; }
        public Datadog.Trace.Configuration.ImmutableTracerSettings Settings { get; }
        [set: System.Obsolete("Use Tracer.Configure to configure the global Tracer instance in code.")]
        public static Datadog.Trace.Tracer Instance { get; set; }
        public Datadog.Trace.Scope ActivateSpan(Datadog.Trace.Span span, bool finishOnClose = true) { }
        protected override void Finalize() { }
        public System.Threading.Tasks.Task ForceFlushAsync() { }
        public Datadog.Trace.Scope StartActive(string operationName, Datadog.Trace.ISpanContext parent = null, string serviceName = null, System.DateTimeOffset? startTime = default, bool ignoreActiveScope = false, bool finishOnClose = true) { }
        public Datadog.Trace.Span StartSpan(string operationName, Datadog.Trace.ISpanContext parent = null, string serviceName = null, System.DateTimeOffset? startTime = default, bool ignoreActiveScope = false) { }
        public static void Configure(Datadog.Trace.Configuration.TracerSettings settings) { }
    }
}
namespace Datadog.Trace.ExtensionMethods
{
    public static class SpanExtensions
    {
        public static void AddTagsFromDbCommand(this Datadog.Trace.Span span, System.Data.IDbCommand command) { }
        public static void SetTraceSamplingPriority(this Datadog.Trace.Span span, Datadog.Trace.SamplingPriority samplingPriority) { }
    }
}
namespace Datadog.Trace.Logging
{
    public interface ILogProvider
    {
        Datadog.Trace.Logging.Logger GetLogger(string name);
        System.IDisposable OpenMappedContext(string key, object value, bool destructure = false);
        System.IDisposable OpenNestedContext(string message);
    }
    public enum LogLevel
    {
        Trace = 0,
        Debug = 1,
        Info = 2,
        Warn = 3,
        Error = 4,
        Fatal = 5,
    }
    public static class LogProvider
    {
        public static bool IsDisabled { get; set; }
        public static void SetCurrentLogProvider(Datadog.Trace.Logging.ILogProvider logProvider) { }
    }
    public delegate bool Logger(Datadog.Trace.Logging.LogLevel logLevel, System.Func<string> messageFunc, System.Exception exception = null, params object[] formatParameters);
}
namespace Datadog.Trace.Logging.LogProviders
{
    public class LibLogException : System.Exception
    {
        public LibLogException(string message) { }
        public LibLogException(string message, System.Exception inner) { }
    }
}