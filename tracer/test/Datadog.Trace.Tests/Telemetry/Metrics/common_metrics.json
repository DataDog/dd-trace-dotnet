{
  "general": {
    "init_time": {
      "tags": [
        "total",
        "component"
      ],
      "metric_type": "distribution",
      "data_type": "milliseconds",
      "description": "The time it takes to import/initialize the tracer on startup. If this consists of multiple steps/components, tagged by the component/total e.g. `component:call_target`. Component tags will vary by language",
      "send_to_user": false,
      "user_tags":[]
    },
    "logs_created": {
      "tags": [
        "level"
      ],
      "metric_type": "count",
      "data_type": "logs",
      "description": "The number of logs created with a given log level. Useful for calculating impact for other features (automatic sending of logs). Levels should be one of `debug`, `info`, `warn`, `error`, `critical`",
      "send_to_user": false,
      "user_tags":[]
    }
  },
  "tracers": {
    "integration_errors": {
      "tags": [
        "integration_name",
        "error_type"
      ],
      "metric_type": "count",
      "data_type": "instances",
      "description": "The number of errors/failures in the library integration, tagged by the integration name (e.g. `integration_name:kafka`, `integration_name:rabbitmq`) and ErrorType (e.g. `error:duck_type`, `error:runtime`). Both tags will vary by implementation language",
      "send_to_user": false,
      "user_tags":[]
    },
    "spans_created": {
      "tags": [
        "integration_name"
      ],
      "metric_type": "count",
      "data_type": "spans",
      "description": "The number of spans created by the tracer, tagged by automatic integration name (e.g. `integration_name:kafka`, `integration_name:rabbitmq`) or manual API (`integration_name:datadog`, `integration_name:otel` or `integration_name:opentracing`)",
      "send_to_user": false,
      "user_tags":[]
    },
    "spans_finished": {
      "tags": [
        "integration_name"
      ],
      "metric_type": "count",
      "data_type": "spans",
      "description": "The number of spans finished, optionally (if implementation allows) tagged by automatic integration name (e.g. `integration_name:kafka`, `integration_name:rabbitmq`) or manual API (`integration_name:datadog`, `integration_name:otel` or `integration_name:opentracing`)",
      "send_to_user": false,
      "user_tags":[]
    },
    "spans_enqueued_for_serialization": {
      "tags": [
        "reason"
      ],
      "metric_type": "count",
      "data_type": "spans",
      "description": "The number of spans enqueued for serialization/flushing. Tagged by one of `reason:p0_keep` (the span was part of a p0 trace that was kept for sending to the agent), `reason:single_span_sampling` (the span was selected via single_span_sampling, and otherwise would have been dropped as a p0 span), or `reason:default` - The tracer is not dropping p0 spans, so the span was enqueued 'by default' for sending to the trace-agent)",
      "send_to_user": false,
      "user_tags":[]
    },
    "spans_dropped": {
      "tags": [
        "reason"
      ],
      "metric_type": "count",
      "data_type": "spans",
      "description": "The number of spans dropped and the reason for being dropped, for example `reason:p0_drop` (the span was part of a p0 trace that was droped by the tracer), `reason:overfull_buffer` (the local buffer was full, and the span had to be dropped), `reason:serialization_error` (there was an error serializing the span and it had to be dropped)",
      "send_to_user": false,
      "user_tags":[]
    },
    "trace_segments_created": {
      "tags": [
        "new_continued"
      ],
      "metric_type": "count",
      "data_type": "trace segments",
      "description": "The number of trace segments (local traces) created, tagged with new/continued depending on whether this is a new trace (no distributed context information) or continued (has distributed context).",
      "send_to_user": false,
      "user_tags":[]
    },
    "trace_chunks_enqueued": {
      "tags": [],
      "metric_type": "count",
      "data_type": "trace chunks",
      "description": "The number of times a trace chunk is enqueued for sampling/serialization. In partial-flush scenarios, multiple trace chunks may be enququed per trace segment/local trace",
      "send_to_user": false,
      "user_tags":[]
    },
    "trace_chunk_size": {
      "tags": [],
      "metric_type": "distribution",
      "data_type": "spans",
      "description": "The number of spans in the trace chunk when it is enqueued",
      "send_to_user": false,
      "user_tags":[]
    },
    "trace_chunk_serialization.bytes": {
      "tags": [],
      "metric_type": "distribution",
      "data_type": "bytes",
      "description": "The size in bytes of the serialized trace chunk",
      "send_to_user": false,
      "user_tags":[]
    },
    "trace_chunk_serialization.ms": {
      "tags": [],
      "metric_type": "distribution",
      "data_type": "milliseconds",
      "description": "The time it takes to serialize a trace chunk",
      "send_to_user": false,
      "user_tags":[]
    },
    "trace_chunks_enqueued_for_serialization": {
      "tags": [
        "reason"
      ],
      "metric_type": "count",
      "data_type": "trace chunks",
      "description": "The number of trace chunks kept for serialization. Excludes single-span sampling spans. Tagged by one of `reason:p0_keep` (the trace was a p0 trace that was kept for sending to the agent) or `reason:default` - The tracer is not dropping p0 spans, so the span was enqueued 'by default' for sending to the trace-agent)",
      "send_to_user": false,
      "user_tags":[]
    },
    "trace_chunks_dropped": {
      "tags": [
        "reason"
      ],
      "metric_type": "count",
      "data_type": "trace chunks",
      "description": "the number of trace chunks dropped prior to serialization, tagged by reason. Includes traces which are dropped due to errors, overfull buffers, as well as due to sampling decision. For example `reason:p0_drop` (the span a p0 trace that was droped by the tracer), `reason:overfull_buffer` (the local buffer was full, and the trace chunk had to be dropped), `reason:serialization_error` (there was an error serializing the trace and it had to be dropped)",
      "send_to_user": false,
      "user_tags":[]
    },
    "trace_chunks_sent": {
      "tags": [],
      "metric_type": "count",
      "data_type": "trace chunks",
      "description": "The number of trace chunks attempted to be sent to the backend, regardless of response",
      "send_to_user": false,
      "user_tags":[]
    },
    "trace_segments_closed": {
      "tags": [],
      "metric_type": "count",
      "data_type": "trace segments",
      "description": "The number of trace segments (local traces) closed. In non partial flush scenarios, trace_segments_closed == trace_chunks_enqueued",
      "send_to_user": false,
      "user_tags":[]
    },
    "trace_api.requests": {
      "tags": [],
      "metric_type": "count",
      "data_type": "requests",
      "description": "The number of requests sent to the trace endopint in the agent, regardless of success",
      "send_to_user": false,
      "user_tags":[]
    },
    "trace_api.bytes": {
      "tags": [],
      "metric_type": "distribution",
      "data_type": "bytes",
      "description": "The size of the payload sent to the endpoint in bytes",
      "send_to_user": false,
      "user_tags":[]
    },
    "trace_api.ms": {
      "tags": [],
      "metric_type": "distribution",
      "data_type": "milliseconds",
      "description": "The time it takes to flush the trace payload to the agent. Note that this is not the per trace time, this is the per payload time",
      "send_to_user": false,
      "user_tags":[]
    },
    "trace_api.responses": {
      "tags": [
        "status_code"
      ],
      "metric_type": "count",
      "data_type": "responses",
      "description": "The number of responses received from the trace endpoint, tagged with status code, e.g. `status_code:200`, `status_code:404`. May also use `status_code:5xx` for example as a catch-all for 2xx, 3xx, 4xx, 5xx responses",
      "send_to_user": false,
      "user_tags":[]
    },
    "trace_api.errors": {
      "tags": [
        "type"
      ],
      "metric_type": "count",
      "data_type": "requests",
      "description": "The number of requests sent to the trace endpoint in the agent that errored, tagged by the error type (e.g. `type:timeout`, `type:network`, `type:status_code`)",
      "send_to_user": false,
      "user_tags":[]
    },
    "trace_partial_flush.count": {
      "tags": [
        "reason"
      ],
      "metric_type": "count",
      "data_type": "instances",
      "description": "The number of times a partial flush (where a span is flushed separately from its local root span) is triggered, tagged by the reason the flush was triggered (`reason:large_trace`, `reason:single_span_ingestion`)",
      "send_to_user": false,
      "user_tags":[]
    },
    "trace_partial_flush.spans_closed": {
      "tags": [],
      "metric_type": "distribution",
      "data_type": "spans",
      "description": "The number of spans included in the trace chunk when partial flush is triggered",
      "send_to_user": false,
      "user_tags":[]
    },
    "trace_partial_flush.spans_remaining": {
      "tags": [],
      "metric_type": "distribution",
      "data_type": "spans",
      "description": "The number of open spans remaining in the trace segment (local trace) when partial flush is triggered",
      "send_to_user": false,
      "user_tags":[]
    },
    "context_header_style.injected": {
      "tags": [
        "header_style"
      ],
      "metric_type": "count",
      "data_type": "instances",
      "description": "The number of times distributed context is injected into an outgoing span, tagged by header style (`header_style:tracecontext`, `header_style:datadog`, `header_style:b3multi`, `header_style:b3single`)",
      "send_to_user": false,
      "user_tags":[]
    },
    "context_header_style.extracted": {
      "tags": [
        "header_style"
      ],
      "metric_type": "count",
      "data_type": "instances",
      "description": "The number of times distributed context is successfully extracted from an outgoing span, tagged by header style (`header_style:tracecontext`, `header_style:datadog`, `header_style:b3multi`, `header_style:b3single`)",
      "send_to_user": false,
      "user_tags":[]
    },
    "stats_buckets": {
      "tags": [],
      "metric_type": "gauge",
      "data_type": "keys",
      "description": "The number of unique buckets created for stats aggregation",
      "send_to_user": false,
      "user_tags":[]
    },
    "stats_api.requests": {
      "tags": [],
      "metric_type": "count",
      "data_type": "requests",
      "description": "The number of requests sent to the stats endopint in the agent, regardless of success",
      "send_to_user": false,
      "user_tags":[]
    },
    "stats_api.bytes": {
      "tags": [],
      "metric_type": "distribution",
      "data_type": "bytes",
      "description": "The size of the payload sent to the stats endpoint in bytes",
      "send_to_user": false,
      "user_tags":[]
    },
    "stats_api.ms": {
      "tags": [],
      "metric_type": "distribution",
      "data_type": "milliseconds",
      "description": "The time it takes to send the payload sent to the endpoint in ms",
      "send_to_user": false,
      "user_tags":[]
    },
    "stats_api.responses": {
      "tags": [
        "status_code"
      ],
      "metric_type": "count",
      "data_type": "responses",
      "description": "The number of responses received from the endpoint, tagged with status code, e.g. `status_code:200`, `status_code:404`. May also use `status_code:5xx` for example as a catch-all for 2xx, 3xx, 4xx, 5xx responses",
      "send_to_user": false,
      "user_tags":[]
    },
    "stats_api.errors": {
      "tags": [
        "type"
      ],
      "metric_type": "count",
      "data_type": "requests",
      "description": "The number of requests sent to the api endpoint in the agent that errored, tagged by the error type (e.g. Timeout, NetworkError, StatusCode)",
      "send_to_user": false,
      "user_tags":[]
    },
    "host_lib_injection.success": {
      "tags": [
        "language",
        "version"
      ],
      "metric_type": "count",
      "data_type": "requests",
      "description": "Number of successful host lib injection",
      "send_to_user": false,
      "user_tags": []
    },
    "host_lib_injection.failure": {
      "tags": [
        "language",
        "version"
      ],
      "metric_type": "count",
      "data_type": "requests",
      "description": "Number of failed host lib injection",
      "send_to_user": false,
      "user_tags": []
    },
    "docker_lib_injection.success": {
      "tags": [
        "language",
        "version"
      ],
      "metric_type": "count",
      "data_type": "requests",
      "description": "Number of successful docker lib injection",
      "send_to_user": false,
      "user_tags": []
    },
    "docker_lib_injection.failure": {
      "tags": [
        "language",
        "version"
      ],
      "metric_type": "count",
      "data_type": "requests",
      "description": "Number of failed docker lib injection",
      "send_to_user": false,
      "user_tags": []
    }
  },
  "telemetry": {
    "telemetry_api.requests": {
      "tags": [
        "endpoint"
      ],
      "metric_type": "count",
      "data_type": "requests",
      "description": "The number of requests sent to a telemetry endopint, regardless of success, tagged by the endpoint (`endpoint:agent`, `endpoint:agentless`)",
      "send_to_user": false,
      "user_tags":[]
    },
    "telemetry_api.bytes": {
      "tags": [
        "endpoint"
      ],
      "metric_type": "distribution",
      "data_type": "bytes",
      "description": "The size of the payload sent to the stats endpoint in bytes, tagged by the endpoint (`endpoint:agent`, `endpoint:agentless`)",
      "send_to_user": false,
      "user_tags":[]
    },
    "telemetry_api.ms": {
      "tags": [],
      "metric_type": "distribution",
      "data_type": "milliseconds",
      "description": "The time it takes to send the payload sent to the endpoint in ms, tagged by the endpoint (`endpoint:agent`, `endpoint:agentless`)",
      "send_to_user": false,
      "user_tags":[]
    },
    "telemetry_api.responses": {
      "tags": [
        "endpoint",
        "status_code"
      ],
      "metric_type": "count",
      "data_type": "responses",
      "description": "The number of requests sent to the api endpoint in the agent that errored, tagged by the error type (e.g. `type:timeout`, `type:network`, `type:status_code`)",
      "send_to_user": false,
      "user_tags":[]

    },
    "telemetry_api.errors": {
      "tags": [
        "endpoint",
        "type"
      ],
      "metric_type": "count",
      "data_type": "requests",
      "description": "The number of requests sent to the api endpoint in the agent that errored, tagged by the error type (e.g. `type:timeout`, `type:network`, `type:status_code`) and Endpoint (`endpoint:agent`, `endpoint:agentless`)",
      "send_to_user": false,
      "user_tags":[]
    }
  },
  "appsec": {
    "waf.init": {
      "tags": [
        "waf_version",
        "event_rules_version"
      ],
      "metric_type": "count",
      "data_type": "requests",
      "description": "Number of times we is initialized",
      "send_to_user": false,
      "user_tags":[]
    },
    "waf.updates": {
      "tags": [
        "waf_version",
        "event_rules_version"
      ],
      "metric_type": "count",
      "data_type": "requests",
      "description": "Number of times we reload the rules (startup + Remote Configuration)",
      "send_to_user": false,
      "user_tags":[]
    },
    "waf.duration": {
      "tags": [
        "waf_version",
        "event_rules_version"
      ],
      "metric_type": "distribution",
      "data_type": "requests",
      "description": "Total WAF duration",
      "send_to_user": false,
      "user_tags":[]
    },
    "waf.duration_ext": {
      "tags": [
        "waf_version",
        "event_rules_version"
      ],
      "metric_type": "distribution",
      "data_type": "requests",
      "description": "Total WAF duration  including bindings",
      "send_to_user": false,
      "user_tags":[]
    },
    "waf.requests": {
      "tags": [
        "waf_version",
        "event_rules_version",
        "rule_triggered",
        "request_blocked",
        "waf_timeout",
        "request_excluded"
      ],
      "metric_type": "count",
      "data_type": "requests",
      "description": "Requests analyzed by ddwaf",
      "send_to_user": false,
      "user_tags":[]
    },
    "waf.input_truncated": {
      "tags": [
        "truncation_reason"
      ],
      "metric_type": "count",
      "data_type": "truncations",
      "description": "Count of times a WAF input was truncated",
      "send_to_user": false,
      "user_tags":[]
    },
    "waf.truncated_value_size": {
      "tags": [
        "truncation_reason"
      ],
      "metric_type": "distribution",
      "data_type": "bytes",
      "description": "Un-truncated size of truncated WAF inputs",
      "send_to_user": false,
      "user_tags":[]
    },
    "waf.config_errors": {
      "tags": [
        "waf_version",
        "event_rules_version",
        "config_key",
        "scope"
      ],
      "metric_type": "count",
      "data_type": "errors",
      "description": "Count of errors reported by the WAF on about particular config item",
      "send_to_user": false,
      "user_tags":[]
    }
  },
  "iast": {
    "instrumented.source": {
      "tags": [
        "source_type"
      ],
      "metric_type": "count",
      "data_type": "call sites",
      "description": "Number of source call sites instrumented",
      "send_to_user": false,
      "user_tags":[]
    },
    "instrumented.propagation": {
      "tags": [],
      "metric_type": "count",
      "data_type": "call sites",
      "description": "Number of propagation call sites instrumented",
      "send_to_user": false,
      "user_tags":[]
    },
    "instrumented.sink": {
      "tags": [
        "vulnerability_type"
      ],
      "metric_type": "count",
      "data_type": "call sites",
      "description": "Number of sink call sites instrumented",
      "send_to_user": false,
      "user_tags":[]
    },
    "executed.source": {
      "tags": [
        "source_type"
      ],
      "metric_type": "count",
      "data_type": "call sites",
      "description": "Number of source call sites executed",
      "send_to_user": false,
      "user_tags":[]
    },
    "executed.propagation": {
      "tags": [],
      "metric_type": "count",
      "data_type": "call sites",
      "description": "Number of propagation call sites executed",
      "send_to_user": false,
      "user_tags":[]
    },
    "executed.sink": {
      "tags": [
        "vulnerability_type"
      ],
      "metric_type": "count",
      "data_type": "call sites",
      "description": "Number of sink call sites executed",
      "send_to_user": false,
      "user_tags":[]
    },
    "executed.tainted": {
      "tags": [],
      "metric_type": "count",
      "data_type": "operations",
      "description": "Number of taint operations triggered during a request",
      "send_to_user": false,
      "user_tags":[]
    },
    "request.tainted": {
      "tags": [],
      "metric_type": "count",
      "data_type": "values",
      "description": "Number of tainted values at the end of a request",
      "send_to_user": false,
      "user_tags":[]
    }
  },
  "sidecar": {
    "server.active_sessions": {
      "tags": [],
      "metric_type": "gauge",
      "data_type": "sessions",
      "description": "Number of sessions active in parallel",
      "send_to_user": false,
      "user_tags":[]
    },
    "server.submitted_payloads": {
      "tags": [],
      "metric_type": "count",
      "data_type": "payloads",
      "description": "Number of payloads the sidecar has processed",
      "send_to_user": false,
      "user_tags":[]
    }
  },
  "civisibility": {
    "event_created": {
      "tags": [
        "test_framework",
        "event_type",
        "has_codeowner",
        "is_unsupported_ci",
        "is_benchmark"
      ],
      "metric_type": "count",
      "data_type": "events",
      "description": "The number of events created, tagged by event type (possible values are: `event_type:test`, `event_type:suite`, `event_type:module` or `event_type:session`), testing framework name (e.g. `test_framework:xunit`, `test_framework:nunit`, `test_framework:jest`) . Also, if the event_type is `session` two boolean tags will be set (has_codeowner and unsupported_ci), if the event_type is `test` a boolean `is_benchmark` flag will be set.",
      "send_to_user": false,
      "user_tags":[]
    },
    "event_finished": {
      "tags": [
        "test_framework",
        "event_type",
        "has_codeowner",
        "is_unsupported_ci",
        "is_benchmark",
        "is_new",
        "early_flake_detection_abort_reason"
      ],
      "metric_type": "count",
      "data_type": "events",
      "description": "The number of events finished, tagged by event type (possible values are: `event_type:test`, `event_type:suite`, `event_type:module` or `event_type:session`), testing framework name (e.g. `test_framework:xunit`, `test_framework:nunit`, `test_framework:jest`) . Also, if the event_type is `session` two boolean tags will be set (has_codeowner and unsupported_ci), if the event_type is `test` a boolean `is_benchmark` flag will be set.",
      "send_to_user": false,
      "user_tags":[]
    },
    "code_coverage_started": {
      "tags": [
        "test_framework",
        "library"
      ],
      "metric_type": "count",
      "data_type": "coverages",
      "description": "The number of code coverage sessions started tagged by the code coverage library name (e.g. `library:custom`, `library:jacoco`, `library:builtin`) and testing framework name (e.g. `test_framework:xunit`, `test_framework:nunit`, `test_framework:jest`)",
      "send_to_user": false,
      "user_tags":[]
    },
    "code_coverage_finished": {
      "tags": [
        "test_framework",
        "library"
      ],
      "metric_type": "count",
      "data_type": "coverages",
      "description": "The number of code coverage sessions finished, optionally (if implementation allows) tagget by the code coverage library name  (e.g. `library:custom`, `library:jacoco`, `library:builtin`) and testing framework name (e.g. `test_framework:xunit`, `test_framework:nunit`, `test_framework:jest`)",
      "send_to_user": false,
      "user_tags":[]
    },
    "manual_api_events": {
      "tags": [
        "event_type"
      ],
      "metric_type": "count",
      "data_type": "events",
      "description": "The number of events created used by the manual api tagged by the event type (possible values are: `event_type:test`, `event_type:suite`, `event_type:module` or `event_type:session`)",
      "send_to_user": false,
      "user_tags":[]
    },
    "events_enqueued_for_serialization": {
      "tags": [],
      "metric_type": "count",
      "data_type": "events",
      "description": "The number of events enqueued for serialization",
      "send_to_user": false,
      "user_tags":[]
    },
    "endpoint_payload.bytes": {
      "tags": [
        "endpoint"
      ],
      "metric_type": "distribution",
      "data_type": "bytes",
      "description": "The size in bytes of the serialized payload, tagged by endpoint type (possible values are: `endpoint:test_cycle` or `endpoint:code_coverage`)",
      "send_to_user": false,
      "user_tags":[]
    },
    "endpoint_payload.requests": {
      "tags": [
        "endpoint"
      ],
      "metric_type": "count",
      "data_type": "requests",
      "description": "The number of requests sent to the endpoint, regardless of success, tagged by endpoint type (possible values are: `endpoint:test_cycle` or `endpoint:code_coverage`)",
      "send_to_user": false,
      "user_tags":[]
    },
    "endpoint_payload.dropped": {
      "tags": [
        "endpoint"
      ],
      "metric_type": "count",
      "data_type": "requests",
      "description": "The number of payloads dropped after all retries, tagged by endpoint type (possible values are: `endpoint:test_cycle` or `endpoint:code_coverage`)",
      "send_to_user": false,
      "user_tags":[]
    },
    "endpoint_payload.requests_ms": {
      "tags": [
        "endpoint"
      ],
      "metric_type": "distribution",
      "data_type": "milliseconds",
      "description": "The time it takes to send the payload sent to the endpoint in ms, tagged by endpoint type (possible values are: `endpoint:test_cycle` or `endpoint:code_coverage`)",
      "send_to_user": false,
      "user_tags":[]
    },
    "endpoint_payload.requests_errors": {
      "tags": [
        "endpoint",
        "error_type"
      ],
      "metric_type": "count",
      "data_type": "requests",
      "description": "The number of requests sent to the endpoint that errored, tagget by the error type (e.g. `error_type:timeout`, `error_type:network`, `error_type:status_code`) and endpoint type (possible values are: `endpoint:test_cycle` or `endpoint:code_coverage`)",
      "send_to_user": false,
      "user_tags":[]
    },
    "endpoint_payload.events_count": {
      "tags": [
        "endpoint"
      ],
      "metric_type": "distribution",
      "data_type": "events",
      "description": "The number of events included in the payload, tagged by endpoint type (possible values are: `endpoint:test_cycle` or `endpoint:code_coverage`)",
      "send_to_user": false,
      "user_tags":[]
    },
    "endpoint_payload.events_serialization_ms": {
      "tags": [
        "endpoint"
      ],
      "metric_type": "distribution",
      "data_type": "milliseconds",
      "description": "The time it takes to serialize the payload, tagged by endpoint type (possible values are: `endpoint:test_cycle` or `endpoint:code_coverage`)",
      "send_to_user": false,
      "user_tags":[]
    },
    "git.command": {
      "tags": [
        "command"
      ],
      "metric_type": "count",
      "data_type": "command",
      "description": "The number of git commands executed, tagged by command type (possible values are: `command:get_repository`, `command:get_branch`, `command:check_shallow`, `command:unshallow`, `command:get_local_commits`, `command:get_objects`, `command:pack_objects`)",
      "send_to_user": false,
      "user_tags":[]
    },
    "git.command_errors": {
      "tags": [
        "command",
        "exit_code"
      ],
      "metric_type": "count",
      "data_type": "command",
      "description": "The number of git command that errored, tagged by command type (possible values are: `command:get_repository`, `command:get_branch`, `command:check_shallow`, `command:unshallow`, `command:get_local_commits`, `command:get_objects`, `command:pack_objects`) and the exit code of the command.",
      "send_to_user": false,
      "user_tags":[]
    },
    "git.command_ms": {
      "tags": [
        "command"
      ],
      "metric_type": "distribution",
      "data_type": "milliseconds",
      "description": "The time it takes to execute the git command, tagged by command type (possible values are: `command:get_repository`, `command:get_branch`, `command:check_shallow`, `command:unshallow`, `command:get_local_commits`, `command:get_objects`, `command:pack_objects`)",
      "send_to_user": false,
      "user_tags":[]
    },
    "git_requests.search_commits": {
      "tags": [],
      "metric_type": "count",
      "data_type": "requests",
      "description": "The number of requests sent to the search commit endpoint, regardless of success",
      "send_to_user": false,
      "user_tags":[]
    },
    "git_requests.search_commits_ms": {
      "tags": [],
      "metric_type": "distribution",
      "data_type": "milliseconds",
      "description": "The time it takes to get the response of the search commit request in ms",
      "send_to_user": false,
      "user_tags":[]
    },
    "git_requests.search_commits_errors": {
      "tags": [
        "error_type"
      ],
      "metric_type": "count",
      "data_type": "requests",
      "description": "The number of search commit requests sent to the endpoint that errored, tagget by the error type (e.g. `error_type:timeout`, `error_type:network`, `error_type:status_code_4xx_response`, `error_type:status_code_5xx_response`)",
      "send_to_user": false,
      "user_tags":[]
    },
    "git_requests.objects_pack": {
      "tags": [],
      "metric_type": "count",
      "data_type": "requests",
      "description": "The number of requests sent to the git object pack endpoint, regardless of success",
      "send_to_user": false,
      "user_tags":[]
    },
    "git_requests.objects_pack_ms": {
      "tags": [],
      "metric_type": "distribution",
      "data_type": "milliseconds",
      "description": "The time it takes to get the response of the git object pack request in ms",
      "send_to_user": false,
      "user_tags":[]
    },
    "git_requests.objects_pack_errors": {
      "tags": [
        "error_type"
      ],
      "metric_type": "count",
      "data_type": "requests",
      "description": "The number of git object pack requests sent to the endpoint that errored, tagget by the error type (e.g. `error_type:timeout`, `error_type:network`, `error_type:status_code_4xx_response`, `error_type:status_code_5xx_response`)",
      "send_to_user": false,
      "user_tags":[]
    },
    "git_requests.objects_pack_bytes": {
      "tags": [],
      "metric_type": "distribution",
      "data_type": "bytes",
      "description": "The sum of the sizes of the object pack files inside a single payload",
      "send_to_user": false,
      "user_tags":[]
    },
    "git_requests.objects_pack_files": {
      "tags": [],
      "metric_type": "distribution",
      "data_type": "files",
      "description": "The number of files sent in the object pack payload",
      "send_to_user": false,
      "user_tags":[]
    },
    "git_requests.settings": {
      "tags": [],
      "metric_type": "count",
      "data_type": "requests",
      "description": "The number of requests sent to the settings endpoint, regardless of success",
      "send_to_user": false,
      "user_tags":[]
    },
    "git_requests.settings_ms": {
      "tags": [],
      "metric_type": "distribution",
      "data_type": "milliseconds",
      "description": "The time it takes to get the response of the settings endpoint request in ms",
      "send_to_user": false,
      "user_tags":[]
    },
    "git_requests.settings_errors": {
      "tags": [
        "error_type"
      ],
      "metric_type": "count",
      "data_type": "requests",
      "description": "The number of settings requests sent to the endpoint that errored, tagget by the error type  (e.g. `error_type:timeout`, `error_type:network`, `error_type:status_code_4xx_response`, `error_type:status_code_5xx_response`)",
      "send_to_user": false,
      "user_tags":[]
    },
    "git_requests.settings_response": {
      "tags": [
        "coverage_enabled",
        "itrskip_enabled"
      ],
      "metric_type": "count",
      "data_type": "response",
      "description": "The number of settings responses from the endpoint tagged by the coverage_enabled and itrskip_enabled responses",
      "send_to_user": false,
      "user_tags":[]
    },
    "itr_skippable_tests.request": {
      "tags": [],
      "metric_type": "count",
      "data_type": "requests",
      "description": "The number of requests sent to the itr skippable tests endpoint, regardless of success",
      "send_to_user": false,
      "user_tags":[]
    },
    "itr_skippable_tests.request_ms": {
      "tags": [],
      "metric_type": "distribution",
      "data_type": "milliseconds",
      "description": "The time it takes to get the response of the itr skippable tests endpoint request in ms",
      "send_to_user": false,
      "user_tags":[]
    },
    "itr_skippable_tests.request_errors": {
      "tags": [
        "error_type"
      ],
      "metric_type": "count",
      "data_type": "requests",
      "description": "The number of itr skippable tests requests sent to the endpoint that errored, tagget by the error type  (e.g. `error_type:timeout`, `error_type:network`, `error_type:status_code_4xx_response`, `error_type:status_code_5xx_response`)",
      "send_to_user": false,
      "user_tags":[]
    },
    "itr_skippable_tests.response_bytes": {
      "tags": [],
      "metric_type": "distribution",
      "data_type": "bytes",
      "description": "The number of bytes received by the endpoint",
      "send_to_user": false,
      "user_tags":[]
    },
    "itr_skippable_tests.response_tests": {
      "tags": [],
      "metric_type": "count",
      "data_type": "tests",
      "description": "The number of tests to skip returned by the endpoint",
      "send_to_user": false,
      "user_tags":[]
    },
    "itr_skippable_tests.response_suites": {
      "tags": [],
      "metric_type": "count",
      "data_type": "suites",
      "description": "The number of suites to skip returned by the endpoint",
      "send_to_user": false,
      "user_tags":[]
    },
    "itr_skipped": {
      "tags": [
        "event_type"
      ],
      "metric_type": "count",
      "data_type": "events",
      "description": "The number of tests or test suites skipped tagged by event type (possible values are: `event_type:test`, `event_type:suite`)",
      "send_to_user": false,
      "user_tags":[]
    },
    "itr_unskippable": {
      "tags": [
        "event_type"
      ],
      "metric_type": "count",
      "data_type": "events",
      "description": "The number of tests or test suites that are seen as unskippable tagged by event type (possible values are: `event_type:test`, `event_type:suite`)",
      "send_to_user": false,
      "user_tags":[]
    },
    "itr_forced_run": {
      "tags": [
        "event_type"
      ],
      "metric_type": "count",
      "data_type": "events",
      "description": "The number of tests or test suites that would've been skipped by ITR but were forced to run because of their unskippable status tagged by event type (possible values are: `event_type:test`, `event_type:suite`)",
      "send_to_user": false,
      "user_tags":[]
    },
    "code_coverage.is_empty": {
      "tags": [],
      "metric_type": "count",
      "data_type": "coverages",
      "description": "The number of successfully collected code coverages that are empty",
      "send_to_user": false,
      "user_tags":[]
    },
    "code_coverage.files": {
      "tags": [],
      "metric_type": "distribution",
      "data_type": "files",
      "description": "The number of files covered inside a coverage payload",
      "send_to_user": false,
      "user_tags":[]
    },
    "code_coverage.errors": {
      "tags": [],
      "metric_type": "count",
      "data_type": "coverages",
      "description": "The number of errors while processing code coverage",
      "send_to_user": false,
      "user_tags":[]
    },
    "early_flake_detection.request": {
      "tags": [],
      "metric_type": "count",
      "data_type": "requests",
      "description": "The number of requests sent to the known tests endpoint, regardless of success",
      "send_to_user": false,
      "user_tags":[]
    },
    "early_flake_detection.request_ms": {
      "tags": [],
      "metric_type": "distribution",
      "data_type": "milliseconds",
      "description": "The time it takes to get the response of the known tests endpoint request in ms",
      "send_to_user": false,
      "user_tags":[]
    },
    "early_flake_detection.request_errors": {
      "tags": [
        "error_type"
      ],
      "metric_type": "count",
      "data_type": "requests",
      "description": "The number of known tests requests sent to the endpoint that errored, tagget by the error type  (e.g. `error_type:timeout`, `error_type:network`, `error_type:status_code_4xx_response`, `error_type:status_code_5xx_response`)",
      "send_to_user": false,
      "user_tags":[]
    },
    "early_flake_detection.response_bytes": {
      "tags": [],
      "metric_type": "distribution",
      "data_type": "bytes",
      "description": "The number of bytes received by the endpoint",
      "send_to_user": false,
      "user_tags":[]
    },
    "early_flake_detection.response_tests": {
      "tags": [],
      "metric_type": "distribution",
      "data_type": "tests",
      "description": "The number of known tests returned by the endpoint",
      "send_to_user": false,
      "user_tags":[]
    }
  },
  "profiler": {}
}