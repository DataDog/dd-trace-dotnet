// <copyright file="VulnerabilityBatchTests.Ssrf.cs" company="Datadog">
// Unless explicitly stated otherwise all files in this repository are licensed under the Apache 2 License.
// This product includes software developed at Datadog (https://www.datadoghq.com/). Copyright 2017 Datadog, Inc.
// </copyright>

using Datadog.Trace.Configuration;
using Datadog.Trace.Iast;
using Datadog.Trace.TestHelpers.FluentAssertionsExtensions.Json;
using FluentAssertions;
using Xunit;

namespace Datadog.Trace.Security.Unit.Tests.IAST.Tainted;

/// <summary>
/// VulnerabilityBatchTests for SSRF
/// </summary>
public partial class VulnerabilityBatchTests
{
    [Fact]
    public void GivenASsrfWithoutAuthority_WhenSerialized_JsonIsNotRedacted()
    {
        var batch = Utils.GetRedactedBatch();
        var source = new Source(3, "host", "datadoghq.com");
        var ranges = new Range[]
        {
            new Range(7, 13, source),
        };
        var evidence = new Evidence($"http://datadoghq.com", ranges);
        var vulnerability = new Vulnerability("SSRF", new Location(), evidence);
        batch.Add(vulnerability);

        var json = batch.ToJson();
        json.Should().BeJsonEquivalentTo(
            """
            {
              "sources": [
                { "origin": "http.request.parameter", "name": "host", "value": "datadoghq.com" }
              ],
              "vulnerabilities": [
                {
                  "type": "SSRF",
                  "evidence": {
                  "valueParts": [
                      { "value": "http://" },
                      { "source": 0, "value": "datadoghq.com"}
                    ]
                  }
                }
              ]
            }
            """,
            _defaultScrubber);
    }

    [Theory]
    [InlineData("user")]
    [InlineData(":")]
    [InlineData("user:")]
    [InlineData(":password")]
    [InlineData("user:password")]
    public void GivenASsrfWithAuthority_WhenSerialized_JsonIsRedacted(string authority)
    {
        var batch = Utils.GetRedactedBatch();
        var source = new Source(3, "protocol", "http");
        var ranges = new Range[]
        {
            new Range(0, 4, source),
        };
        var evidence = new Evidence($"http://{authority}@datadoghq.com", ranges);
        var vulnerability = new Vulnerability("SSRF", new Location(), evidence);
        batch.Add(vulnerability);

        var json = batch.ToJson();
        json.Should().BeJsonEquivalentTo(
            """
            {
              "sources": [
                { "origin": "http.request.parameter", "name": "protocol", "value": "http" }
              ],
              "vulnerabilities": [
                {
                  "type": "SSRF",
                  "evidence": {
                  "valueParts": [
                      { "source": 0, "value": "http" },
                      { "value": "://" },
                      { "redacted": true },
                      { "value": "@datadoghq.com" }
                    ]
                  }
                }
              ]
            }
            """,
            _defaultScrubber);
    }

    [Theory]
    [InlineData("?")]
    [InlineData("#")]
    public void GivenASsrfWithQueryParametersOrFragment_WhenSerialized_JsonIsRedacted(string separator)
    {
        var batch = Utils.GetRedactedBatch();
        var ranges = new Range[]
        {
            new Range(7, 13, new Source(3, "host", "datadoghq.com")),
            new Range(32, 4, new Source(3, "first_name", "john")),
        };
        var evidence = new Evidence($"http://datadoghq.com{separator}first_name=john&last_name=doe", ranges);
        var vulnerability = new Vulnerability("SSRF", new Location(), evidence);
        batch.Add(vulnerability);

        var json = batch.ToJson();
        json.Should().BeJsonEquivalentTo(
            """
            {
              "sources": [
                { "origin": "http.request.parameter", "name": "host", "value": "datadoghq.com" },
                { "origin": "http.request.parameter", "name": "first_name", "redacted": true }
              ],
              "vulnerabilities": [
                {
                  "type": "SSRF",
                  "evidence": {
                  "valueParts": [
                      { "value": "http://" },
                      { "source": 0, "value": "datadoghq.com" },
                      { "value": "$1first_name=" },
                      { "source": 1, "redacted": true },
                      { "value": "&last_name=" },
                      { "redacted": true }
                    ]
                  }
                }
              ]
            }
            """.Replace("$1", separator),
            _defaultScrubber);
    }

    [Fact]
    public void GivenASsrfWithAuthorityQueryAndFragment_WhenSerialized_JsonIsRedacted()
    {
        var batch = Utils.GetRedactedBatch();
        var ranges = new Range[]
        {
            new Range(22, 13, new Source(3, "host", "datadoghq.com")),
        };
        var evidence = new Evidence($"https://user:password@datadoghq.com:443/api/v1/test/123/?param1=pone&param2=ptwo#fragment1=fone&fragment2=ftwo", ranges);
        var vulnerability = new Vulnerability("SSRF", new Location(), evidence);
        batch.Add(vulnerability);

        var json = batch.ToJson();
        json.Should().BeJsonEquivalentTo(
            """
            {
              "sources": [
                { "origin": "http.request.parameter", "name": "host", "value": "datadoghq.com" }
              ],
              "vulnerabilities": [
                {
                  "type": "SSRF",
                  "evidence": {
                  "valueParts": [
                      { "value": "https://" },
                      { "redacted": true },
                      { "value": "@" },
                      { "source": 0, "value": "datadoghq.com" },
                      { "value": ":443/api/v1/test/123/?param1=" },
                      { "redacted": true },
                      { "value": "&param2=" },
                      { "redacted": true },
                      { "value": "#fragment1=" },
                      { "redacted": true },
                      { "value": "&fragment2=" },
                      { "redacted": true }
                    ]
                  }
                }
              ]
            }
            """,
            _defaultScrubber);
    }
}
