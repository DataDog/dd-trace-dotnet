// <copyright file="VulnerabilityBatchTests.cs" company="Datadog">
// Unless explicitly stated otherwise all files in this repository are licensed under the Apache 2 License.
// This product includes software developed at Datadog (https://www.datadoghq.com/). Copyright 2017 Datadog, Inc.
// </copyright>

using Datadog.Trace.Configuration;
using Datadog.Trace.Iast;
using Datadog.Trace.TestHelpers.FluentAssertionsExtensions.Json;
using FluentAssertions;
using Xunit;
using Xunit.Abstractions;

namespace Datadog.Trace.Security.Unit.Tests.IAST.Tainted;

/// <summary>
/// Basic VulnerabilityBatchTests
/// </summary>
public partial class VulnerabilityBatchTests
{
    private static System.Func<string, string, bool> _sourcesScrubber = Utils.GetRegexScrubber("$[*].pattern");
    private static System.Func<string, string, bool> _vulnerabilitiesScrubber = Utils.GetRegexScrubber("$.vulnerabilities[*].hash", "$.vulnerabilities[*].location");
    private readonly ITestOutputHelper _output = null;

    public VulnerabilityBatchTests(ITestOutputHelper output)
    {
        _output = output;
    }

    [Fact]
    public void GivenAVulnerabilityBatch_WhenAddVulnerability_VulnerabilityIsCorrectlyAdded()
    {
        var batch = new VulnerabilityBatch();
        var source = new Source(2, "name", "sqlvalue1");
        var source2 = new Source(3, "name2", "sql_value2");
        var ranges = new Range[] { new Range(0, 2, source), new Range(2, 2, source2) };
        var evidence = new Evidence("sql_query", ranges);
        var vulnerability = new Vulnerability("sqli", new Location(), evidence);
        batch.Add(vulnerability);

        var json = batch.ToJson();
        json.Should().BeJsonEquivalentTo(
            """
            {
              "vulnerabilities": [
                {
                  "type": "sqli",
                  "location": {},
                  "evidence": {
                    "valueParts": [
                      { "source": 0,"value": "sq" },
                      { "source": 1, "value": "l_" },
                      { "value": "query" }
                    ]
                  }
                }
              ],
              "sources": [
                { "origin": "http.request.parameter.name", "name": "name", "value": "sqlvalue1" },
                { "origin": "http.request.parameter", "name": "name2", "value": "sql_value2" },
              ]
            }
            """,
            _vulnerabilitiesScrubber);
    }

    [Fact]
    public void GivenAVulnerabilityBatch_WhenAddVulnerability_VulnerabilityIsCorrectlyAdded2()
    {
        var batch = new VulnerabilityBatch();
        var source = new Source(2, "name", "value");
        var ranges = new Range[] { new Range(1, 1, source), new Range(2, 2, source) };
        var evidence = new Evidence("sql_query", ranges);
        var vulnerability = new Vulnerability("sqli", new Location(), evidence);
        batch.Add(vulnerability);

        var json = batch.ToJson();
        json.Should().BeJsonEquivalentTo(
            """
            {
              "vulnerabilities": [
                {
                  "type": "sqli",
                  "location": {},
                  "evidence": {
                    "valueParts": [
                      { "value": "s" },
                      { "source": 0,"value": "q" },
                      { "source": 0, "value": "l_" },
                      { "value": "query" }
                    ]
                  }
                }
              ],
              "sources": [
                { "origin": "http.request.parameter.name", "name": "name", "value": "value" },
              ]
            }
            """,
            _vulnerabilitiesScrubber);
    }

    [Fact]
    public void GivenAVulnerabilityBatch_WhenAddVulnerability_VulnerabilityIsCorrectlyAdded3()
    {
        var batch = new VulnerabilityBatch();
        var source = new Source(2, "name", "value");
        var source2 = new Source(2, "name", "value");
        var ranges = new Range[] { new Range(0, 2, source), new Range(2, 2, source2) };
        var evidence = new Evidence("sql_query", ranges);
        var vulnerability = new Vulnerability("sqli", new Location(), evidence);
        batch.Add(vulnerability);

        var json = batch.ToJson();
        json.Should().BeJsonEquivalentTo(
            """
            {
              "vulnerabilities": [
                {
                  "type": "sqli",
                  "location": {},
                  "evidence": {
                    "valueParts": [
                      { "source": 0,"value": "sq" },
                      { "source": 0, "value": "l_" },
                      { "value": "query" }
                    ]
                  }
                }
              ],
              "sources": [
                { "origin": "http.request.parameter.name", "name": "name", "value": "value" },
              ]
            }
            """,
            _vulnerabilitiesScrubber);
    }

    [Fact]
    public void GivenAVulnerabilityBatch_WhenAddTwoVulnerabilities_VulnerabilitiesAreCorrectlyAdded()
    {
        var batch = new VulnerabilityBatch();
        var source = new Source(2, "name", "value");
        var source2 = new Source(3, "name2", "value2");
        var ranges = new Range[] { new Range(0, 2, source), new Range(2, 2, source2) };
        var ranges2 = new Range[] { new Range(2, 2, source2) };
        var evidence = new Evidence("sql_query", ranges);
        var evidence2 = new Evidence("filename", ranges2);
        var vulnerability = new Vulnerability("sqli", new Location(), evidence);
        var vulnerability2 = new Vulnerability("pathtraversal", new Location(), evidence2);
        batch.Add(vulnerability);
        batch.Add(vulnerability2);

        batch.Vulnerabilities.Count.Should().Be(2);
        batch.Sources.Count.Should().Be(2);
        batch.Sources[0].GetInternalId().Should().Be(0);
        batch.Sources[1].GetInternalId().Should().Be(1);

        var json = batch.ToJson();
        json.Should().BeJsonEquivalentTo(
            """
            {
              "vulnerabilities": [
                {
                  "type": "sqli",
                  "location": {},
                  "evidence": {
                  "valueParts": [
                    { "source": 0,"value": "sq" },
                    { "source": 1, "value": "l_" },
                    { "value": "query" }
                  ]
                }
              },
                {
                  "type": "pathtraversal",
                  "location": {},
                  "evidence": {
                  "valueParts": [
                    { "value": "fi" },
                    { "source": 1,"value": "le" },
                    { "value": "name" }
                  ]
                }
              }
              ],
              "sources": [
                  { "origin": "http.request.parameter.name", "name": "name", "value": "value" },
                  { "origin": "http.request.parameter", "name": "name2", "value": "value2" },
              ]
            }
            """,
            _vulnerabilitiesScrubber);
    }

    [Fact]
    public void GivenAnEvidence_WhenGetValueParts_ValuePartsIsCorrect2()
    {
        var batch = new VulnerabilityBatch();
        var source = new Source(2, "name", "value");
        var ranges = new Range[] { new Range(2, 2, source), new Range(6, 2, source) };
        var evidence = new Evidence("sql_query", ranges);
        var vulnerability = new Vulnerability("sqli", new Location(), evidence);
        batch.Add(vulnerability);

        var json = batch.ToJson();
        json.Should().BeJsonEquivalentTo(
            """
            {
              "vulnerabilities": [
                {
                  "type": "sqli",
                  "location": {},
                  "evidence": {
                    "valueParts": [
                      { "value": "sq" },
                      { "source": 0, "value": "l_" },
                      { "value": "qu" },
                      { "source": 0, "value": "er" },
                      { "value": "y" }
                    ]
                  }
                }
              ],
              "sources": [
                { "origin": "http.request.parameter.name", "name": "name", "value": "value" },
              ]
            }
            """,
            _vulnerabilitiesScrubber);
    }

    [Fact]
    public void GivenAnEvidence_WhenGetValueParts_ValuePartsIsCorrect3()
    {
        var batch = new VulnerabilityBatch();
        var source = new Source(2, "name", "value");
        var evidence = new Evidence("sql_query", null);
        var vulnerability = new Vulnerability("sqli", new Location(), evidence);
        batch.Add(vulnerability);

        var json = batch.ToJson();
        json.Should().BeJsonEquivalentTo(
            """
            {
              "vulnerabilities": [
                {
                  "type": "sqli",
                  "location": {},
                  "evidence": { "value": "sql_query" }
                }
              ]
            }
            """,
            _vulnerabilitiesScrubber);
    }

    [Fact]
    public void GivenAnEvidence_WhenGetValueParts_ValuePartsIsCorrect4()
    {
        var batch = new VulnerabilityBatch();
        var source = new Source(2, "name", "value");
        Range emptyRange = new(0, 0, source);
        var ranges = new Range[] { emptyRange };
        var evidence = new Evidence("sql_query", ranges);
        var vulnerability = new Vulnerability("sqli", new Location(), evidence);
        batch.Add(vulnerability);

        var json = batch.ToJson();
        json.Should().BeJsonEquivalentTo(
            """
            {
              "vulnerabilities": [
                {
                  "type": "sqli",
                  "location": {},
                  "evidence": {
                    "valueParts": [
                      { "value": "", "source": 0 },
                      { "value": "sql_query" }
                    ]
                  }
                }
              ],
              "sources": [
                {
                  "origin": "http.request.parameter.name",
                  "name": "name",
                  "value": "value"
                }
              ]
            }
            """,
            _vulnerabilitiesScrubber);
    }

    [Fact]
    public void GivenAnEvidence_WhenGetValueParts_ValuePartsIsCorrect5()
    {
        var batch = new VulnerabilityBatch();
        var source = new Source(2, "name", "value");
        var ranges = new Range[] { new Range(0, 2, source), new Range(2, 2, source) };
        var evidence = new Evidence("sql_query", ranges);
        var vulnerability = new Vulnerability("sqli", new Location(), evidence);
        batch.Add(vulnerability);

        var json = batch.ToJson();
        json.Should().BeJsonEquivalentTo(
            """
            {
              "vulnerabilities": [
                {
                  "type": "sqli",
                  "location": {},
                  "evidence": {
                    "valueParts": [
                      { "value": "sq", "source": 0 },
                      { "value": "l_", "source": 0 },
                      { "value": "query" }
                    ]
                  }
                }
              ],
              "sources": [
                {
                  "origin": "http.request.parameter.name",
                  "name": "name",
                  "value": "value"
                }
              ]
            }
            """,
            _vulnerabilitiesScrubber);
    }

    [Fact]
    public void GivenAnEvidence_WhenGetValueParts_ValuePartsIsCorrect7()
    {
        var batch = new VulnerabilityBatch();
        var source = new Source(2, "name", "value");
        var source2 = new Source(3, "name2", "value2");
        var ranges = new Range[] { new Range(1, 1, source), new Range(2, 2, source2) };
        var evidence = new Evidence("sql_query", ranges);
        var vulnerability = new Vulnerability("sqli", new Location(), evidence);
        batch.Add(vulnerability);

        var json = batch.ToJson();
        json.Should().BeJsonEquivalentTo(
            """
            {
              "vulnerabilities": [
                {
                  "type": "sqli",
                  "location": {},
                  "evidence": {
                    "valueParts": [
                      { "value": "s" },
                      { "value": "q", "source": 0 },
                      { "value": "l_", "source": 1 },
                      { "value": "query" }
                    ]
                  }
                }
              ],
              "sources": [
                { "origin": "http.request.parameter.name", "name": "name", "value": "value" },
                { "origin": "http.request.parameter", "name": "name2", "value": "value2" },
              ]
            }
            """,
            _vulnerabilitiesScrubber);
    }

    [Fact]
    public void GivenAnEvidence_WhenGetValueParts_ValuePartsIsCorrect8()
    {
        var batch = new VulnerabilityBatch();
        var source = new Source(2, "name", "value");
        var source2 = new Source(3, "name2", "value2");
        var ranges = new Range[] { new Range(0, 5, source), new Range(5, 4, source2) };
        var evidence = new Evidence("sql_query", ranges);
        var vulnerability = new Vulnerability("sqli", new Location(), evidence);
        batch.Add(vulnerability);

        var json = batch.ToJson();
        json.Should().BeJsonEquivalentTo(
            """
            {
              "vulnerabilities": [
                {
                  "type": "sqli",
                  "location": {},
                  "evidence": {
                    "valueParts": [
                      { "value": "sql_q", "source": 0 },
                      { "value": "uery", "source": 1 }
                    ]
                  }
                }
              ],
              "sources": [
                { "origin": "http.request.parameter.name", "name": "name", "value": "value" },
                { "origin": "http.request.parameter", "name": "name2", "value": "value2" }
              ]
            }
            """,
            _vulnerabilitiesScrubber);
    }

    [Fact]
    public void GivenAnEvidenceWithNullChars_WhenSerializing_JsonHasNoNullchars()
    {
        var batch = new VulnerabilityBatch();
        var source = new Source(2, "name", "val\0ue");
        var source2 = new Source(3, "name2", "value2");
        var ranges = new Range[] { new Range(0, 5, source) };
        var evidence = new Evidence("val\0ue", ranges);
        var vulnerability = new Vulnerability("sqli", new Location(), evidence);
        batch.Add(vulnerability);

        var json = batch.ToJson();
        json.Should().BeJsonEquivalentTo(
            """
            {
              "vulnerabilities": [
                {
                  "type": "sqli",
                  "location": {},
                  "evidence": {
                    "valueParts": [
                      { "value": "value", "source": 0 },
                    ]
                  }
                }
              ],
              "sources": [
                { "origin": "http.request.parameter.name", "name": "name", "value": "value" },
              ]
            }
            """,
            _vulnerabilitiesScrubber);
    }
}
