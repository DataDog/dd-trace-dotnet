// <copyright file="VulnerabilityBatchTests.CommandInjection.cs" company="Datadog">
// Unless explicitly stated otherwise all files in this repository are licensed under the Apache 2 License.
// This product includes software developed at Datadog (https://www.datadoghq.com/). Copyright 2017 Datadog, Inc.
// </copyright>

using Datadog.Trace.Configuration;
using Datadog.Trace.Iast;
using Datadog.Trace.TestHelpers.FluentAssertionsExtensions.Json;
using FluentAssertions;
using Xunit;

namespace Datadog.Trace.Security.Unit.Tests.IAST.Tainted;

/// <summary>
/// VulnerabilityBatchTests for COMMAND_INJECTION
/// </summary>
public partial class VulnerabilityBatchTests
{
    [Fact]
    public void GivenACommandInjection_WhenSerialized_JsonIsRedacted1()
    {
        var batch = Utils.GetRedactedBatch();
        var source = new Source(3, "file", "file.txt");
        var ranges = new Range[]
        {
            new Range(15, 8, source),
        };
        var evidence = new Evidence($"cat /home/user/file.txt", ranges);
        var vulnerability = new Vulnerability("COMMAND_INJECTION", new Location(), evidence);
        batch.Add(vulnerability);

        var json = batch.ToJson();
        json.Should().BeJsonEquivalentTo(
            """
            {
              "sources": [
                { "origin": "http.request.parameter", "name": "file", "redacted": true }
              ],
              "vulnerabilities": [
                {
                  "type": "COMMAND_INJECTION",
                  "evidence": {
                  "valueParts": [
                      { "value": "cat" },
                      { "redacted": true },
                      { "source": 0, "redacted": true}
                    ]
                  }
                }
              ]
            }
            """,
            _defaultScrubber);
    }

    [Theory]
    [InlineData("sudo")]
    [InlineData("doas")]
    [InlineData("cmd ")]
    public void GivenACommandInjection_WhenSerialized_JsonIsRedacted2(string command)
    {
        var batch = Utils.GetRedactedBatch();
        var source = new Source(3, "file", "file.txt");
        var ranges = new Range[]
        {
            new Range(20, 8, source),
        };
        var evidence = new Evidence($"{command} cat /home/user/file.txt", ranges);
        var vulnerability = new Vulnerability("COMMAND_INJECTION", new Location(), evidence);
        batch.Add(vulnerability);

        var json = batch.ToJson();
        json.Should().BeJsonEquivalentTo(
            """
            {
              "sources": [
                { "origin": "http.request.parameter", "name": "file", "redacted": true }
              ],
              "vulnerabilities": [
                {
                  "type": "COMMAND_INJECTION",
                  "evidence": {
                  "valueParts": [
                      { "value": "$1 cat" },
                      { "redacted": true },
                      { "source": 0, "redacted": true}
                    ]
                  }
                }
              ]
            }
            """.Replace("$1", command),
            _defaultScrubber);
    }
}
