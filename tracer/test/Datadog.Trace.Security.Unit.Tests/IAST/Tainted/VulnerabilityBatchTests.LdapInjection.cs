// <copyright file="VulnerabilityBatchTests.LdapInjection.cs" company="Datadog">
// Unless explicitly stated otherwise all files in this repository are licensed under the Apache 2 License.
// This product includes software developed at Datadog (https://www.datadoghq.com/). Copyright 2017 Datadog, Inc.
// </copyright>

using Datadog.Trace.Configuration;
using Datadog.Trace.Iast;
using Datadog.Trace.TestHelpers.FluentAssertionsExtensions.Json;
using FluentAssertions;
using Xunit;

namespace Datadog.Trace.Security.Unit.Tests.IAST.Tainted;

/// <summary>
/// VulnerabilityBatchTests for LDAP_INJECTION
/// </summary>
public partial class VulnerabilityBatchTests
{
    [Theory]
    [InlineData("=")]
    [InlineData("~=")]
    [InlineData(">=")]
    [InlineData("<=")]
    public void GivenALdapWithLiteralAndFilter_WhenSerialized_JsonIsRedacted(string filter)
    {
        var batch = Utils.GetRedactedBatch();
        var ranges = new Range[]
        {
            new Range(1, 2, new Source(3, "attr", "cn")),
        };
        var evidence = new Evidence($"(cn{filter}Babs Jensen)", ranges);
        var vulnerability = new Vulnerability("LDAP_INJECTION", new Location(), evidence);
        batch.Add(vulnerability);

        var json = batch.ToJson();
        json.Should().BeJsonEquivalentTo(
            """
            {
              "sources": [
                { "origin": "http.request.parameter", "name": "attr", "value": "cn" }
              ],
              "vulnerabilities": [
                {
                  "type": "LDAP_INJECTION",
                  "evidence": {
                  "valueParts": [
                      { "value": "(" },
                      { "source": 0, "value": "cn" },
                      { "value": "$1" },
                      { "redacted": true },
                      { "value": ")" }
                    ]
                  }
                }
              ]
            }
            """.Replace("$1", filter),
            _defaultScrubber);
    }

    [Fact]
    public void GivenALdapWithExtensibleMatching_WhenSerialized_JsonIsRedacted()
    {
        var batch = Utils.GetRedactedBatch();
        var ranges = new Range[]
        {
            new Range(5, 10, new Source(3, "old", "2.4.6.8.10")),
        };
        var evidence = new Evidence($"(:DN:2.4.6.8.10:=Dino)", ranges);
        var vulnerability = new Vulnerability("LDAP_INJECTION", new Location(), evidence);
        batch.Add(vulnerability);

        var json = batch.ToJson();
        json.Should().BeJsonEquivalentTo(
            """
            {
              "sources": [
                { "origin": "http.request.parameter", "name": "old", "value": "2.4.6.8.10" }
              ],
              "vulnerabilities": [
                {
                  "type": "LDAP_INJECTION",
                  "evidence": {
                  "valueParts": [
                      { "value": "(:DN:" },
                      { "source": 0, "value": "2.4.6.8.10" },
                      { "value": ":=" },
                      { "redacted": true },
                      { "value": ")" }
                    ]
                  }
                }
              ]
            }
            """,
            _defaultScrubber);
    }

    [Fact]
    public void GivenALdapComplexSearch_WhenSerialized_JsonIsRedacted()
    {
        var batch = Utils.GetRedactedBatch();
        var source = new Source(3, "cn", "Babs Jensen");
        var ranges = new Range[]
        {
            new Range(4, 11, source),
            new Range(63, 6, source),
            new Range(74, 6, source),
        };
        var evidence = new Evidence($"(cn=Babs Jensen)\n(!(cn=Tim Howes))\n(&(objectClass=Person)(|(sn=Jensen)(cn=Babs J*)))\n(o=univ*of*mich*)\n(seeAlso=)", ranges);
        var vulnerability = new Vulnerability("LDAP_INJECTION", new Location(), evidence);
        batch.Add(vulnerability);

        var json = batch.ToJson();
        json.Should().BeJsonEquivalentTo(
            """
            {
              "sources": [
                { "origin": "http.request.parameter", "name": "cn", "redacted": true }
              ],
              "vulnerabilities": [
                {
                  "type": "LDAP_INJECTION",
                  "evidence": {
                  "valueParts": [
                      { "value": "(cn=" },
                      { "source": 0, "redacted": true },
                      { "value": ")\n(!(cn=" },
                      { "redacted": true },
                      { "value": "))\n(&(objectClass=" },
                      { "redacted": true },
                      { "value": ")(|(sn=" },
                      { "source": 0, "redacted": true },
                      { "value": ")(cn=" },
                      { "source": 0, "redacted": true },
                      { "redacted": true },
                      { "value": ")))\n(o=" },
                      { "redacted": true },
                      { "value": ")\n(seeAlso=)" }
                    ]
                  }
                }
              ]
            }
            """,
            _defaultScrubber);
    }

    [Fact]
    public void GivenALdapWithEscaping_WhenSerialized_JsonIsRedacted()
    {
        var batch = Utils.GetRedactedBatch();
        var source = new Source(3, "file", "C:\\5cMyFile");
        var ranges = new Range[]
        {
            new Range(76, 11, source),
        };
        var evidence = new Evidence($"(o=Parens R Us \\28for all your parenthetical needs\\29)\n(cn=*\\2A*)\n(filename=C:\\5cMyFile)\n(bin=\\00\\00\\00\\04)\n(sn=Lu\\c4\\8di\\c4\\87)\n(1.3.6.1.4.1.1466.0=\\04\\02\\48\\69)", ranges);
        var vulnerability = new Vulnerability("LDAP_INJECTION", new Location(), evidence);
        batch.Add(vulnerability);

        var json = batch.ToJson();
        json.Should().BeJsonEquivalentTo(
            """
            {
              "sources": [
                { "origin": "http.request.parameter", "name": "file", "redacted": true }
              ],
              "vulnerabilities": [
                {
                  "type": "LDAP_INJECTION",
                  "evidence": {
                  "valueParts": [
                      { "value": "(o=" },
                      { "redacted": true },
                      { "value": ")\n(cn=" },
                      { "redacted": true },
                      { "value": ")\n(filename=" },
                      { "source": 0, "redacted": true },
                      { "value": ")\n(bin=" },
                      { "redacted": true },
                      { "value": ")\n(sn=" },
                      { "redacted": true },
                      { "value": ")\n(1.3.6.1.4.1.1466.0=" },
                      { "redacted": true },
                      { "value": ")" }
                    ]
                  }
                }
              ]
            }
            """,
            _defaultScrubber);
    }
}
