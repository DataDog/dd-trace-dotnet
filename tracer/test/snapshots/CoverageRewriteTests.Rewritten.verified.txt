using System;
using System.Diagnostics;
using System.Reflection;
using System.Runtime.CompilerServices;
using System.Runtime.Versioning;
using System.Threading.Tasks;
using Datadog.Trace.Ci.Coverage;
using Datadog.Trace.Ci.Coverage.Attributes;
using Datadog.Trace.Ci.Coverage.Metadata.Target;

[assembly: CompilationRelaxations(8)]
[assembly: RuntimeCompatibility(WrapNonExceptionThrows = true)]
[assembly: Debuggable(DebuggableAttribute.DebuggingModes.Default)]
[assembly: TargetFramework(".NETStandard,Version=v2.0", FrameworkDisplayName = "")]
[assembly: AssemblyCompany("CoverageRewriterAssembly")]
[assembly: AssemblyConfiguration("Debug")]
[assembly: AssemblyFileVersion("1.0.0.0")]
[assembly: AssemblyInformationalVersion("1.0.0")]
[assembly: AssemblyProduct("CoverageRewriterAssembly")]
[assembly: AssemblyTitle("CoverageRewriterAssembly")]
[assembly: CoveredAssembly]
[assembly: AssemblyVersion("1.0.0.0")]
namespace CoverageRewriterAssembly
{
	public class Class1
	{
		public string MyProperty
		{
			[CompilerGenerated]
			get
			{
			    int[] counters = CoverageReporter<ModuleCoverage>.GetCounters(1, 0);
				counters[0]++;
				return <MyProperty>k__BackingField;
			}
			[CompilerGenerated]
			set
			{
			    int[] counters = CoverageReporter<ModuleCoverage>.GetCounters(1, 1);
				counters[0]++;
				<MyProperty>k__BackingField = value;
			}
		}

		public void Main()
		{
			int i;
			int[] counters = CoverageReporter<ModuleCoverage>.GetCounters(1, 2);
			_ = counters[10];
			counters[0]++;
			counters[1]++;
			Console.WriteLine("Main Method");
			counters[2]++;
			i = 0;
			while (true)
			{
				counters[7]++;
				if (i >= 100)
				{
					break;
				}
				counters[3]++;
				counters[4]++;
				Console.WriteLine(i);
				counters[5]++;
				counters[6]++;
				i++;
			}
			counters[8]++;
			MyProperty = "Value";
			counters[9]++;
			Console.WriteLine(MyProperty);
			counters[10]++;
		}

		public async Task MainAsync()
		{
			await Task.Delay(100);
		}
	}
}
namespace Datadog.Trace.Ci.Coverage.Metadata.Target
{
	internal sealed class ModuleCoverage : ModuleCoverageMetadata
	{
		public ModuleCoverage()
		{
			Metadata = new int[2][];
			Metadata[0] = Array.Empty<int>();
			Metadata[1] = new int[5];
			Metadata[1][0] = 1;
			Metadata[1][1] = 1;
			Metadata[1][2] = 11;
		}
	}
}
