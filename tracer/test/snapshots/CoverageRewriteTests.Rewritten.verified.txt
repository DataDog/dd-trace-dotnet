using System;
using System.Diagnostics;
using System.Reflection;
using System.Runtime.CompilerServices;
using System.Runtime.Versioning;
using System.Threading.Tasks;
using Datadog.Trace.Ci.Coverage;
using Datadog.Trace.Ci.Coverage.Attributes;
using Datadog.Trace.Ci.Coverage.Metadata.Target;

[assembly: CompilationRelaxations(8)]
[assembly: RuntimeCompatibility(WrapNonExceptionThrows = true)]
[assembly: Debuggable(DebuggableAttribute.DebuggingModes.Default | DebuggableAttribute.DebuggingModes.DisableOptimizations | DebuggableAttribute.DebuggingModes.IgnoreSymbolStoreSequencePoints | DebuggableAttribute.DebuggingModes.EnableEditAndContinue)]
[assembly: TargetFramework(".NETStandard,Version=v2.0", FrameworkDisplayName = "")]
[assembly: AssemblyCompany("CoverageRewriterAssembly")]
[assembly: AssemblyConfiguration("Debug")]
[assembly: AssemblyFileVersion("1.0.0.0")]
[assembly: AssemblyInformationalVersion("1.0.0")]
[assembly: AssemblyProduct("CoverageRewriterAssembly")]
[assembly: AssemblyTitle("CoverageRewriterAssembly")]
[assembly: CoveredAssembly]
[assembly: AssemblyVersion("1.0.0.0")]
namespace CoverageRewriterAssembly
{
	public class Class1
	{
		public string MyProperty
		{
			[CompilerGenerated]
			get
			{
				if (!CoverageReporter<ModuleCoverage>.TryGetScope(1, 0, out var scope))
				{
					return <MyProperty>k__BackingField;
				}
				scope.Report(0);
				return <MyProperty>k__BackingField;
			}
			[CompilerGenerated]
			set
			{
				if (!CoverageReporter<ModuleCoverage>.TryGetScope(1, 1, out var scope))
				{
					<MyProperty>k__BackingField = value;
					return;
				}
				scope.Report(0);
				<MyProperty>k__BackingField = value;
			}
		}

		public void Main()
		{
			int i;
			if (!CoverageReporter<ModuleCoverage>.TryGetScope(1, 2, out var scope))
			{
				Console.WriteLine("Main Method");
				for (i = 0; i < 100; i++)
				{
					Console.WriteLine(i);
				}
				MyProperty = "Value";
				Console.WriteLine(MyProperty);
				return;
			}
			scope.Report(0, 1);
			Console.WriteLine("Main Method");
			scope.Report(2);
			i = 0;
			while (true)
			{
				scope.Report(7);
				if (i >= 100)
				{
					break;
				}
				scope.Report(3, 4);
				Console.WriteLine(i);
				scope.Report(5, 6);
				i++;
			}
			scope.Report(8);
			MyProperty = "Value";
			scope.Report(9);
			Console.WriteLine(MyProperty);
			scope.Report(10);
		}

		public async Task MainAsync()
		{
			await Task.Delay(100);
		}
	}
}
namespace Datadog.Trace.Ci.Coverage.Metadata.Target
{
	public class ModuleCoverage : ModuleCoverageMetadata
	{
		public ModuleCoverage()
		{
			Metadata = new int[2][];
			Metadata[0] = new int[0];
			Metadata[1] = new int[5];
			Metadata[1][0] = 1;
			Metadata[1][1] = 1;
			Metadata[1][2] = 11;
		}
	}
}
