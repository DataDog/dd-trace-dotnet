using System;
using System.Diagnostics;
using System.Reflection;
using System.Runtime.CompilerServices;
using System.Runtime.Versioning;
using System.Threading.Tasks;
using Datadog.Trace.Ci.Coverage;
using Datadog.Trace.Ci.Coverage.Attributes;
using Datadog.Trace.Ci.Coverage.Metadata.Target;

[assembly: CompilationRelaxations(8)]
[assembly: RuntimeCompatibility(WrapNonExceptionThrows = true)]
[assembly: Debuggable(DebuggableAttribute.DebuggingModes.IgnoreSymbolStoreSequencePoints)]
[assembly: TargetFramework(".NETStandard,Version=v2.0", FrameworkDisplayName = "")]
[assembly: AssemblyCompany("CoverageRewriterAssembly")]
[assembly: AssemblyConfiguration("Debug")]
[assembly: AssemblyFileVersion("1.0.0.0")]
[assembly: AssemblyInformationalVersion("1.0.0")]
[assembly: AssemblyProduct("CoverageRewriterAssembly")]
[assembly: AssemblyTitle("CoverageRewriterAssembly")]
[assembly: CoveredAssembly]
[assembly: AssemblyVersion("1.0.0.0")]
namespace CoverageRewriterAssembly
{
	public class Class1
	{
		public unsafe string MyProperty
		{
			[CompilerGenerated]
			get
			{
				((byte*)CoverageReporter<ModuleCoverage>.GetFileCounter(0))[4] = 1;
				return <MyProperty>k__BackingField;
			}
			[CompilerGenerated]
			set
			{
				((byte*)CoverageReporter<ModuleCoverage>.GetFileCounter(0))[4] = 1;
				<MyProperty>k__BackingField = value;
			}
		}

		public unsafe void Main()
		{
			byte* fileCounter = (byte*)CoverageReporter<ModuleCoverage>.GetFileCounter(0);
			fileCounter[7] = 1;
			fileCounter[8] = 1;
			Console.WriteLine("Main Method");
			fileCounter[9] = 1;
			int num = 0;
			while (true)
			{
				fileCounter[9] = 1;
				if (num >= 100)
				{
					break;
				}
				fileCounter[10] = 1;
				fileCounter[11] = 1;
				Console.WriteLine(num);
				fileCounter[12] = 1;
				num++;
			}
			fileCounter[14] = 1;
			MyProperty = "Value";
			fileCounter[16] = 1;
			Console.WriteLine(MyProperty);
			fileCounter[17] = 1;
		}

		[AsyncStateMachine(typeof(<MainAsync>d__5))]
		[DebuggerStepThrough]
		public Task MainAsync()
		{
			<MainAsync>d__5 stateMachine = new <MainAsync>d__5();
			stateMachine.<>t__builder = AsyncTaskMethodBuilder.Create();
			stateMachine.<>4__this = this;
			stateMachine.<>1__state = -1;
			stateMachine.<>t__builder.Start(ref stateMachine);
			return stateMachine.<>t__builder.Task;
		}
	}
}
namespace Datadog.Trace.Ci.Coverage.Metadata.Target
{
	internal sealed class ModuleCoverage : ModuleCoverageMetadata
	{
		public ModuleCoverage()
		{
			Files = new FileCoverageMetadata[1];
			Files[0] = new FileCoverageMetadata("/Users/tony.redondo/repos/CoverageRewriterAssembly/CoverageRewriterAssembly/Class1.cs", 0, 23, new byte[3] { 9, 250, 206 });
			TotalLines = 23;
			CoverageMode = 0;
		}
	}
}
