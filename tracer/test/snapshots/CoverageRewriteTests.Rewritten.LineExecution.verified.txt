using System;
using System.Diagnostics;
using System.Reflection;
using System.Runtime.CompilerServices;
using System.Runtime.Versioning;
using System.Threading.Tasks;
using Datadog.Trace.Ci.Coverage;
using Datadog.Trace.Ci.Coverage.Attributes;
using Datadog.Trace.Ci.Coverage.Metadata.Target;

[assembly: CompilationRelaxations(8)]
[assembly: RuntimeCompatibility(WrapNonExceptionThrows = true)]
[assembly: Debuggable(DebuggableAttribute.DebuggingModes.IgnoreSymbolStoreSequencePoints)]
[assembly: TargetFramework(".NETStandard,Version=v2.0", FrameworkDisplayName = "")]
[assembly: AssemblyCompany("CoverageRewriterAssembly")]
[assembly: AssemblyConfiguration("Debug")]
[assembly: AssemblyFileVersion("1.0.0.0")]
[assembly: AssemblyInformationalVersion("1.0.0")]
[assembly: AssemblyProduct("CoverageRewriterAssembly")]
[assembly: AssemblyTitle("CoverageRewriterAssembly")]
[assembly: CoveredAssembly]
[assembly: AssemblyVersion("1.0.0.0")]
namespace CoverageRewriterAssembly
{
	public class Class1
	{
		public string MyProperty
		{
			[CompilerGenerated]
			get
			{
				int[] counters = CoverageReporter<ModuleCoverage>.GetCounters(0);
				counters[0] = 1;
				return <MyProperty>k__BackingField;
			}
			[CompilerGenerated]
			set
			{
				int[] counters = CoverageReporter<ModuleCoverage>.GetCounters(1);
				counters[0] = 1;
				<MyProperty>k__BackingField = value;
			}
		}

		public void Main()
		{
			int[] counters = CoverageReporter<ModuleCoverage>.GetCounters(2);
			_ = counters[10];
			counters[0] = 1;
			counters[1] = 1;
			Console.WriteLine("Main Method");
			counters[2] = 1;
			int num = 0;
			while (true)
			{
				counters[7] = 1;
				if (num >= 100)
				{
					break;
				}
				counters[3] = 1;
				counters[4] = 1;
				Console.WriteLine(num);
				counters[5] = 1;
				counters[6] = 1;
				num++;
			}
			counters[8] = 1;
			MyProperty = "Value";
			counters[9] = 1;
			Console.WriteLine(MyProperty);
			counters[10] = 1;
		}

		[AsyncStateMachine(typeof(<MainAsync>d__5))]
		[DebuggerStepThrough]
		public Task MainAsync()
		{
			<MainAsync>d__5 stateMachine = new <MainAsync>d__5();
			stateMachine.<>t__builder = AsyncTaskMethodBuilder.Create();
			stateMachine.<>4__this = this;
			stateMachine.<>1__state = -1;
			stateMachine.<>t__builder.Start(ref stateMachine);
			return stateMachine.<>t__builder.Task;
		}
	}
}
namespace Datadog.Trace.Ci.Coverage.Metadata.Target
{
	internal sealed class ModuleCoverage : ModuleCoverageMetadata
	{
		public ModuleCoverage()
		{
			SequencePoints = new int[4];
			SequencePoints[0] = 1;
			SequencePoints[1] = 1;
			SequencePoints[2] = 11;
			SequencePoints[3] = 3;
			Metadata = new long[4];
			Metadata[0] = 4294967296L;
			Metadata[1] = 4294967297L;
			Metadata[2] = 4294967298L;
			Metadata[3] = 8589934593L;
			TotalInstructions = 16L;
		}
	}
}
