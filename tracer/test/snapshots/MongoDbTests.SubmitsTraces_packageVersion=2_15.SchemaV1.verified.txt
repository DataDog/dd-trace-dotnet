[
  {
    TraceId: Id_1,
    SpanId: Id_2,
    Name: internal,
    Resource: Main(),
    Service: Samples.MongoDB,
    Type: custom,
    Tags: {
      env: integration_tests,
      language: dotnet,
      otel.library.name: Samples.MongoDB,
      otel.status_code: STATUS_CODE_UNSET,
      otel.trace_id: Guid_1,
      runtime-id: Guid_2,
      span.kind: internal,
      version: 1.0.0
    },
    Metrics: {
      process_id: 0,
      _dd.agent_psr: 1.0,
      _dd.top_level: 1.0,
      _dd.tracer_kr: 1.0,
      _sampling_priority_v1: 1.0
    }
  },
  {
    TraceId: Id_1,
    SpanId: Id_3,
    Name: internal,
    Resource: sync-calls,
    Service: Samples.MongoDB,
    Type: custom,
    ParentId: Id_2,
    Tags: {
      env: integration_tests,
      language: dotnet,
      otel.library.name: Samples.MongoDB,
      otel.status_code: STATUS_CODE_UNSET,
      otel.trace_id: Guid_1,
      span.kind: internal,
      version: 1.0.0
    }
  },
  {
    TraceId: Id_1,
    SpanId: Id_4,
    Name: internal,
    Resource: async-calls,
    Service: Samples.MongoDB,
    Type: custom,
    ParentId: Id_2,
    Tags: {
      env: integration_tests,
      language: dotnet,
      otel.library.name: Samples.MongoDB,
      otel.status_code: STATUS_CODE_UNSET,
      otel.trace_id: Guid_1,
      span.kind: internal,
      version: 1.0.0
    }
  },
  {
    TraceId: Id_1,
    SpanId: Id_5,
    Name: internal,
    Resource: sync-calls,
    Service: Samples.MongoDB,
    Type: custom,
    ParentId: Id_2,
    Tags: {
      env: integration_tests,
      language: dotnet,
      otel.library.name: Samples.MongoDB,
      otel.status_code: STATUS_CODE_UNSET,
      otel.trace_id: Guid_1,
      span.kind: internal,
      version: 1.0.0
    }
  },
  {
    TraceId: Id_1,
    SpanId: Id_6,
    Name: mongodb.query,
    Resource: find test-db,
    Service: Samples.MongoDB,
    Type: mongodb,
    ParentId: Id_2,
    Tags: {
      component: MongoDb,
      db.name: test-db,
      env: integration_tests,
      mongodb.collection: employees,
      mongodb.query: { "find" : "employees", "filter" : { "_id" : ObjectId("ABC123"), "name" : "MongoDB", "type" : "Database", "count" : 1, "info" : { "x" : 203, "y" : 102 }, "genericBinary" : "<Truncated>", "uuidLegacyBinary" : CSUUID("Guid_3"), "largeKey" : "Test Test Test Test Test Test Test Test Test Test Test Test Test Test Test Test Test Test Test Test Test Test Test Test Test Test Test Test Test Test Test Test Test Test Test Test Test Test Test Test Test Test Test Test Test Test Test Test Test Test Test Test Test Test Test Test Test Test Test Test Test Test Test Test Test Test Test Test Test Test Test Test Test Test Test Test Test Test Test Test Test Test Test Test Test Test Test Test Test Test Test Test Test Test Test Test Test Test Test Test Test Test Test Test Test Test Test Test Test Test Test Test Test Test Test Test Test Test Test Test Test Test Test Test Test Test Test Test Test Test Test Test Test Test Test Test Test Test Test Test Test Test Test Test Test Test Test Test Test Test Test Test Test Test Test Test Test Test Test Test Test Test Test Test Test Test Test Test Test Test Test Test Test Test Test Test Test Test Test Test Test Test Test Test Test Test Test Test Test Test Test Test Test Test Test Test Test Test Test Test Test Test Test Test Test Test Test Test Test Test Test Test Test Test Test Test Test Test Test Test Test Test Test Test Test Test Test Test Test Test Test Test Test Test Test Test Test Test Test Test Test Test Test Test Test Test Test Test Test Test Test Test Test Test Test Test Test Test Test Test Test Test Test Test Test Test Test Test Test Test Test Test Test Test Test Test Test Test Test Test Test Test Test Test Test Test Test Test Test Test Test Test Test Test Test Test Test Test Test Test Test Test Test Test Test Test Test Test Test Test Test Test Test Test Test Test Test Test Test Test Test Test Test Test Test Test Test Test Test Test Test Test Test Test Test Test Test Test Test Test Test Test Test Test Test Test Test Test Test Test Test Test Test Test Test Test Test Test Test Test Test Test Test Test Test Test Test Test Test Test Test Test Test Test Test Test Test Test Test Test Test Test Test Test Test Test Test Test Test Test Test Test Test Test Test Test Test Test Test Test Test Test Test Test Test Test Test Test Test Test Test Test Test Test Test Test Test Test Test Test Test Test Test Test Test Test Test Test Test Test Test Test Test Test Test Test Test Test Test Test Test Test Test Test Test Test Test Test Test Test Test Test Test Test Test Test Test Test Test Test Test Test Test Test Test Test Test Test Test Test Test Test Test Test Test Test Test Test Test Test Test Test Test Test Test Test Test Test Test Test Test Test Test Test Test Test Test Test Test Test Test Test Test Test Test Test Test Test Test Test Test Test Test Test Test Test Test Test Test Test Test Test Test Test Test Test Test Test Test Test Test Test Test Test Test Test Test Test Test Test Test Test Test Test Test Test Test Test Test Test Test Test Test Test Test Test Test Test Test Test Test Test Test Test Test Test Test Test Test Test Test Test Test Test Test Test Test Test Test Test Test Test Test Test Test Test Test Test Test Test Test Test Test Test Test Test Test Test Test Test Test Test Test Test Test Test Test Test Test Test Test Test Test Test Test Test Test Test Test Test Test Test Test Test Test Test Test Test Test Test Test Test Test Test Test Test Test Test Test Test Test Test Test Test Test Test Test Test Test Test Test Test Test Test Test Test Test Test Test Test Test Test Test Test Test Test Test Test Test Test Test Test Test Test Test Test Test Test Test Test Test Test Test Test Test Test Test Test Test Test Test Test Test Test Test Test Test Test Test Test Test Test Test Test Test Test Test Test Test Test Test Test Test Test Test Test Test Test Test Test Test Test Test Test Test Test Test Test Test Test Test Test Test Test Test Test Test Test Test Test Test Test Test Test Test Test Test Test Test Test Test Test Test Test Test Test Test Test Test Test Test Test Test Test Test Test Test Test Test Test Test Test Test Test Test Test Test Test Test Test Test Test Test Test Test Test Test Test Test Test Test Test Test Test Test Test Test Test Test Test Test Test Test Test Test Test Test Test Test Test Test Test Test Test Test Test Test Test Test Test Test Test Test Test Test Test Test Test Test Test Test Test Test Test Test Test Test Test Test Test Test Test Test Test Test Test Test Test Test Test Test Test Test Test Test Test Test Test Test Test Test Test Test Test Test Test Test Test Test Test Test Test Test Test Test Test Test Test Test Test Test Test Test Test Test Test Test Test Test Test Test Test Test Test Test Test Test Test Test Test Test Test Test Test Test Test Test Test Test Test Test Test Test Test Test Test Test Test Test Test Test Test Test Test Test Test Test Test Test Test Test Test Test Test Test Test Test Test Test Test Test Test Te,
      out.host: mongo,
      out.port: 27017,
      peer.service: test-db,
      span.kind: client,
      version: 1.0.0,
      _dd.peer.service.source: db.name
    }
  },
  {
    TraceId: Id_1,
    SpanId: Id_7,
    Name: mongodb.query,
    Resource: delete test-db,
    Service: Samples.MongoDB,
    Type: mongodb,
    ParentId: Id_3,
    Tags: {
      component: MongoDb,
      db.name: test-db,
      env: integration_tests,
      mongodb.collection: employees,
      mongodb.query: { "delete" : "employees", "ordered" : true },
      out.host: mongo,
      out.port: 27017,
      peer.service: test-db,
      span.kind: client,
      version: 1.0.0,
      _dd.peer.service.source: db.name
    }
  },
  {
    TraceId: Id_1,
    SpanId: Id_8,
    Name: mongodb.query,
    Resource: insert test-db,
    Service: Samples.MongoDB,
    Type: mongodb,
    ParentId: Id_3,
    Tags: {
      component: MongoDb,
      db.name: test-db,
      env: integration_tests,
      mongodb.collection: employees,
      mongodb.query: { "insert" : "employees", "ordered" : true },
      out.host: mongo,
      out.port: 27017,
      peer.service: test-db,
      span.kind: client,
      version: 1.0.0,
      _dd.peer.service.source: db.name
    }
  },
  {
    TraceId: Id_1,
    SpanId: Id_9,
    Name: mongodb.query,
    Resource: aggregate test-db,
    Service: Samples.MongoDB,
    Type: mongodb,
    ParentId: Id_3,
    Tags: {
      component: MongoDb,
      db.name: test-db,
      env: integration_tests,
      mongodb.collection: employees,
      mongodb.query: { "aggregate" : "employees", "pipeline" : [{ "$match" : { } }, { "$group" : { "_id" : 1, "n" : { "$sum" : 1 } } }], "cursor" : { } },
      out.host: mongo,
      out.port: 27017,
      peer.service: test-db,
      span.kind: client,
      version: 1.0.0,
      _dd.peer.service.source: db.name
    }
  },
  {
    TraceId: Id_1,
    SpanId: Id_10,
    Name: mongodb.query,
    Resource: find test-db,
    Service: Samples.MongoDB,
    Type: mongodb,
    ParentId: Id_3,
    Tags: {
      component: MongoDb,
      db.name: test-db,
      env: integration_tests,
      mongodb.collection: employees,
      mongodb.query: { "find" : "employees", "filter" : { } },
      out.host: mongo,
      out.port: 27017,
      peer.service: test-db,
      span.kind: client,
      version: 1.0.0,
      _dd.peer.service.source: db.name
    }
  },
  {
    TraceId: Id_1,
    SpanId: Id_11,
    Name: mongodb.query,
    Resource: find test-db,
    Service: Samples.MongoDB,
    Type: mongodb,
    ParentId: Id_3,
    Tags: {
      component: MongoDb,
      db.name: test-db,
      env: integration_tests,
      mongodb.collection: employees,
      mongodb.query: { "find" : "employees", "filter" : { } },
      out.host: mongo,
      out.port: 27017,
      peer.service: test-db,
      span.kind: client,
      version: 1.0.0,
      _dd.peer.service.source: db.name
    }
  },
  {
    TraceId: Id_1,
    SpanId: Id_12,
    Name: mongodb.query,
    Resource: delete test-db,
    Service: Samples.MongoDB,
    Type: mongodb,
    ParentId: Id_4,
    Tags: {
      component: MongoDb,
      db.name: test-db,
      env: integration_tests,
      mongodb.collection: employees,
      mongodb.query: { "delete" : "employees", "ordered" : true },
      out.host: mongo,
      out.port: 27017,
      peer.service: test-db,
      span.kind: client,
      version: 1.0.0,
      _dd.peer.service.source: db.name
    }
  },
  {
    TraceId: Id_1,
    SpanId: Id_13,
    Name: mongodb.query,
    Resource: insert test-db,
    Service: Samples.MongoDB,
    Type: mongodb,
    ParentId: Id_4,
    Tags: {
      component: MongoDb,
      db.name: test-db,
      env: integration_tests,
      mongodb.collection: employees,
      mongodb.query: { "insert" : "employees", "ordered" : true },
      out.host: mongo,
      out.port: 27017,
      peer.service: test-db,
      span.kind: client,
      version: 1.0.0,
      _dd.peer.service.source: db.name
    }
  },
  {
    TraceId: Id_1,
    SpanId: Id_14,
    Name: mongodb.query,
    Resource: aggregate test-db,
    Service: Samples.MongoDB,
    Type: mongodb,
    ParentId: Id_4,
    Tags: {
      component: MongoDb,
      db.name: test-db,
      env: integration_tests,
      mongodb.collection: employees,
      mongodb.query: { "aggregate" : "employees", "pipeline" : [{ "$match" : { } }, { "$group" : { "_id" : 1, "n" : { "$sum" : 1 } } }], "cursor" : { } },
      out.host: mongo,
      out.port: 27017,
      peer.service: test-db,
      span.kind: client,
      version: 1.0.0,
      _dd.peer.service.source: db.name
    }
  },
  {
    TraceId: Id_1,
    SpanId: Id_15,
    Name: mongodb.query,
    Resource: find test-db,
    Service: Samples.MongoDB,
    Type: mongodb,
    ParentId: Id_4,
    Tags: {
      component: MongoDb,
      db.name: test-db,
      env: integration_tests,
      mongodb.collection: employees,
      mongodb.query: { "find" : "employees", "filter" : { } },
      out.host: mongo,
      out.port: 27017,
      peer.service: test-db,
      span.kind: client,
      version: 1.0.0,
      _dd.peer.service.source: db.name
    }
  },
  {
    TraceId: Id_1,
    SpanId: Id_16,
    Name: mongodb.query,
    Resource: delete test-db,
    Service: Samples.MongoDB,
    Type: mongodb,
    ParentId: Id_5,
    Tags: {
      component: MongoDb,
      db.name: test-db,
      env: integration_tests,
      mongodb.collection: employees,
      mongodb.query: { "delete" : "employees", "ordered" : true },
      out.host: mongo,
      out.port: 27017,
      peer.service: test-db,
      span.kind: client,
      version: 1.0.0,
      _dd.peer.service.source: db.name
    }
  },
  {
    TraceId: Id_1,
    SpanId: Id_17,
    Name: mongodb.query,
    Resource: insert test-db,
    Service: Samples.MongoDB,
    Type: mongodb,
    ParentId: Id_5,
    Tags: {
      component: MongoDb,
      db.name: test-db,
      env: integration_tests,
      mongodb.collection: employees,
      mongodb.query: { "insert" : "employees", "ordered" : true },
      out.host: mongo,
      out.port: 27017,
      peer.service: test-db,
      span.kind: client,
      version: 1.0.0,
      _dd.peer.service.source: db.name
    }
  },
  {
    TraceId: Id_1,
    SpanId: Id_18,
    Name: mongodb.query,
    Resource: aggregate test-db,
    Service: Samples.MongoDB,
    Type: mongodb,
    ParentId: Id_5,
    Tags: {
      component: MongoDb,
      db.name: test-db,
      env: integration_tests,
      mongodb.collection: employees,
      mongodb.query: { "aggregate" : "employees", "pipeline" : [{ "$match" : { } }, { "$group" : { "_id" : 1, "n" : { "$sum" : 1 } } }], "cursor" : { } },
      out.host: mongo,
      out.port: 27017,
      peer.service: test-db,
      span.kind: client,
      version: 1.0.0,
      _dd.peer.service.source: db.name
    }
  },
  {
    TraceId: Id_1,
    SpanId: Id_19,
    Name: mongodb.query,
    Resource: find test-db,
    Service: Samples.MongoDB,
    Type: mongodb,
    ParentId: Id_5,
    Tags: {
      component: MongoDb,
      db.name: test-db,
      env: integration_tests,
      mongodb.collection: employees,
      mongodb.query: { "find" : "employees", "filter" : { } },
      out.host: mongo,
      out.port: 27017,
      peer.service: test-db,
      span.kind: client,
      version: 1.0.0,
      _dd.peer.service.source: db.name
    }
  },
  {
    TraceId: Id_1,
    SpanId: Id_20,
    Name: mongodb.query,
    Resource: find test-db,
    Service: Samples.MongoDB,
    Type: mongodb,
    ParentId: Id_5,
    Tags: {
      component: MongoDb,
      db.name: test-db,
      env: integration_tests,
      mongodb.collection: employees,
      mongodb.query: { "find" : "employees", "filter" : { } },
      out.host: mongo,
      out.port: 27017,
      peer.service: test-db,
      span.kind: client,
      version: 1.0.0,
      _dd.peer.service.source: db.name
    }
  }
]