@model List<KeyValuePair<string, string>>

@{
    ViewData["Title"] = "Home Page";
}

<script>
    window.post = function (url, data) {
        let fullUrl = window.location + url;
        console.log(fullUrl);
        return fetch(url, { method: "POST", headers: { 'Content-Type': 'application/json' }, body: data });
    }

    window.postData = function () {
        post("/data", "arg=database()");
    }

    window.postJson2 = function (url, data) {
        let fullUrl = window.location + url;
        console.log(fullUrl);
        return fetch(url, { 
            method: "POST", 
            headers: { 
                'Content-Type': 'application/x-www-form-urlencoded'
            }, 
            body: data
        });
    }
    
    window.getWithHeaders = function (url, headers) {
        return fetch(url, { method: 'GET', headers: headers, credentials: 'same-origin' });
    }

    window.GetCookieData = function (cookie1, cookie2, url) {
        document.cookie = cookie1;
        document.cookie = cookie2;
        return fetch(url, { method: 'GET',headers: {'Content-Type': 'application/json'}, credentials: 'same-origin'});
    }

        window.GetCookieHeaderData = function (cookie, headerName, headerValue, headerName2, headerValue2, url) {
        document.cookie = cookie;
        let headers = {
            'Content-Type': 'application/json',
            [headerName]: headerValue,
            [headerName2]: headerValue2
        };
        return fetch(url, { method: 'GET', headers: headers, credentials: 'same-origin' });
    }

</script>

<div>
    <h1>Welcome to .Net Core Weblog</h1>

    <p>Use this version for testing database dependencies (or other docker dependencies)</p>

    <div>@System.IO.Directory.GetCurrentDirectory()</div>


	<div><a href="/Iast/StoredXss/">GET /Iast/StoredXss </a></div>

	<div><a href="/Iast/StoredXssEscaped/">GET /Iast/StoredXssEscaped with INJECTION</a></div>

	<div><a href="/Iast/StoredSqli/">GET /Iast/StoredSqli </a></div>
    
    <div>
        @Html.Raw(Context.Request.Query["q"])
    </div>

    <div>&nbsp;</div>

</div>

<div class="container">
    <table class="table table-striped table-hover">
        <tbody>
            <tr>
                <th scope="row">Runtime</th>
                <td>@(System.Runtime.InteropServices.RuntimeInformation.FrameworkDescription)</td>
            </tr>
            <tr>
                <th scope="row">Process architecture</th>
                <td>@(System.Runtime.InteropServices.RuntimeInformation.ProcessArchitecture)</td>
            </tr>
            <tr>
                <th scope="row">Profiler attached</th>
                <td>@ViewBag.ProfilerAttached</td>
            </tr>
            <tr>
                <th scope="row">Datadog.Trace.dll path</th>
                <td>@(ViewBag.TracerAssemblyLocation ?? "(not found)")</td>
            </tr>
        </tbody>
    </table>
</div>

<div class="container">
    <div>Environment Variables:</div>
    <table class="table table-striped table-hover">
        <thead>
            <tr>
                <th scope="col">Name</th>
                <th scope="col">Value</th>
            </tr>
        </thead>
        <tbody>
            @if (Model.Any())
            {
                foreach (var envVar in Model)
                {
                    <tr>
                        <th scope="row">@envVar.Key</th>
                        <td>@envVar.Value</td>
                    </tr>
                }
            }
            else
            {
                <tr>
                    <td colspan="2">(empty)</td>
                </tr>
            }
        </tbody>
    </table>
</div>
