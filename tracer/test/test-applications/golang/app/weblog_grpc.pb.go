// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.19.1
// source: utils/grpc/weblog.proto

package main

import (
	context "context"

	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	structpb "google.golang.org/protobuf/types/known/structpb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// WeblogClient is the client API for Weblog service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type WeblogClient interface {
	// Unary RPC
	Unary(ctx context.Context, in *structpb.Value, opts ...grpc.CallOption) (*structpb.Value, error)
	// A server-streaming RPC
	ServerStream(ctx context.Context, in *structpb.Value, opts ...grpc.CallOption) (Weblog_ServerStreamClient, error)
	// A client-streaming RPC
	ClientStream(ctx context.Context, opts ...grpc.CallOption) (Weblog_ClientStreamClient, error)
	// A bidirectional streaming RPC
	Bidi(ctx context.Context, opts ...grpc.CallOption) (Weblog_BidiClient, error)
}

type weblogClient struct {
	cc grpc.ClientConnInterface
}

func NewWeblogClient(cc grpc.ClientConnInterface) WeblogClient {
	return &weblogClient{cc}
}

func (c *weblogClient) Unary(ctx context.Context, in *structpb.Value, opts ...grpc.CallOption) (*structpb.Value, error) {
	out := new(structpb.Value)
	err := c.cc.Invoke(ctx, "/weblog.Weblog/Unary", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *weblogClient) ServerStream(ctx context.Context, in *structpb.Value, opts ...grpc.CallOption) (Weblog_ServerStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &Weblog_ServiceDesc.Streams[0], "/weblog.Weblog/ServerStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &weblogServerStreamClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Weblog_ServerStreamClient interface {
	Recv() (*structpb.Value, error)
	grpc.ClientStream
}

type weblogServerStreamClient struct {
	grpc.ClientStream
}

func (x *weblogServerStreamClient) Recv() (*structpb.Value, error) {
	m := new(structpb.Value)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *weblogClient) ClientStream(ctx context.Context, opts ...grpc.CallOption) (Weblog_ClientStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &Weblog_ServiceDesc.Streams[1], "/weblog.Weblog/ClientStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &weblogClientStreamClient{stream}
	return x, nil
}

type Weblog_ClientStreamClient interface {
	Send(*structpb.Value) error
	CloseAndRecv() (*structpb.Value, error)
	grpc.ClientStream
}

type weblogClientStreamClient struct {
	grpc.ClientStream
}

func (x *weblogClientStreamClient) Send(m *structpb.Value) error {
	return x.ClientStream.SendMsg(m)
}

func (x *weblogClientStreamClient) CloseAndRecv() (*structpb.Value, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(structpb.Value)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *weblogClient) Bidi(ctx context.Context, opts ...grpc.CallOption) (Weblog_BidiClient, error) {
	stream, err := c.cc.NewStream(ctx, &Weblog_ServiceDesc.Streams[2], "/weblog.Weblog/Bidi", opts...)
	if err != nil {
		return nil, err
	}
	x := &weblogBidiClient{stream}
	return x, nil
}

type Weblog_BidiClient interface {
	Send(*structpb.Value) error
	Recv() (*structpb.Value, error)
	grpc.ClientStream
}

type weblogBidiClient struct {
	grpc.ClientStream
}

func (x *weblogBidiClient) Send(m *structpb.Value) error {
	return x.ClientStream.SendMsg(m)
}

func (x *weblogBidiClient) Recv() (*structpb.Value, error) {
	m := new(structpb.Value)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// WeblogServer is the server API for Weblog service.
// All implementations must embed UnimplementedWeblogServer
// for forward compatibility
type WeblogServer interface {
	// Unary RPC
	Unary(context.Context, *structpb.Value) (*structpb.Value, error)
	// A server-streaming RPC
	ServerStream(*structpb.Value, Weblog_ServerStreamServer) error
	// A client-streaming RPC
	ClientStream(Weblog_ClientStreamServer) error
	// A bidirectional streaming RPC
	Bidi(Weblog_BidiServer) error
	mustEmbedUnimplementedWeblogServer()
}

// UnimplementedWeblogServer must be embedded to have forward compatible implementations.
type UnimplementedWeblogServer struct {
}

func (UnimplementedWeblogServer) Unary(context.Context, *structpb.Value) (*structpb.Value, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Unary not implemented")
}
func (UnimplementedWeblogServer) ServerStream(*structpb.Value, Weblog_ServerStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method ServerStream not implemented")
}
func (UnimplementedWeblogServer) ClientStream(Weblog_ClientStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method ClientStream not implemented")
}
func (UnimplementedWeblogServer) Bidi(Weblog_BidiServer) error {
	return status.Errorf(codes.Unimplemented, "method Bidi not implemented")
}
func (UnimplementedWeblogServer) mustEmbedUnimplementedWeblogServer() {}

// UnsafeWeblogServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to WeblogServer will
// result in compilation errors.
type UnsafeWeblogServer interface {
	mustEmbedUnimplementedWeblogServer()
}

func RegisterWeblogServer(s grpc.ServiceRegistrar, srv WeblogServer) {
	s.RegisterService(&Weblog_ServiceDesc, srv)
}

func _Weblog_Unary_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(structpb.Value)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WeblogServer).Unary(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/weblog.Weblog/Unary",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WeblogServer).Unary(ctx, req.(*structpb.Value))
	}
	return interceptor(ctx, in, info, handler)
}

func _Weblog_ServerStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(structpb.Value)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(WeblogServer).ServerStream(m, &weblogServerStreamServer{stream})
}

type Weblog_ServerStreamServer interface {
	Send(*structpb.Value) error
	grpc.ServerStream
}

type weblogServerStreamServer struct {
	grpc.ServerStream
}

func (x *weblogServerStreamServer) Send(m *structpb.Value) error {
	return x.ServerStream.SendMsg(m)
}

func _Weblog_ClientStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(WeblogServer).ClientStream(&weblogClientStreamServer{stream})
}

type Weblog_ClientStreamServer interface {
	SendAndClose(*structpb.Value) error
	Recv() (*structpb.Value, error)
	grpc.ServerStream
}

type weblogClientStreamServer struct {
	grpc.ServerStream
}

func (x *weblogClientStreamServer) SendAndClose(m *structpb.Value) error {
	return x.ServerStream.SendMsg(m)
}

func (x *weblogClientStreamServer) Recv() (*structpb.Value, error) {
	m := new(structpb.Value)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _Weblog_Bidi_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(WeblogServer).Bidi(&weblogBidiServer{stream})
}

type Weblog_BidiServer interface {
	Send(*structpb.Value) error
	Recv() (*structpb.Value, error)
	grpc.ServerStream
}

type weblogBidiServer struct {
	grpc.ServerStream
}

func (x *weblogBidiServer) Send(m *structpb.Value) error {
	return x.ServerStream.SendMsg(m)
}

func (x *weblogBidiServer) Recv() (*structpb.Value, error) {
	m := new(structpb.Value)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Weblog_ServiceDesc is the grpc.ServiceDesc for Weblog service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Weblog_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "weblog.Weblog",
	HandlerType: (*WeblogServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Unary",
			Handler:    _Weblog_Unary_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ServerStream",
			Handler:       _Weblog_ServerStream_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "ClientStream",
			Handler:       _Weblog_ClientStream_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "Bidi",
			Handler:       _Weblog_Bidi_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "utils/grpc/weblog.proto",
}
