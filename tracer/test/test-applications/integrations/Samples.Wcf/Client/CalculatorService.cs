//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------



using System;
using System.ServiceModel;

[System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
[System.ServiceModel.ServiceContractAttribute(Namespace = "WcfSample", ConfigurationName = "ICalculator")]
public interface ICalculator
{

    [System.ServiceModel.OperationContractAttribute(Name = "ServerSyncAdd", Action = "WcfSample/ICalculator/ServerSyncAdd", ReplyAction = "WcfSample/ICalculator/ServerSyncAddResponse")]
    double Sync_ServerSyncAdd(double n1, double n2);

    [System.ServiceModel.OperationContractAttribute(Name = "ServerSyncAdd", Action = "WcfSample/ICalculator/ServerSyncAdd", ReplyAction = "WcfSample/ICalculator/ServerSyncAddResponse")]
    System.Threading.Tasks.Task<double> Task_ServerSyncAdd(double n1, double n2);

    [System.ServiceModel.OperationContractAttribute(Name = "ServerSyncAdd", AsyncPattern = true, Action = "WcfSample/ICalculator/ServerSyncAdd", ReplyAction = "WcfSample/ICalculator/ServerSyncAddResponse")]
    IAsyncResult Begin_ServerSyncAdd(double n1, double n2, AsyncCallback callback, object state);
    double End_ServerSyncAdd(IAsyncResult result);

    [System.ServiceModel.OperationContractAttribute(Name = "ServerTaskAdd", Action = "WcfSample/ICalculator/ServerTaskAdd", ReplyAction = "WcfSample/ICalculator/ServerTaskAddResponse")]
    double Sync_ServerTaskAdd(double n1, double n2);

    [System.ServiceModel.OperationContractAttribute(Name = "ServerTaskAdd", Action = "WcfSample/ICalculator/ServerTaskAdd", ReplyAction = "WcfSample/ICalculator/ServerTaskAddResponse")]
    System.Threading.Tasks.Task<double> Task_ServerTaskAdd(double n1, double n2);

    [System.ServiceModel.OperationContractAttribute(Name = "ServerTaskAdd", AsyncPattern = true, Action = "WcfSample/ICalculator/ServerTaskAdd", ReplyAction = "WcfSample/ICalculator/ServerTaskAddResponse")]
    IAsyncResult Begin_ServerTaskAdd(double n1, double n2, AsyncCallback callback, object state);
    double End_ServerTaskAdd(IAsyncResult result);

    [System.ServiceModel.OperationContractAttribute(Name = "ServerAsyncAdd", Action = "WcfSample/ICalculator/ServerAsyncAdd", ReplyAction = "WcfSample/ICalculator/ServerAsyncAddResponse")]
    double Sync_ServerAsyncAdd(double n1, double n2);

    [System.ServiceModel.OperationContractAttribute(Name = "ServerAsyncAdd", Action = "WcfSample/ICalculator/ServerAsyncAdd", ReplyAction = "WcfSample/ICalculator/ServerAsyncAddResponse")]
    System.Threading.Tasks.Task<double> Task_ServerAsyncAdd(double n1, double n2);

    [System.ServiceModel.OperationContractAttribute(Name = "ServerAsyncAdd", AsyncPattern = true, Action = "WcfSample/ICalculator/ServerAsyncAdd", ReplyAction = "WcfSample/ICalculator/ServerAsyncAddResponse")]
    IAsyncResult Begin_ServerAsyncAdd(double n1, double n2, AsyncCallback callback, object state);
    double End_ServerAsyncAdd(IAsyncResult result);
}

[System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
public interface ICalculatorChannel : ICalculator, System.ServiceModel.IClientChannel
{
}

[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
public partial class CalculatorClient : System.ServiceModel.ClientBase<ICalculator>, ICalculator
{

    public CalculatorClient()
    {
    }

    public CalculatorClient(string endpointConfigurationName) :
            base(endpointConfigurationName)
    {
    }

    public CalculatorClient(string endpointConfigurationName, string remoteAddress) :
            base(endpointConfigurationName, remoteAddress)
    {
    }

    public CalculatorClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) :
            base(endpointConfigurationName, remoteAddress)
    {
    }

    public CalculatorClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) :
            base(binding, remoteAddress)
    {
    }

    public double Sync_ServerSyncAdd(double n1, double n2)
    {
        return base.Channel.Sync_ServerSyncAdd(n1, n2);
    }

    public System.Threading.Tasks.Task<double> Task_ServerSyncAdd(double n1, double n2)
    {
        return base.Channel.Task_ServerSyncAdd(n1, n2);
    }

    public IAsyncResult Begin_ServerSyncAdd(double n1, double n2, AsyncCallback callback, object state)
    {
        return base.Channel.Begin_ServerSyncAdd(n1, n2, callback, state);
    }

    public double End_ServerSyncAdd(IAsyncResult result)
    {
        return base.Channel.End_ServerSyncAdd(result);
    }

    public double Sync_ServerTaskAdd(double n1, double n2)
    {
        return base.Channel.Sync_ServerTaskAdd(n1, n2);
    }

    public System.Threading.Tasks.Task<double> Task_ServerTaskAdd(double n1, double n2)
    {
        return base.Channel.Task_ServerTaskAdd(n1, n2);
    }

    public IAsyncResult Begin_ServerTaskAdd(double n1, double n2, AsyncCallback callback, object state)
    {
        return base.Channel.Begin_ServerTaskAdd(n1, n2, callback, state);
    }

    public double End_ServerTaskAdd(IAsyncResult result)
    {
        return base.Channel.End_ServerTaskAdd(result);
    }

    public double Sync_ServerAsyncAdd(double n1, double n2)
    {
        return base.Channel.Sync_ServerAsyncAdd(n1, n2);
    }

    public System.Threading.Tasks.Task<double> Task_ServerAsyncAdd(double n1, double n2)
    {
        return base.Channel.Task_ServerAsyncAdd(n1, n2);
    }

    public IAsyncResult Begin_ServerAsyncAdd(double n1, double n2, AsyncCallback callback, object state)
    {
        return base.Channel.Begin_ServerAsyncAdd(n1, n2, callback, state);
    }

    public double End_ServerAsyncAdd(IAsyncResult result)
    {
        return base.Channel.End_ServerAsyncAdd(result);
    }
}
