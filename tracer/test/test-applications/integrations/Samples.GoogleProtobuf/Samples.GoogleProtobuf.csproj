<Project Sdk="Microsoft.NET.Sdk">
  <PropertyGroup>
    <ApiVersion Condition="'$(ApiVersion)' == ''">3.28.2</ApiVersion>

    <!-- This reprents the part of the path to protoc that varies by OS. It's used in the PreBuild action. -->
    <ProtocPath Condition="'$(OS)' == 'Windows_NT' ">windows_x64\protoc.exe</ProtocPath>
    <ProtocPath Condition=" '$([System.Runtime.InteropServices.RuntimeInformation]::IsOSPlatform($([System.Runtime.InteropServices.OSPlatform]::Linux)))' ">linux_x64\protoc</ProtocPath>
    <ProtocPath Condition=" '$([System.Runtime.InteropServices.RuntimeInformation]::IsOSPlatform($([System.Runtime.InteropServices.OSPlatform]::OSX)))' ">macosx_x64\protoc</ProtocPath>

    <!-- 👇 Required to build multiple projects with the same Configuration|Platform -->
    <GenerateAssemblyInfo>false</GenerateAssemblyInfo>
    <GenerateTargetFrameworkAttribute>false</GenerateTargetFrameworkAttribute>
  </PropertyGroup>

  <ItemGroup>
    <PackageReference Include="Google.Protobuf" Version="$(ApiVersion)"/>
    <!-- 👇 This one is only here to bring the right version of protoc (must stay in sync with 👆) -->
    <PackageReference Include="Google.Protobuf.Tools" Version="$(ApiVersion)"/>
  </ItemGroup>

  <Target Name="PreBuild" BeforeTargets="PreBuildEvent">
    <!-- 
    This is the step that takes the *.proto file and turns it into a C# file.
    Protoc will generate different code depending on the version used,
    and code generated for newer versions might not compile if the dependency is older
    so we generate the C# code here to make sure it matches the dependency version that is used
     -->
    <Exec Command="$(NugetPackageRoot)google.protobuf.tools\$(ApiVersion)\tools\$(ProtocPath) -I=$(NugetPackageRoot)google.protobuf.tools\$(ApiVersion)\tools -I=$(ProjectDir) --csharp_out=$(ProjectDir) $(ProjectDir)sample.proto"/>
  </Target>
</Project>
