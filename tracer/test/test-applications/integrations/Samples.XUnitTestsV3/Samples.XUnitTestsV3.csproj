<Project Sdk="Microsoft.NET.Sdk">

  <PropertyGroup>
    <ApiVersion Condition="'$(ApiVersion)' == ''">3.0.0</ApiVersion>
    <!-- xunit.v3 1.x.x supports net6.0+   -->
    <TargetFrameworks>net8.0;net9.0;net10.0</TargetFrameworks>
    <TargetFrameworks Condition="$(ApiVersion) &lt; 2.0.0">net6.0;net7.0;net8.0;net9.0;net10.0</TargetFrameworks>
    <MicrosoftTestSDKVersion>17.12.0</MicrosoftTestSDKVersion>

    <!-- Required to build multiple projects with the same Configuration|Platform -->
    <GenerateAssemblyInfo>false</GenerateAssemblyInfo>
    <GenerateRuntimeConfigurationFiles>true</GenerateRuntimeConfigurationFiles>
    <!-- <GenerateProgramFile>false</GenerateProgramFile> -->

    <CopyLocalLockFileAssemblies>true</CopyLocalLockFileAssemblies>
    <CopyDebugSymbolFilesFromPackages>true</CopyDebugSymbolFilesFromPackages>
    <RestoreProjectStyle>PackageReference</RestoreProjectStyle>
  </PropertyGroup>

  <ItemGroup>
    <PackageReference Include="Microsoft.NET.Test.Sdk" Version="$(MicrosoftTestSDKVersion)" />
    <!-- Microsoft.NET.Test.Sdk implicitly references Microsoft.TestPlatform.TestHost, but that -->
    <!-- includes Windows-specific testhost that mean that you can't use a built project on all -->
    <!-- platforms. By excluding this, we use the same dll on all platforms instead -->
    <PackageReference Include="Microsoft.TestPlatform.TestHost" Version="$(MicrosoftTestSDKVersion)">
      <ExcludeAssets>build;buildtransitive</ExcludeAssets>
    </PackageReference>

    <PackageReference Include="xunit.v3" Version="$(ApiVersion)" />
    <PackageReference Include="xunit.runner.visualstudio" Version="3.0.1" />
    <PackageReference Include="coverlet.collector" Version="6.0.0">
      <IncludeAssets>runtime; build; native; contentfiles; analyzers; buildtransitive</IncludeAssets>
      <PrivateAssets>all</PrivateAssets>
    </PackageReference>
  </ItemGroup>

  <ItemGroup>
    <None Update="xunit.runner.json">
      <CopyToOutputDirectory>PreserveNewest</CopyToOutputDirectory>
    </None>
  </ItemGroup>

  <Target Name="CodeCoverageFixTarget" AfterTargets="Build" Condition=" '$(TargetFramework)' != '' AND '$(ManuallyCopyCodeCoverageFiles)' != 'false' ">
    <Message Importance="High" Text="Fixing Code Coverage: $(TargetFramework)" />
    <CallTarget Targets="ComputeFilesToPublish" />
    <CallTarget Targets="CopyCoverletDataCollectorFiles" />

    <!-- Because we don't publish on windows, we just move the code coverage binaries from the publish folder to the actual build bin folder-->
    <ItemGroup>
      <PublishedTraceDataCollectorArtifacts Include="$(PublishDir)**\*.*" />
    </ItemGroup>
    <Move SourceFiles="@(PublishedTraceDataCollectorArtifacts)" DestinationFolder="$(OutputPath)\%(RecursiveDir)" />
  </Target>
  
</Project>
