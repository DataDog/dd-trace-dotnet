<Project Sdk="Microsoft.NET.Sdk">

  <PropertyGroup>
    <IsPackable>false</IsPackable>
    <OutputType>Library</OutputType>
    <ApiVersion Condition="'$(ApiVersion)' == ''">4.0.0</ApiVersion>
    <TestSdkVersion>17.9.0</TestSdkVersion>
    <TestSdkVersion Condition="$(ApiVersion.StartsWith('4.'))">18.0.0</TestSdkVersion>
    <TestSdkVersion Condition="'$(TargetFramework)' == 'netcoreapp2.1' OR '$(TargetFramework)' == 'netcoreapp3.0'">16.11.0</TestSdkVersion>

    <!-- Required to build multiple projects with the same Configuration|Platform -->
    <GenerateAssemblyInfo>false</GenerateAssemblyInfo>
    <GenerateTargetFrameworkAttribute>false</GenerateTargetFrameworkAttribute>
    <GenerateRuntimeConfigurationFiles>true</GenerateRuntimeConfigurationFiles>
  </PropertyGroup>

  <PropertyGroup Condition="$(ApiVersion.StartsWith('4.'))">
    <DefineConstants>$(DefineConstants);MSTEST_ASYNC</DefineConstants>
    <SuppressTfmSupportBuildErrors>true</SuppressTfmSupportBuildErrors>
  </PropertyGroup>
  
  <ItemGroup>
    <PackageReference Include="Microsoft.NET.Test.Sdk" Version="$(TestSdkVersion)" />
    <!-- Microsoft.NET.Test.Sdk implicitly references Microsoft.TestPlatform.TestHost, but that -->
    <!-- includes Windows-specific testhost that mean that you can't use a built project on all -->
    <!-- platforms. By excluding this, we use the same dll on all platforms instead -->
    <PackageReference Include="Microsoft.TestPlatform.TestHost" Version="$(TestSdkVersion)">
      <ExcludeAssets>build;buildtransitive</ExcludeAssets>
    </PackageReference>
    <PackageReference Include="MSTest.TestAdapter" Version="$(ApiVersion)" />
    <PackageReference Include="MSTest.TestFramework" Version="$(ApiVersion)" />
  </ItemGroup>
  
  <ItemGroup>
    <Compile Include="..\Samples.MSTestTests\TestSuite.cs">
      <Link>TestSuite.cs</Link>
    </Compile>
  </ItemGroup>

</Project>
 