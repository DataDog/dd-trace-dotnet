// <copyright file="MSBuildPropsFileGenerator.cs" company="Datadog">
// Unless explicitly stated otherwise all files in this repository are licensed under the Apache 2 License.
// This product includes software developed at Datadog (https://www.datadoghq.com/). Copyright 2017 Datadog, Inc.
// </copyright>

using System;
using System.Collections.Generic;
using System.Diagnostics;
using System.IO;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace GeneratePackageVersions
{
    public class MSBuildPropsFileGenerator : FileGenerator
    {
        private const string HeaderConst =
@"<!--
***********************************************************************************************
PackageVersions.g.props

NOTE:  This code was generated by the GeneratePackageVersions tool. To safely
       modify this file, edit PackageVersionsGeneratorDefinitions.json and
       re-run the GeneratePackageVersions project in Visual Studio. See the
       launchSettings.json for the project if you would like to run the tool
       with the correct arguments outside of Visual Studio.

***********************************************************************************************
-->
<Project>
  <ItemGroup>";

        private const string FooterConst =
@"  </ItemGroup>
</Project>";

        private const string TargetFrameworkFormat =
@"
      <TargetFramework>{0}</TargetFramework>";

        private const string EntryFormat =
@"    <PackageVersionSample Include=""test\test-applications\integrations\{0}\{0}.csproj"">
      <Properties>ApiVersion={1};RestoreRecursive=false;BuildProjectReferences=false</Properties>{2}
    </PackageVersionSample>";

        public MSBuildPropsFileGenerator(string filename)
            : base(filename)
        {
        }

        protected override string Header
        {
            get
            {
                return HeaderConst;
            }
        }

        protected override string Footer
        {
            get
            {
                return FooterConst;
            }
        }

        public override void Write(PackageVersionEntry packageVersionEntry, IEnumerable<(TargetFramework framework, IEnumerable<Version> versions)> versions)
        {
            Debug.Assert(Started, "Cannot call Write() before calling Start()");
            Debug.Assert(!Finished, "Cannot call Write() after calling Finish()");

            foreach (var (framework, packageVersions) in versions)
            {
                string targetFrameworkProperty = string.Format(TargetFrameworkFormat, framework);
                foreach (var packageVersion in packageVersions)
                {
                    FileStringBuilder.AppendLine(string.Format(EntryFormat, packageVersionEntry.SampleProjectName, packageVersion, targetFrameworkProperty));
                }
            }
        }
    }
}
