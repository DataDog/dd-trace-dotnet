// <copyright file="XunitStrategyFileGenerator.cs" company="Datadog">
// Unless explicitly stated otherwise all files in this repository are licensed under the Apache 2 License.
// This product includes software developed at Datadog (https://www.datadoghq.com/). Copyright 2017 Datadog, Inc.
// </copyright>

using System;
using System.Collections.Generic;
using System.Diagnostics;

namespace GeneratePackageVersions
{
    public class XunitStrategyFileGenerator : FileGenerator
    {
        private const string HeaderConst =
@"//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by the GeneratePackageVersions tool. To safely
//     modify this file, edit PackageVersionsGeneratorDefinitions.json and
//     re-run the GeneratePackageVersions project in Visual Studio. See the
//     launchSettings.json for the project if you would like to run the tool
//     with the correct arguments outside of Visual Studio.

//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated. 
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Diagnostics.CodeAnalysis;

namespace Datadog.Trace.ClrProfiler.IntegrationTests
{
    [SuppressMessage(""StyleCop.CSharp.LayoutRules"", ""SA1516:Elements must be separated by blank line"", Justification = ""This is an auto-generated file."")]
    public class PackageVersions
    {
#if TEST_ALL_MINOR_PACKAGE_VERSIONS
        public static readonly bool IsAllMinorPackageVersions = true;
#else
        public static readonly bool IsAllMinorPackageVersions = false;
#endif";

        private const string FooterConst =
@"    }
}";

        private const string BodyFormat =
@"        public static IEnumerable<object[]> {0} => IsAllMinorPackageVersions ? PackageVersionsLatestMinors.{0} : PackageVersionsLatestSpecific.{0};";

        public XunitStrategyFileGenerator(string filename)
            : base(filename)
        {
        }

        protected override string Header
        {
            get
            {
                return HeaderConst;
            }
        }

        protected override string Footer
        {
            get
            {
                return FooterConst;
            }
        }

        public override void Write(PackageVersionEntry packageVersionEntry, IEnumerable<(TargetFramework framework, IEnumerable<Version> versions)> valueTuples)
        {
            Debug.Assert(Started, "Cannot call Write() before calling Start()");
            Debug.Assert(!Finished, "Cannot call Write() after calling Finish()");

            FileStringBuilder.AppendLine();
            FileStringBuilder.AppendFormat(BodyFormat, packageVersionEntry.IntegrationName);
            FileStringBuilder.AppendLine();
        }
    }
}
