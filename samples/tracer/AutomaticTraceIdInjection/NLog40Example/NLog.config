<?xml version="1.0" encoding="utf-8" ?>
<nlog xmlns="http://www.nlog-project.org/schemas/NLog.xsd"
      xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
  <targets>
    <!-- For JsonLayout, you must extract the Datadog properties individually by adding <attribute> nodes (see: https://github.com/NLog/NLog/wiki/JsonLayout) -->
    <!--
         Additions to layout:
         - <attribute name="dd.env" layout="${mdc:item=dd.env}"/>
         - <attribute name="dd.service" layout="${mdc:item=dd.service}"/>
         - <attribute name="dd.version" layout="${mdc:item=dd.version}"/>
         - <attribute name="dd.trace_id" layout="${mdc:item=dd.trace_id}"/>
         - <attribute name="dd.span_id" layout="${mdc:item=dd.span_id}"/>
        -->
    <target name="jsonFile" xsi:type="File" fileName="log-NLog40-jsonFile.log">
      <layout xsi:type="JsonLayout">
        <attribute name="time" layout="${longdate}" />
        <attribute name="level" layout="${level:upperCase=true}"/>
        <attribute name="message" layout="${message}" />
        <attribute name="exception" layout="${exception:format=ToString}" />

        <!-- Manual changes: start -->
        <attribute name="dd.env" layout="${mdc:item=dd.env}"/>
        <attribute name="dd.service" layout="${mdc:item=dd.service}"/>
        <attribute name="dd.version" layout="${mdc:item=dd.version}"/>
        <attribute name="dd.trace_id" layout="${mdc:item=dd.trace_id}"/>
        <attribute name="dd.span_id" layout="${mdc:item=dd.span_id}"/>
        <!-- Manual changes: end -->
      </layout>
    </target>

    <!-- For a custom layout, you must extract the Datadog properties individually by using the ${mdc:item=String} syntax (see: https://github.com/NLog/NLog/wiki/MDC-Layout-Renderer) -->
    <!--
         Additions to layout: {dd.env=&quot;${mdc:item=dd.env}&quot;,dd.service=&quot;${mdc:item=dd.service}&quot;,dd.version=&quot;${mdc:item=dd.version}&quot;,dd.trace_id=&quot;${mdc:item=dd.trace_id}&quot;,dd.span_id=&quot;${mdc:item=dd.span_id}&quot;}
    -->
    <!--
         Parsing this log line with a custom Pipeline that adds Trace/Log correlation can be done with the following Processors:
         1. Grok Parser: Set the parsing rules to `log_parser %{date("yyyy-MM-dd HH:mm:ss.SSSS"):time}\|%{word:level}\|%{notSpace:logger}\|\{%{data::keyvalue}}\|%{data:message}`
    -->
    <target name="textFile" xsi:type="File" fileName="log-NLog40-textFile.log"
            layout="${longdate}|${uppercase:${level}}|${logger}|{dd.env=&quot;${mdc:item=dd.env}&quot;,dd.service=&quot;${mdc:item=dd.service}&quot;,dd.version=&quot;${mdc:item=dd.version}&quot;,dd.trace_id=&quot;${mdc:item=dd.trace_id}&quot;,dd.span_id=&quot;${mdc:item=dd.span_id}&quot;}|${message}" />
  </targets>

  <!-- rules to map from logger name to target -->
  <rules>
    <logger name="*" minlevel="Trace" writeTo="jsonFile,textFile" />
  </rules>
</nlog>